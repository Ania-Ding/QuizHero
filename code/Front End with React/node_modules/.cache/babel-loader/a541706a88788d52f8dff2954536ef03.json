{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nvar uniqKeyChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nvar uniqKeyCharsLength = uniqKeyChars.length;\n\nfunction generateUniqKey() {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n  var ret = '';\n\n  for (var i = 0; i < length; i += 1) {\n    ret += uniqKeyChars[Math.floor(Math.random() * uniqKeyCharsLength)];\n  }\n\n  return ret;\n}\n\nvar injectScopePostCSSplugin = _postcss.default.plugin('marpit-style-assign-postcss-inject-scope', function (attr) {\n  return function (css) {\n    return css.walkRules(function (rule) {\n      rule.selectors = rule.selectors.map(function (selector) {\n        var injectSelector = /^section(?![\\w-])/.test(selector) ? selector.slice(7) : \" \".concat(selector);\n        return \"section[\".concat(attr, \"]\").concat(injectSelector);\n      });\n    });\n  };\n});\n/**\n * Marpit style assign plugin.\n *\n * Assign style global directive and parsed styles to Marpit instance's\n * `lastStyles' property.\n *\n * @alias module:markdown/style/assign\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction assign(md) {\n  var marpit = md.marpit;\n  md.core.ruler.after('marpit_slide', 'marpit_style_assign', function (state) {\n    if (state.inlineMode) return;\n    var directives = marpit.lastGlobalDirectives || {};\n    marpit.lastStyles = directives.style ? [directives.style] : [];\n    var current;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = state.tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n\n        if (token.meta && token.meta.marpitSlideElement === 1) {\n          current = token;\n        } else if (token.meta && token.meta.marpitSlideElement === -1) {\n          current = undefined;\n        } else if (token.type === 'marpit_style') {\n          var content = token.content; // Scoped style into current page\n\n          var _ref = token.meta || {},\n              marpitStyleScoped = _ref.marpitStyleScoped;\n\n          if (current && marpitStyleScoped) {\n            var metaAttr = current.meta.marpitScopeMeta;\n\n            if (!metaAttr) {\n              metaAttr = \"data-marpit-scope-\".concat(generateUniqKey());\n              current.meta.marpitScopeMeta = metaAttr;\n              current.attrSet(metaAttr, '');\n            }\n\n            var processor = (0, _postcss.default)([injectScopePostCSSplugin(metaAttr)]);\n\n            try {\n              content = processor.process(content).css;\n            } catch (e) {\n              content = undefined;\n            }\n          }\n\n          if (content) marpit.lastStyles.push(content);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(assign);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/style/assign.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_plugin","obj","__esModule","uniqKeyChars","uniqKeyCharsLength","length","generateUniqKey","ret","i","Math","floor","random","injectScopePostCSSplugin","plugin","attr","css","walkRules","rule","selectors","map","selector","injectSelector","test","slice","assign","md","marpit","core","ruler","after","state","inlineMode","directives","lastGlobalDirectives","lastStyles","style","current","tokens","token","meta","marpitSlideElement","undefined","type","content","marpitStyleScoped","metaAttr","marpitScopeMeta","attrSet","processor","process","e","push","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst uniqKeyChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst uniqKeyCharsLength = uniqKeyChars.length;\n\nfunction generateUniqKey(length = 8) {\n  let ret = '';\n\n  for (let i = 0; i < length; i += 1) ret += uniqKeyChars[Math.floor(Math.random() * uniqKeyCharsLength)];\n\n  return ret;\n}\n\nconst injectScopePostCSSplugin = _postcss.default.plugin('marpit-style-assign-postcss-inject-scope', attr => css => css.walkRules(rule => {\n  rule.selectors = rule.selectors.map(selector => {\n    const injectSelector = /^section(?![\\w-])/.test(selector) ? selector.slice(7) : ` ${selector}`;\n    return `section[${attr}]${injectSelector}`;\n  });\n}));\n/**\n * Marpit style assign plugin.\n *\n * Assign style global directive and parsed styles to Marpit instance's\n * `lastStyles' property.\n *\n * @alias module:markdown/style/assign\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction assign(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.after('marpit_slide', 'marpit_style_assign', state => {\n    if (state.inlineMode) return;\n    const directives = marpit.lastGlobalDirectives || {};\n    marpit.lastStyles = directives.style ? [directives.style] : [];\n    let current;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        current = token;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        current = undefined;\n      } else if (token.type === 'marpit_style') {\n        let {\n          content\n        } = token; // Scoped style into current page\n\n        const {\n          marpitStyleScoped\n        } = token.meta || {};\n\n        if (current && marpitStyleScoped) {\n          let metaAttr = current.meta.marpitScopeMeta;\n\n          if (!metaAttr) {\n            metaAttr = `data-marpit-scope-${generateUniqKey()}`;\n            current.meta.marpitScopeMeta = metaAttr;\n            current.attrSet(metaAttr, '');\n          }\n\n          const processor = (0, _postcss.default)([injectScopePostCSSplugin(metaAttr)]);\n\n          try {\n            content = processor.process(content).css;\n          } catch (e) {\n            content = undefined;\n          }\n        }\n\n        if (content) marpit.lastStyles.push(content);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(assign);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}