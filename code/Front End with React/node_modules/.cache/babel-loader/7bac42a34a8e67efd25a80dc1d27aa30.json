{"ast":null,"code":"var _jsxFileName = \"/Users/yaozixuan/Document/OOSE/my-app/src/upload.js\";\nimport { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit';\n\nconst fs = require('fs'); // const fs = require('fs');\n\n\nconst props = {\n  name: 'file',\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  headers: {\n    authorization: 'authorization-text'\n  }\n};\nconst marpit = new Marpit(); // 2. Add theme CSS\n\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `;\nmarpit.themeSet.default = marpit.themeSet.add(theme);\n\nclass MyUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: \"\",\n      result: \"\"\n    };\n\n    this.beforeUpload = (file, fileList) => {\n      console.log(\"FILEEE\", file);\n      this.setState({\n        file: file\n      });\n    };\n\n    this.onChange = info => {\n      // var docfile =\n      // console.log(\"file!!!:\",info.file)\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n\n      if (info.file.status === 'done') {\n        // this.convertFile();\n        console.log(info.file.name);\n        message.success(`${info.file.name} file uploaded successfully`);\n      } else if (info.file.status === 'error') {\n        console.log(info.file.name);\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    };\n\n    this.onPreview = file => {\n      // 3. Render markdown\n      // console.log(this.set.file);\n      // const htmlfile = fs.readFileSync(this.state.file);\n      // var filestring = fs.readFileSync(this.state.file);\n      // function readFile(file) {\n      //     return new Promise((resolve, reject) => {\n      //         let content = '';\n      //         const reader = new FileReader();\n      //         reader.onloadend = function (e) {\n      //             content = e.target.result;\n      //             const result = content;\n      //             resolve(reader);\n      //         };\n      //         reader.onerror = function (e) {\n      //             reject(e);\n      //         };\n      //         reader.readAsText(file);\n      //     });\n      // }\n      //\n      // function convertText() {\n      //     let content = readFile(this.state.file);\n      //     const {html, css} = marpit.render(content);\n      //     this.setState({\n      //         result: `\n      //     <!DOCTYPE html>\n      //     <html><body>\n      //       <style>${css}</style>\n      //       ${html}\n      //     </body></html>\n      //     `\n      //     });\n      // }\n      // let promise = readFile(this.state.file);\n      // promise.then(convertText);\n      var reader = new FileReader();\n      reader.readAsText(this.state.file);\n\n      reader.onload = function (event) {\n        var filestring = event.target.result;\n        const {\n          html,\n          css\n        } = marpit.render(filestring);\n        console.log(\"File contents: \" + filestring);\n      };\n\n      reader.onerror = function (event) {\n        console.error(\"File could not be read! Code \" + event.target.error.code);\n      }; // function readFile (file, callback){\n      //     var reader = new FileReader();\n      //     reader.onloadend = callback;\n      //     reader.readAsDataURL(file);\n      // };\n      // await reader.readAsText(this.state.file);\n      // var p = readFile(this.state.file);\n      // const filestring = p.resolve;\n      // console.log(p);\n\n\n      const filestring = reader.result;\n      console.log(filestring);\n      const {\n        html,\n        css\n      } = marpit.render(filestring);\n      console.log(reader.readyState); //\n      // 4. Use output in your HTML\n\n      this.setState({\n        result: `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n      }); // fs.appendFile('newfile.html', htmlFile, function (err) {\n      //     if (err) throw err;\n      //     console.log('Saved!');\n      // });\n      // }\n    };\n\n    this.beforeUpload.bind = this.beforeUpload.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({\n      onChange: this.onChange,\n      beforeUpload: this.beforeUpload,\n      onPreview: this.onPreview\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \" Click to Upload\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.result));\n  }\n\n}\n\nexport default MyUpload;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/src/upload.js"],"names":["Upload","message","Button","Icon","React","Marpit","fs","require","props","name","action","headers","authorization","marpit","theme","themeSet","default","add","MyUpload","Component","constructor","state","file","result","beforeUpload","fileList","console","log","setState","onChange","info","status","success","error","onPreview","reader","FileReader","readAsText","onload","event","filestring","target","html","css","render","onerror","code","readyState","bind"],"mappings":"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","sourcesContent":["import { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit'\nconst fs = require('fs');\n// const fs = require('fs');\nconst props = {\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n\n\n};\n\nconst marpit = new Marpit()\n// 2. Add theme CSS\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `\nmarpit.themeSet.default = marpit.themeSet.add(theme)\n\n\nclass MyUpload extends React.Component{\n    constructor(props) {\n        super(props);\n        this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n    state = {\n        file:\"\",\n        result:\"\"\n    }\n\n    beforeUpload = (file,fileList) => {\n        console.log(\"FILEEE\",file);\n        this.setState({\n            file:file\n        });\n    }\n    onChange = (info) => {\n        // var docfile =\n        // console.log(\"file!!!:\",info.file)\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            // this.convertFile();\n            console.log(info.file.name);\n            message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n            console.log(info.file.name);\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    }\n\n    onPreview = (file) => {\n\n\n// 3. Render markdown\n\n        // console.log(this.set.file);\n        // const htmlfile = fs.readFileSync(this.state.file);\n        // var filestring = fs.readFileSync(this.state.file);\n        // function readFile(file) {\n        //     return new Promise((resolve, reject) => {\n        //         let content = '';\n        //         const reader = new FileReader();\n        //         reader.onloadend = function (e) {\n        //             content = e.target.result;\n        //             const result = content;\n        //             resolve(reader);\n        //         };\n        //         reader.onerror = function (e) {\n        //             reject(e);\n        //         };\n        //         reader.readAsText(file);\n        //     });\n        // }\n        //\n        // function convertText() {\n        //     let content = readFile(this.state.file);\n        //     const {html, css} = marpit.render(content);\n        //     this.setState({\n        //         result: `\n        //     <!DOCTYPE html>\n        //     <html><body>\n        //       <style>${css}</style>\n        //       ${html}\n        //     </body></html>\n        //     `\n        //     });\n        // }\n        // let promise = readFile(this.state.file);\n        // promise.then(convertText);\n        var reader = new FileReader();\n        reader.readAsText(this.state.file);\n        reader.onload = function(event) {\n            var filestring = event.target.result;\n            const { html, css } = marpit.render(filestring);\n            console.log(\"File contents: \" + filestring);\n        };\n\n        reader.onerror = function(event) {\n            console.error(\"File could not be read! Code \" + event.target.error.code);\n        };\n        // function readFile (file, callback){\n        //     var reader = new FileReader();\n        //     reader.onloadend = callback;\n        //     reader.readAsDataURL(file);\n        // };\n        // await reader.readAsText(this.state.file);\n\n\n\n        // var p = readFile(this.state.file);\n        // const filestring = p.resolve;\n        // console.log(p);\n\n\n        const filestring = reader.result;\n        console.log(filestring);\n        const { html, css } = marpit.render(filestring);\n        console.log(reader.readyState);\n//\n// 4. Use output in your HTML\n        this.setState({\n            result : `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n        });\n        // fs.appendFile('newfile.html', htmlFile, function (err) {\n        //     if (err) throw err;\n        //     console.log('Saved!');\n        // });\n        // }\n    }\n\n    render(){\n\n        return(\n            <div>\n                <Upload\n                    onChange={this.onChange}\n                    beforeUpload={this.beforeUpload}\n                    onPreview={this.onPreview}\n                    {...props}>\n\n                    <Button>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n\n                </Upload>\n                <div>\n                    {this.state.result}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MyUpload;"]},"metadata":{},"sourceType":"module"}