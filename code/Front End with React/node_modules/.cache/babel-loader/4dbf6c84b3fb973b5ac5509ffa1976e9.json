{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _markdownIt = _interopRequireDefault(require(\"markdown-it\"));\n\nvar _wrap_array = _interopRequireDefault(require(\"./helpers/wrap_array\"));\n\nvar _theme_set = _interopRequireDefault(require(\"./theme_set\"));\n\nvar _element = require(\"./element\");\n\nvar _apply = _interopRequireDefault(require(\"./markdown/directives/apply\"));\n\nvar _background_image = _interopRequireDefault(require(\"./markdown/background_image\"));\n\nvar _collect = _interopRequireDefault(require(\"./markdown/collect\"));\n\nvar _comment = _interopRequireDefault(require(\"./markdown/comment\"));\n\nvar _container = _interopRequireDefault(require(\"./markdown/container\"));\n\nvar _fragment = _interopRequireDefault(require(\"./markdown/fragment\"));\n\nvar _header_and_footer = _interopRequireDefault(require(\"./markdown/header_and_footer\"));\n\nvar _heading_divider = _interopRequireDefault(require(\"./markdown/heading_divider\"));\n\nvar _inline_svg = _interopRequireDefault(require(\"./markdown/inline_svg\"));\n\nvar _parse = _interopRequireDefault(require(\"./markdown/directives/parse\"));\n\nvar _image = _interopRequireDefault(require(\"./markdown/image\"));\n\nvar _slide = _interopRequireDefault(require(\"./markdown/slide\"));\n\nvar _slide_container = _interopRequireDefault(require(\"./markdown/slide_container\"));\n\nvar _assign = _interopRequireDefault(require(\"./markdown/style/assign\"));\n\nvar _parse2 = _interopRequireDefault(require(\"./markdown/style/parse\"));\n\nvar _sweep = _interopRequireDefault(require(\"./markdown/sweep\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n\n  return value;\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = privateMap.get(receiver);\n\n  if (!descriptor) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nvar defaultOptions = {\n  container: _element.marpitContainer,\n  headingDivider: false,\n  looseYAML: false,\n  markdown: undefined,\n  printable: true,\n  slideContainer: false,\n  inlineSVG: false\n};\n/**\n * Parse Marpit Markdown and render to the slide HTML/CSS.\n */\n\nvar Marpit =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a Marpit instance.\n   *\n   * @param {Object} [opts]\n   * @param {false|Element|Element[]}\n   *     [opts.container={@link module:element.marpitContainer}] Container\n   *     element(s) wrapping whole slide deck.\n   * @param {false|number|number[]} [opts.headingDivider=false] Start a new\n   *     slide page at before of headings. it would apply to headings whose\n   *     larger than or equal to the specified level if a number is given, or\n   *     ONLY specified levels if a number array.\n   * @param {boolean} [opts.looseYAML=false] Allow loose YAML parsing in\n   *     built-in directives, and custom directives defined in current instance.\n   * @param {MarkdownIt|string|Object|Array} [opts.markdown] An instance of\n   *     markdown-it or its constructor option(s) for wrapping. Marpit will\n   *     create its instance based on CommonMark when omitted.\n   * @param {boolean} [opts.printable=true] Make style printable to PDF.\n   * @param {false|Element|Element[]} [opts.slideContainer] Container element(s)\n   *     wrapping each slide sections.\n   * @param {boolean} [opts.inlineSVG=false] Wrap each sections by inline SVG.\n   *     _(Experimental)_\n   */\n  function Marpit() {\n    var _this = this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Marpit);\n\n    _markdown.set(this, {\n      writable: true,\n      value: undefined\n    });\n    /**\n     * The current options for this instance.\n     *\n     * This property is read-only and marked as immutable. You cannot change the\n     * value of options after creating instance.\n     *\n     * @member {Object} options\n     * @memberOf Marpit#\n     * @readonly\n     */\n\n\n    Object.defineProperty(this, 'options', {\n      enumerable: true,\n      value: Object.freeze(_objectSpread({}, defaultOptions, {}, opts))\n    });\n    /**\n     * Definitions of the custom directive.\n     *\n     * It has the assignable `global` and `local` object. They have consisted of\n     * the directive name as a key, and parser function as a value. The parser\n     * should return the validated object for updating meta of markdown-it\n     * token.\n     *\n     * @member {Object} customDirectives\n     * @memberOf Marpit#\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'customDirectives', {\n      value: Object.seal({\n        global: Object.create(null),\n        local: Object.create(null)\n      })\n    });\n    /**\n     * @type {ThemeSet}\n     */\n\n    this.themeSet = new _theme_set.default();\n    this.applyMarkdownItPlugins(function () {\n      // Use CommonMark based instance by default\n      if (!_this.options.markdown) return new _markdownIt.default('commonmark'); // Detect markdown-it features\n\n      if (typeof _this.options.markdown === 'object' && typeof _this.options.markdown.parse === 'function' && typeof _this.options.markdown.renderer === 'object') return _this.options.markdown; // Create instance with passed argument(s)\n\n      return _construct(_markdownIt.default, _toConsumableArray((0, _wrap_array.default)(_this.options.markdown)));\n    }());\n  }\n  /**\n   * @type {MarkdownIt}\n   */\n\n\n  _createClass(Marpit, [{\n    key: \"applyMarkdownItPlugins\",\n\n    /** @private */\n    value: function applyMarkdownItPlugins(md) {\n      this.markdown = md;\n      md.use(_comment.default).use(_parse2.default).use(_slide.default).use(_parse.default).use(_apply.default).use(_header_and_footer.default).use(_heading_divider.default).use(_slide_container.default).use(_container.default).use(_inline_svg.default).use(_image.default).use(_background_image.default).use(_sweep.default).use(_assign.default).use(_fragment.default).use(_collect.default);\n    }\n    /**\n     * @typedef {Object} Marpit~RenderResult\n     * @property {string|string[]} html Rendered HTML.\n     * @property {string} css Rendered CSS.\n     * @property {string[][]} comments Parsed HTML comments per slide pages,\n     *     excepted YAML for directives. It would be useful for presenter notes.\n     */\n\n    /**\n     * Render Markdown into HTML and CSS string.\n     *\n     * @param {string} markdown A Markdown string.\n     * @param {Object} [env={}] Environment object for passing to markdown-it.\n     * @param {boolean} [env.htmlAsArray=false] Output rendered HTML as array per\n     *     slide.\n     * @returns {Marpit~RenderResult} An object of rendering result.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(markdown) {\n      var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return {\n        html: this.renderMarkdown(markdown, env),\n        css: this.renderStyle(this.lastGlobalDirectives.theme),\n        comments: this.lastComments\n      };\n    }\n    /**\n     * Render Markdown by using `markdownIt#render`.\n     *\n     * This method is for internal. You can override this method if you have to\n     * render with customized way.\n     *\n     * @private\n     * @param {string} markdown A Markdown string.\n     * @param {Object} [env] Environment object for passing to markdown-it.\n     * @param {boolean} [env.htmlAsArray=false] Output rendered HTML as array per\n     *     slide.\n     * @returns {string|string[]} The result string(s) of rendering Markdown.\n     */\n\n  }, {\n    key: \"renderMarkdown\",\n    value: function renderMarkdown(markdown) {\n      var _this2 = this;\n\n      var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var tokens = this.markdown.parse(markdown, env);\n\n      if (env.htmlAsArray) {\n        return this.lastSlideTokens.map(function (slideTokens) {\n          return _this2.markdown.renderer.render(slideTokens, _this2.markdown.options, env);\n        });\n      }\n\n      return this.markdown.renderer.render(tokens, this.markdown.options, env);\n    }\n    /**\n     * Render style by using `themeSet#pack`.\n     *\n     * This method is for internal.\n     *\n     * @private\n     * @param {string|undefined} theme Theme name.\n     * @returns {string} The result string of rendering style.\n     */\n\n  }, {\n    key: \"renderStyle\",\n    value: function renderStyle(theme) {\n      return this.themeSet.pack(theme, this.themeSetPackOptions());\n    }\n    /** @private */\n\n  }, {\n    key: \"themeSetPackOptions\",\n    value: function themeSetPackOptions() {\n      return {\n        after: this.lastStyles ? this.lastStyles.join('\\n') : undefined,\n        containers: [].concat(_toConsumableArray((0, _wrap_array.default)(this.options.container)), _toConsumableArray((0, _wrap_array.default)(this.options.slideContainer))),\n        inlineSVG: this.options.inlineSVG,\n        printable: this.options.printable\n      };\n    }\n    /**\n     * Load the specified markdown-it plugin with given parameters.\n     *\n     * @param {Function} plugin markdown-it plugin.\n     * @param {...*} params Params to pass into plugin.\n     * @returns {Marpit} The called {@link Marpit} instance for chainable.\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(plugin) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      plugin.call.apply(plugin, [this.markdown, this.markdown].concat(params));\n      return this;\n    }\n  }, {\n    key: \"markdown\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _markdown);\n    },\n    set: function set(md) {\n      if (_classPrivateFieldGet(this, _markdown) && _classPrivateFieldGet(this, _markdown).marpit) delete _classPrivateFieldGet(this, _markdown).marpit;\n\n      _classPrivateFieldSet(this, _markdown, md);\n\n      if (md) {\n        Object.defineProperty(md, 'marpit', {\n          configurable: true,\n          value: this\n        });\n      }\n    }\n    /**\n     * The plugin interface of markdown-it for current Marpit instance.\n     *\n     * This is useful to integrate Marpit with the other markdown-it based parser.\n     *\n     * @deprecated A plugin interface for markdown-it is deprecated and will\n     *     remove in future version. Instead, wrap markdown-it instance when\n     *     creating Marpit by `new Marpit({ markdown: markdownItInstance })`.\n     * @type {Function}\n     * @readonly\n     */\n\n  }, {\n    key: \"markdownItPlugins\",\n    get: function get() {\n      console.warn('Deprecation warning: A plugin interface for markdown-it provided by `markdownItPlugins` is deprecated and will remove in next major version. Instead, wrap markdown-it instance when creating Marpit by `new Marpit({ markdown: markdownItInstance })`.');\n      return this.applyMarkdownItPlugins.bind(this);\n    }\n  }]);\n\n  return Marpit;\n}();\n\nvar _markdown = new WeakMap();\n\nvar _default = Marpit;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/marpit.js"],"names":["Object","defineProperty","exports","value","default","_markdownIt","_interopRequireDefault","require","_wrap_array","_theme_set","_element","_apply","_background_image","_collect","_comment","_container","_fragment","_header_and_footer","_heading_divider","_inline_svg","_parse","_image","_slide","_slide_container","_assign","_parse2","_sweep","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","_classPrivateFieldSet","receiver","privateMap","descriptor","get","TypeError","set","call","_classPrivateFieldGet","defaultOptions","container","marpitContainer","headingDivider","looseYAML","markdown","undefined","printable","slideContainer","inlineSVG","Marpit","opts","_markdown","freeze","seal","global","create","local","themeSet","applyMarkdownItPlugins","options","parse","renderer","md","use","env","html","renderMarkdown","css","renderStyle","lastGlobalDirectives","theme","comments","lastComments","tokens","htmlAsArray","lastSlideTokens","map","slideTokens","render","pack","themeSetPackOptions","after","lastStyles","join","containers","plugin","params","marpit","console","warn","bind","WeakMap","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _markdownIt = _interopRequireDefault(require(\"markdown-it\"));\n\nvar _wrap_array = _interopRequireDefault(require(\"./helpers/wrap_array\"));\n\nvar _theme_set = _interopRequireDefault(require(\"./theme_set\"));\n\nvar _element = require(\"./element\");\n\nvar _apply = _interopRequireDefault(require(\"./markdown/directives/apply\"));\n\nvar _background_image = _interopRequireDefault(require(\"./markdown/background_image\"));\n\nvar _collect = _interopRequireDefault(require(\"./markdown/collect\"));\n\nvar _comment = _interopRequireDefault(require(\"./markdown/comment\"));\n\nvar _container = _interopRequireDefault(require(\"./markdown/container\"));\n\nvar _fragment = _interopRequireDefault(require(\"./markdown/fragment\"));\n\nvar _header_and_footer = _interopRequireDefault(require(\"./markdown/header_and_footer\"));\n\nvar _heading_divider = _interopRequireDefault(require(\"./markdown/heading_divider\"));\n\nvar _inline_svg = _interopRequireDefault(require(\"./markdown/inline_svg\"));\n\nvar _parse = _interopRequireDefault(require(\"./markdown/directives/parse\"));\n\nvar _image = _interopRequireDefault(require(\"./markdown/image\"));\n\nvar _slide = _interopRequireDefault(require(\"./markdown/slide\"));\n\nvar _slide_container = _interopRequireDefault(require(\"./markdown/slide_container\"));\n\nvar _assign = _interopRequireDefault(require(\"./markdown/style/assign\"));\n\nvar _parse2 = _interopRequireDefault(require(\"./markdown/style/parse\"));\n\nvar _sweep = _interopRequireDefault(require(\"./markdown/sweep\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to set private field on non-instance\"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } return value; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError(\"attempted to get private field on non-instance\"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nconst defaultOptions = {\n  container: _element.marpitContainer,\n  headingDivider: false,\n  looseYAML: false,\n  markdown: undefined,\n  printable: true,\n  slideContainer: false,\n  inlineSVG: false\n};\n/**\n * Parse Marpit Markdown and render to the slide HTML/CSS.\n */\n\nclass Marpit {\n  /**\n   * Create a Marpit instance.\n   *\n   * @param {Object} [opts]\n   * @param {false|Element|Element[]}\n   *     [opts.container={@link module:element.marpitContainer}] Container\n   *     element(s) wrapping whole slide deck.\n   * @param {false|number|number[]} [opts.headingDivider=false] Start a new\n   *     slide page at before of headings. it would apply to headings whose\n   *     larger than or equal to the specified level if a number is given, or\n   *     ONLY specified levels if a number array.\n   * @param {boolean} [opts.looseYAML=false] Allow loose YAML parsing in\n   *     built-in directives, and custom directives defined in current instance.\n   * @param {MarkdownIt|string|Object|Array} [opts.markdown] An instance of\n   *     markdown-it or its constructor option(s) for wrapping. Marpit will\n   *     create its instance based on CommonMark when omitted.\n   * @param {boolean} [opts.printable=true] Make style printable to PDF.\n   * @param {false|Element|Element[]} [opts.slideContainer] Container element(s)\n   *     wrapping each slide sections.\n   * @param {boolean} [opts.inlineSVG=false] Wrap each sections by inline SVG.\n   *     _(Experimental)_\n   */\n  constructor(opts = {}) {\n    _markdown.set(this, {\n      writable: true,\n      value: undefined\n    });\n\n    /**\n     * The current options for this instance.\n     *\n     * This property is read-only and marked as immutable. You cannot change the\n     * value of options after creating instance.\n     *\n     * @member {Object} options\n     * @memberOf Marpit#\n     * @readonly\n     */\n    Object.defineProperty(this, 'options', {\n      enumerable: true,\n      value: Object.freeze(_objectSpread({}, defaultOptions, {}, opts))\n    });\n    /**\n     * Definitions of the custom directive.\n     *\n     * It has the assignable `global` and `local` object. They have consisted of\n     * the directive name as a key, and parser function as a value. The parser\n     * should return the validated object for updating meta of markdown-it\n     * token.\n     *\n     * @member {Object} customDirectives\n     * @memberOf Marpit#\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'customDirectives', {\n      value: Object.seal({\n        global: Object.create(null),\n        local: Object.create(null)\n      })\n    });\n    /**\n     * @type {ThemeSet}\n     */\n\n    this.themeSet = new _theme_set.default();\n    this.applyMarkdownItPlugins((() => {\n      // Use CommonMark based instance by default\n      if (!this.options.markdown) return new _markdownIt.default('commonmark'); // Detect markdown-it features\n\n      if (typeof this.options.markdown === 'object' && typeof this.options.markdown.parse === 'function' && typeof this.options.markdown.renderer === 'object') return this.options.markdown; // Create instance with passed argument(s)\n\n      return new _markdownIt.default(...(0, _wrap_array.default)(this.options.markdown));\n    })());\n  }\n  /**\n   * @type {MarkdownIt}\n   */\n\n\n  get markdown() {\n    return _classPrivateFieldGet(this, _markdown);\n  }\n\n  set markdown(md) {\n    if (_classPrivateFieldGet(this, _markdown) && _classPrivateFieldGet(this, _markdown).marpit) delete _classPrivateFieldGet(this, _markdown).marpit;\n\n    _classPrivateFieldSet(this, _markdown, md);\n\n    if (md) {\n      Object.defineProperty(md, 'marpit', {\n        configurable: true,\n        value: this\n      });\n    }\n  }\n  /**\n   * The plugin interface of markdown-it for current Marpit instance.\n   *\n   * This is useful to integrate Marpit with the other markdown-it based parser.\n   *\n   * @deprecated A plugin interface for markdown-it is deprecated and will\n   *     remove in future version. Instead, wrap markdown-it instance when\n   *     creating Marpit by `new Marpit({ markdown: markdownItInstance })`.\n   * @type {Function}\n   * @readonly\n   */\n\n\n  get markdownItPlugins() {\n    console.warn('Deprecation warning: A plugin interface for markdown-it provided by `markdownItPlugins` is deprecated and will remove in next major version. Instead, wrap markdown-it instance when creating Marpit by `new Marpit({ markdown: markdownItInstance })`.');\n    return this.applyMarkdownItPlugins.bind(this);\n  }\n  /** @private */\n\n\n  applyMarkdownItPlugins(md) {\n    this.markdown = md;\n    md.use(_comment.default).use(_parse2.default).use(_slide.default).use(_parse.default).use(_apply.default).use(_header_and_footer.default).use(_heading_divider.default).use(_slide_container.default).use(_container.default).use(_inline_svg.default).use(_image.default).use(_background_image.default).use(_sweep.default).use(_assign.default).use(_fragment.default).use(_collect.default);\n  }\n  /**\n   * @typedef {Object} Marpit~RenderResult\n   * @property {string|string[]} html Rendered HTML.\n   * @property {string} css Rendered CSS.\n   * @property {string[][]} comments Parsed HTML comments per slide pages,\n   *     excepted YAML for directives. It would be useful for presenter notes.\n   */\n\n  /**\n   * Render Markdown into HTML and CSS string.\n   *\n   * @param {string} markdown A Markdown string.\n   * @param {Object} [env={}] Environment object for passing to markdown-it.\n   * @param {boolean} [env.htmlAsArray=false] Output rendered HTML as array per\n   *     slide.\n   * @returns {Marpit~RenderResult} An object of rendering result.\n   */\n\n\n  render(markdown, env = {}) {\n    return {\n      html: this.renderMarkdown(markdown, env),\n      css: this.renderStyle(this.lastGlobalDirectives.theme),\n      comments: this.lastComments\n    };\n  }\n  /**\n   * Render Markdown by using `markdownIt#render`.\n   *\n   * This method is for internal. You can override this method if you have to\n   * render with customized way.\n   *\n   * @private\n   * @param {string} markdown A Markdown string.\n   * @param {Object} [env] Environment object for passing to markdown-it.\n   * @param {boolean} [env.htmlAsArray=false] Output rendered HTML as array per\n   *     slide.\n   * @returns {string|string[]} The result string(s) of rendering Markdown.\n   */\n\n\n  renderMarkdown(markdown, env = {}) {\n    const tokens = this.markdown.parse(markdown, env);\n\n    if (env.htmlAsArray) {\n      return this.lastSlideTokens.map(slideTokens => this.markdown.renderer.render(slideTokens, this.markdown.options, env));\n    }\n\n    return this.markdown.renderer.render(tokens, this.markdown.options, env);\n  }\n  /**\n   * Render style by using `themeSet#pack`.\n   *\n   * This method is for internal.\n   *\n   * @private\n   * @param {string|undefined} theme Theme name.\n   * @returns {string} The result string of rendering style.\n   */\n\n\n  renderStyle(theme) {\n    return this.themeSet.pack(theme, this.themeSetPackOptions());\n  }\n  /** @private */\n\n\n  themeSetPackOptions() {\n    return {\n      after: this.lastStyles ? this.lastStyles.join('\\n') : undefined,\n      containers: [...(0, _wrap_array.default)(this.options.container), ...(0, _wrap_array.default)(this.options.slideContainer)],\n      inlineSVG: this.options.inlineSVG,\n      printable: this.options.printable\n    };\n  }\n  /**\n   * Load the specified markdown-it plugin with given parameters.\n   *\n   * @param {Function} plugin markdown-it plugin.\n   * @param {...*} params Params to pass into plugin.\n   * @returns {Marpit} The called {@link Marpit} instance for chainable.\n   */\n\n\n  use(plugin, ...params) {\n    plugin.call(this.markdown, this.markdown, ...params);\n    return this;\n  }\n\n}\n\nvar _markdown = new WeakMap();\n\nvar _default = Marpit;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}