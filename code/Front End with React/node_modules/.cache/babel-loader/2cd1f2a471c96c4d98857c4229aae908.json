{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint consistent-return: 0 */\n\n/** @module */\n\n/**\n * @typedef {object} ImportMeta\n * @prop {AtRule} node The at-rule node parsed by PostCSS.\n * @prop {string} value The specified value.\n */\n\n/**\n * Marpit PostCSS import parse plugin.\n *\n * Parse `@import` and `@import-theme` rules that specify a plain string.\n *\n * The `@import` rule for Marpit theme follows CSS spec. It must precede all\n * other statements. (excepted `@charset`)\n *\n * When you are using CSS preprocessors like Sass, `@import` would resolve path\n * in compiling and would be lost definition. So you can use `@import-theme`\n * rule alternatively.\n *\n * A specification of `@import-theme` has a bit different from `@import`. You\n * can place `@import-theme` rule at any in the CSS root, and the content of\n * imported theme will always append to the beginning of CSS.\n *\n * @alias module:postcss/import/parse\n */\n\n\nvar plugin = _postcss.default.plugin('marpit-postcss-import-parse', function () {\n  return function (css, ret) {\n    var imports = {\n      import: [],\n      importTheme: []\n    };\n    var allowImport = true;\n    css.walk(function (node) {\n      if (node.type === 'atrule') {\n        var push = function push(target) {\n          var _node$params = _slicedToArray(node.params, 1),\n              quote = _node$params[0];\n\n          if (quote !== '\"' && quote !== \"'\") return;\n          var splitedValue = node.params.slice(1).split(quote);\n          var value = '';\n          splitedValue.every(function (v) {\n            if (v.endsWith('\\\\')) {\n              value = \"\".concat(value).concat(v.slice(0, -1)).concat(quote);\n              return true;\n            }\n\n            value = \"\".concat(value).concat(v);\n            return false;\n          });\n          node.marpitImportParse = value;\n          target.push({\n            node: node,\n            value: value\n          });\n        };\n\n        if (allowImport) {\n          if (node.name === 'import') {\n            push(imports.import);\n          } else if (node.name !== 'charset') {\n            allowImport = false;\n          }\n        }\n\n        if (node.name === 'import-theme' && node.parent.type === 'root') {\n          push(imports.importTheme);\n        }\n      } else if (node.type !== 'comment') {\n        allowImport = false;\n      }\n    });\n    ret.marpitImport = [].concat(_toConsumableArray(imports.importTheme), _toConsumableArray(imports.import));\n  };\n});\n\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/postcss/import/parse.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","obj","__esModule","plugin","css","ret","imports","import","importTheme","allowImport","walk","node","type","push","target","params","quote","splitedValue","slice","split","every","v","endsWith","marpitImportParse","name","parent","marpitImport","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint consistent-return: 0 */\n\n/** @module */\n\n/**\n * @typedef {object} ImportMeta\n * @prop {AtRule} node The at-rule node parsed by PostCSS.\n * @prop {string} value The specified value.\n */\n\n/**\n * Marpit PostCSS import parse plugin.\n *\n * Parse `@import` and `@import-theme` rules that specify a plain string.\n *\n * The `@import` rule for Marpit theme follows CSS spec. It must precede all\n * other statements. (excepted `@charset`)\n *\n * When you are using CSS preprocessors like Sass, `@import` would resolve path\n * in compiling and would be lost definition. So you can use `@import-theme`\n * rule alternatively.\n *\n * A specification of `@import-theme` has a bit different from `@import`. You\n * can place `@import-theme` rule at any in the CSS root, and the content of\n * imported theme will always append to the beginning of CSS.\n *\n * @alias module:postcss/import/parse\n */\nconst plugin = _postcss.default.plugin('marpit-postcss-import-parse', () => (css, ret) => {\n  const imports = {\n    import: [],\n    importTheme: []\n  };\n  let allowImport = true;\n  css.walk(node => {\n    if (node.type === 'atrule') {\n      const push = target => {\n        const [quote] = node.params;\n        if (quote !== '\"' && quote !== \"'\") return;\n        const splitedValue = node.params.slice(1).split(quote);\n        let value = '';\n        splitedValue.every(v => {\n          if (v.endsWith('\\\\')) {\n            value = `${value}${v.slice(0, -1)}${quote}`;\n            return true;\n          }\n\n          value = `${value}${v}`;\n          return false;\n        });\n        node.marpitImportParse = value;\n        target.push({\n          node,\n          value\n        });\n      };\n\n      if (allowImport) {\n        if (node.name === 'import') {\n          push(imports.import);\n        } else if (node.name !== 'charset') {\n          allowImport = false;\n        }\n      }\n\n      if (node.name === 'import-theme' && node.parent.type === 'root') {\n        push(imports.importTheme);\n      }\n    } else if (node.type !== 'comment') {\n      allowImport = false;\n    }\n  });\n  ret.marpitImport = [...imports.importTheme, ...imports.import];\n});\n\nvar _default = plugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}