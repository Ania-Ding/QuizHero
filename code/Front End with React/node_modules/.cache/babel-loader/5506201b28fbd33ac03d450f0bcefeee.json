{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nconst uniqKeyChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst uniqKeyCharsLength = uniqKeyChars.length;\n\nfunction generateUniqKey(length = 8) {\n  let ret = '';\n\n  for (let i = 0; i < length; i += 1) ret += uniqKeyChars[Math.floor(Math.random() * uniqKeyCharsLength)];\n\n  return ret;\n}\n\nconst injectScopePostCSSplugin = _postcss.default.plugin('marpit-style-assign-postcss-inject-scope', attr => css => css.walkRules(rule => {\n  rule.selectors = rule.selectors.map(selector => {\n    const injectSelector = /^section(?![\\w-])/.test(selector) ? selector.slice(7) : ` ${selector}`;\n    return `section[${attr}]${injectSelector}`;\n  });\n}));\n/**\n * Marpit style assign plugin.\n *\n * Assign style global directive and parsed styles to Marpit instance's\n * `lastStyles' property.\n *\n * @alias module:markdown/style/assign\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction assign(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.after('marpit_slide', 'marpit_style_assign', state => {\n    if (state.inlineMode) return;\n    const directives = marpit.lastGlobalDirectives || {};\n    marpit.lastStyles = directives.style ? [directives.style] : [];\n    let current;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        current = token;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        current = undefined;\n      } else if (token.type === 'marpit_style') {\n        let {\n          content\n        } = token; // Scoped style into current page\n\n        const {\n          marpitStyleScoped\n        } = token.meta || {};\n\n        if (current && marpitStyleScoped) {\n          let metaAttr = current.meta.marpitScopeMeta;\n\n          if (!metaAttr) {\n            metaAttr = `data-marpit-scope-${generateUniqKey()}`;\n            current.meta.marpitScopeMeta = metaAttr;\n            current.attrSet(metaAttr, '');\n          }\n\n          const processor = (0, _postcss.default)([injectScopePostCSSplugin(metaAttr)]);\n\n          try {\n            content = processor.process(content).css;\n          } catch (e) {\n            content = undefined;\n          }\n        }\n\n        if (content) marpit.lastStyles.push(content);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(assign);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/style/assign.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_plugin","obj","__esModule","uniqKeyChars","uniqKeyCharsLength","length","generateUniqKey","ret","i","Math","floor","random","injectScopePostCSSplugin","plugin","attr","css","walkRules","rule","selectors","map","selector","injectSelector","test","slice","assign","md","marpit","core","ruler","after","state","inlineMode","directives","lastGlobalDirectives","lastStyles","style","current","token","tokens","meta","marpitSlideElement","undefined","type","content","marpitStyleScoped","metaAttr","marpitScopeMeta","attrSet","processor","process","e","push","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst uniqKeyChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst uniqKeyCharsLength = uniqKeyChars.length;\n\nfunction generateUniqKey(length = 8) {\n  let ret = '';\n\n  for (let i = 0; i < length; i += 1) ret += uniqKeyChars[Math.floor(Math.random() * uniqKeyCharsLength)];\n\n  return ret;\n}\n\nconst injectScopePostCSSplugin = _postcss.default.plugin('marpit-style-assign-postcss-inject-scope', attr => css => css.walkRules(rule => {\n  rule.selectors = rule.selectors.map(selector => {\n    const injectSelector = /^section(?![\\w-])/.test(selector) ? selector.slice(7) : ` ${selector}`;\n    return `section[${attr}]${injectSelector}`;\n  });\n}));\n/**\n * Marpit style assign plugin.\n *\n * Assign style global directive and parsed styles to Marpit instance's\n * `lastStyles' property.\n *\n * @alias module:markdown/style/assign\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction assign(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.after('marpit_slide', 'marpit_style_assign', state => {\n    if (state.inlineMode) return;\n    const directives = marpit.lastGlobalDirectives || {};\n    marpit.lastStyles = directives.style ? [directives.style] : [];\n    let current;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        current = token;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        current = undefined;\n      } else if (token.type === 'marpit_style') {\n        let {\n          content\n        } = token; // Scoped style into current page\n\n        const {\n          marpitStyleScoped\n        } = token.meta || {};\n\n        if (current && marpitStyleScoped) {\n          let metaAttr = current.meta.marpitScopeMeta;\n\n          if (!metaAttr) {\n            metaAttr = `data-marpit-scope-${generateUniqKey()}`;\n            current.meta.marpitScopeMeta = metaAttr;\n            current.attrSet(metaAttr, '');\n          }\n\n          const processor = (0, _postcss.default)([injectScopePostCSSplugin(metaAttr)]);\n\n          try {\n            content = processor.process(content).css;\n          } catch (e) {\n            content = undefined;\n          }\n        }\n\n        if (content) marpit.lastStyles.push(content);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(assign);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}