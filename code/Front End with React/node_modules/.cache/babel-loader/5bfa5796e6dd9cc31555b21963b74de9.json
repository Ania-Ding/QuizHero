{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.locals = exports.globals = void 0;\n/**\n * The definition of Marpit directives\n * @module\n */\n\n/**\n * @typedef {Function} Directive\n * @param {string} value Parsed value.\n * @param {Marpit} marpit Marpit instance.\n * @returns {Object} Assigning object to token meta.\n */\n\n/**\n * Global directives.\n *\n * Each global directive assigns to the whole slide deck. If you wrote a same\n * directive many times, Marpit only recognizes the last value.\n *\n * @prop {Directive} headingDivider Specify heading divider option.\n * @prop {Directive} style Specify the CSS style to apply additionally.\n * @prop {Directive} theme Specify theme of the slide deck.\n */\n\nconst globals = Object.assign(Object.create(null), {\n  headingDivider: value => {\n    const headings = [1, 2, 3, 4, 5, 6];\n\n    const toInt = v => Array.isArray(v) || Number.isNaN(v) ? v : Number.parseInt(v, 10);\n\n    const converted = toInt(value);\n\n    if (Array.isArray(converted)) {\n      const convertedArr = converted.map(toInt);\n      return {\n        headingDivider: headings.filter(v => convertedArr.includes(v))\n      };\n    }\n\n    if (value === 'false') return {\n      headingDivider: false\n    };\n    if (headings.includes(converted)) return {\n      headingDivider: converted\n    };\n    return {};\n  },\n  style: v => ({\n    style: v\n  }),\n  theme: (v, marpit) => marpit.themeSet.has(v) ? {\n    theme: v\n  } : {}\n});\n/**\n * Local directives.\n *\n * Mainly these are used to change settings each slide page. By default, a\n * local directive applies to the defined page and followed pages.\n *\n * If you want to set a local directive to single page only, you can add the\n * prefix `_` (underbar) to directive name. (Spot directives)\n *\n * @prop {Directive} backgroundColor Specify background-color style.\n * @prop {Directive} backgroundImage Specify background-image style.\n * @prop {Directive} backgroundPosition Specify background-position style. The\n *     default value while setting backgroundImage is `center`.\n * @prop {Directive} backgroundRepeat Specify background-repeat style. The\n *     default value while setting backgroundImage is `no-repeat`.\n * @prop {Directive} backgroundSize Specify background-size style. The default\n *     value while setting backgroundImage is `cover`.\n * @prop {Directive} class Specify HTML class of section element(s).\n * @prop {Directive} color Specify color style (base text color).\n * @prop {Directive} footer Specify the content of slide footer. It will insert\n *     a `<footer>` element to the last of each slide contents.\n * @prop {Directive} header Specify the content of slide header. It will insert\n *     a `<header>` element to the first of each slide contents.\n * @prop {Directive} paginate Show page number on the slide if you set `true`.\n */\n\nexports.globals = globals;\nconst locals = Object.assign(Object.create(null), {\n  backgroundColor: v => ({\n    backgroundColor: v\n  }),\n  backgroundImage: v => ({\n    backgroundImage: v\n  }),\n  backgroundPosition: v => ({\n    backgroundPosition: v\n  }),\n  backgroundRepeat: v => ({\n    backgroundRepeat: v\n  }),\n  backgroundSize: v => ({\n    backgroundSize: v\n  }),\n  class: v => ({\n    class: Array.isArray(v) ? v.join(' ') : v\n  }),\n  color: v => ({\n    color: v\n  }),\n  footer: v => typeof v === 'string' ? {\n    footer: v\n  } : {},\n  header: v => typeof v === 'string' ? {\n    header: v\n  } : {},\n  paginate: v => ({\n    paginate: (v || '').toLowerCase() === 'true'\n  })\n});\nexports.locals = locals;\nvar _default = [...Object.keys(globals), ...Object.keys(locals)];\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/directives/directives.js"],"names":["Object","defineProperty","exports","value","default","locals","globals","assign","create","headingDivider","headings","toInt","v","Array","isArray","Number","isNaN","parseInt","converted","convertedArr","map","filter","includes","style","theme","marpit","themeSet","has","backgroundColor","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","class","join","color","footer","header","paginate","toLowerCase","_default","keys"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.locals = exports.globals = void 0;\n\n/**\n * The definition of Marpit directives\n * @module\n */\n\n/**\n * @typedef {Function} Directive\n * @param {string} value Parsed value.\n * @param {Marpit} marpit Marpit instance.\n * @returns {Object} Assigning object to token meta.\n */\n\n/**\n * Global directives.\n *\n * Each global directive assigns to the whole slide deck. If you wrote a same\n * directive many times, Marpit only recognizes the last value.\n *\n * @prop {Directive} headingDivider Specify heading divider option.\n * @prop {Directive} style Specify the CSS style to apply additionally.\n * @prop {Directive} theme Specify theme of the slide deck.\n */\nconst globals = Object.assign(Object.create(null), {\n  headingDivider: value => {\n    const headings = [1, 2, 3, 4, 5, 6];\n\n    const toInt = v => Array.isArray(v) || Number.isNaN(v) ? v : Number.parseInt(v, 10);\n\n    const converted = toInt(value);\n\n    if (Array.isArray(converted)) {\n      const convertedArr = converted.map(toInt);\n      return {\n        headingDivider: headings.filter(v => convertedArr.includes(v))\n      };\n    }\n\n    if (value === 'false') return {\n      headingDivider: false\n    };\n    if (headings.includes(converted)) return {\n      headingDivider: converted\n    };\n    return {};\n  },\n  style: v => ({\n    style: v\n  }),\n  theme: (v, marpit) => marpit.themeSet.has(v) ? {\n    theme: v\n  } : {}\n});\n/**\n * Local directives.\n *\n * Mainly these are used to change settings each slide page. By default, a\n * local directive applies to the defined page and followed pages.\n *\n * If you want to set a local directive to single page only, you can add the\n * prefix `_` (underbar) to directive name. (Spot directives)\n *\n * @prop {Directive} backgroundColor Specify background-color style.\n * @prop {Directive} backgroundImage Specify background-image style.\n * @prop {Directive} backgroundPosition Specify background-position style. The\n *     default value while setting backgroundImage is `center`.\n * @prop {Directive} backgroundRepeat Specify background-repeat style. The\n *     default value while setting backgroundImage is `no-repeat`.\n * @prop {Directive} backgroundSize Specify background-size style. The default\n *     value while setting backgroundImage is `cover`.\n * @prop {Directive} class Specify HTML class of section element(s).\n * @prop {Directive} color Specify color style (base text color).\n * @prop {Directive} footer Specify the content of slide footer. It will insert\n *     a `<footer>` element to the last of each slide contents.\n * @prop {Directive} header Specify the content of slide header. It will insert\n *     a `<header>` element to the first of each slide contents.\n * @prop {Directive} paginate Show page number on the slide if you set `true`.\n */\n\nexports.globals = globals;\nconst locals = Object.assign(Object.create(null), {\n  backgroundColor: v => ({\n    backgroundColor: v\n  }),\n  backgroundImage: v => ({\n    backgroundImage: v\n  }),\n  backgroundPosition: v => ({\n    backgroundPosition: v\n  }),\n  backgroundRepeat: v => ({\n    backgroundRepeat: v\n  }),\n  backgroundSize: v => ({\n    backgroundSize: v\n  }),\n  class: v => ({\n    class: Array.isArray(v) ? v.join(' ') : v\n  }),\n  color: v => ({\n    color: v\n  }),\n  footer: v => typeof v === 'string' ? {\n    footer: v\n  } : {},\n  header: v => typeof v === 'string' ? {\n    header: v\n  } : {},\n  paginate: v => ({\n    paginate: (v || '').toLowerCase() === 'true'\n  })\n});\nexports.locals = locals;\nvar _default = [...Object.keys(globals), ...Object.keys(locals)];\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}