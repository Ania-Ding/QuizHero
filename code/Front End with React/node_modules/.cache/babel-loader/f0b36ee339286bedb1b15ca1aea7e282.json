{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n/**\n * Marpit PostCSS import replace plugin.\n *\n * Replace parsed `@import` / `@import-theme` rules.\n *\n * Please see {@link module:postcss/import/parse} about the specification of\n * each syntax.\n *\n * @alias module:postcss/import/replace\n * @param {ThemeSet} themeSet ThemeSet instance.\n */\n\n\nconst plugin = _postcss.default.plugin('marpit-postcss-import-replace', (themeSet, importedThemes = []) => (0, _postcss.default)([_parse.default, css => {\n  const prepends = [];\n  css.walk(node => {\n    const name = node.marpitImportParse;\n\n    if (name) {\n      const theme = themeSet.get(name);\n\n      if (theme) {\n        if (importedThemes.includes(name)) throw new Error(`Circular \"${name}\" theme import is detected.`);\n        const processed = (0, _postcss.default)([plugin(themeSet, [...importedThemes, name])]).process(theme.css);\n\n        if (node.name === 'import') {\n          node.replaceWith(processed.root);\n        } else {\n          node.remove();\n          prepends.unshift(processed.root);\n        }\n      }\n    }\n  });\n\n  for (const root of prepends) css.first.before(root);\n}]));\n\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/postcss/import/replace.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_parse","obj","__esModule","plugin","themeSet","importedThemes","css","prepends","walk","node","name","marpitImportParse","theme","get","includes","Error","processed","process","replaceWith","root","remove","unshift","first","before","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAIC,MAAM,GAAGF,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;AAE/F;;AAEA;;;;;;;;;;;;;AAWA,MAAME,MAAM,GAAGN,QAAQ,CAACD,OAAT,CAAiBO,MAAjB,CAAwB,+BAAxB,EAAyD,CAACC,QAAD,EAAWC,cAAc,GAAG,EAA5B,KAAmC,CAAC,GAAGR,QAAQ,CAACD,OAAb,EAAsB,CAACI,MAAM,CAACJ,OAAR,EAAiBU,GAAG,IAAI;AACvJ,QAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAASC,IAAI,IAAI;AACf,UAAMC,IAAI,GAAGD,IAAI,CAACE,iBAAlB;;AAEA,QAAID,IAAJ,EAAU;AACR,YAAME,KAAK,GAAGR,QAAQ,CAACS,GAAT,CAAaH,IAAb,CAAd;;AAEA,UAAIE,KAAJ,EAAW;AACT,YAAIP,cAAc,CAACS,QAAf,CAAwBJ,IAAxB,CAAJ,EAAmC,MAAM,IAAIK,KAAJ,CAAW,aAAYL,IAAK,6BAA5B,CAAN;AACnC,cAAMM,SAAS,GAAG,CAAC,GAAGnB,QAAQ,CAACD,OAAb,EAAsB,CAACO,MAAM,CAACC,QAAD,EAAW,CAAC,GAAGC,cAAJ,EAAoBK,IAApB,CAAX,CAAP,CAAtB,EAAqEO,OAArE,CAA6EL,KAAK,CAACN,GAAnF,CAAlB;;AAEA,YAAIG,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AAC1BD,UAAAA,IAAI,CAACS,WAAL,CAAiBF,SAAS,CAACG,IAA3B;AACD,SAFD,MAEO;AACLV,UAAAA,IAAI,CAACW,MAAL;AACAb,UAAAA,QAAQ,CAACc,OAAT,CAAiBL,SAAS,CAACG,IAA3B;AACD;AACF;AACF;AACF,GAlBD;;AAoBA,OAAK,MAAMA,IAAX,IAAmBZ,QAAnB,EAA6BD,GAAG,CAACgB,KAAJ,CAAUC,MAAV,CAAiBJ,IAAjB;AAC9B,CAvBgI,CAAtB,CAA5F,CAAf;;AAyBA,IAAIK,QAAQ,GAAGrB,MAAf;AACAT,OAAO,CAACE,OAAR,GAAkB4B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\n\n/**\n * Marpit PostCSS import replace plugin.\n *\n * Replace parsed `@import` / `@import-theme` rules.\n *\n * Please see {@link module:postcss/import/parse} about the specification of\n * each syntax.\n *\n * @alias module:postcss/import/replace\n * @param {ThemeSet} themeSet ThemeSet instance.\n */\nconst plugin = _postcss.default.plugin('marpit-postcss-import-replace', (themeSet, importedThemes = []) => (0, _postcss.default)([_parse.default, css => {\n  const prepends = [];\n  css.walk(node => {\n    const name = node.marpitImportParse;\n\n    if (name) {\n      const theme = themeSet.get(name);\n\n      if (theme) {\n        if (importedThemes.includes(name)) throw new Error(`Circular \"${name}\" theme import is detected.`);\n        const processed = (0, _postcss.default)([plugin(themeSet, [...importedThemes, name])]).process(theme.css);\n\n        if (node.name === 'import') {\n          node.replaceWith(processed.root);\n        } else {\n          node.remove();\n          prepends.unshift(processed.root);\n        }\n      }\n    }\n  });\n\n  for (const root of prepends) css.first.before(root);\n}]));\n\nvar _default = plugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}