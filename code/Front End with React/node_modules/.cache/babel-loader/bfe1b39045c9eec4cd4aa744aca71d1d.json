{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/** @module */\n\n/**\n * Create Marpit plugin.\n *\n * Generate Marpit plugin from passed markdown-it plugin. Marpit plugin needs\n * markdown-it instance with `marpit` member.\n *\n * @alias module:plugin\n * @param {Function} plugin Base plugin for markdown-it.\n * @returns {Function} Generated Marpit plugin.\n */\n\nfunction marpitPlugin(plugin) {\n  // eslint-disable-next-line func-names\n  return function (md, ...args) {\n    if (md.marpit) return plugin.call(this, md, ...args);\n    throw new Error('Marpit plugin has detected incompatible markdown-it instance.');\n  };\n}\n\nvar _default = marpitPlugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/plugin.js"],"names":["Object","defineProperty","exports","value","default","marpitPlugin","plugin","md","args","marpit","call","Error","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;AAEA;;;;;;;;;;;AAUA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B;AACA,SAAO,UAAUC,EAAV,EAAc,GAAGC,IAAjB,EAAuB;AAC5B,QAAID,EAAE,CAACE,MAAP,EAAe,OAAOH,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkBH,EAAlB,EAAsB,GAAGC,IAAzB,CAAP;AACf,UAAM,IAAIG,KAAJ,CAAU,+DAAV,CAAN;AACD,GAHD;AAID;;AAED,IAAIC,QAAQ,GAAGP,YAAf;AACAH,OAAO,CAACE,OAAR,GAAkBQ,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** @module */\n\n/**\n * Create Marpit plugin.\n *\n * Generate Marpit plugin from passed markdown-it plugin. Marpit plugin needs\n * markdown-it instance with `marpit` member.\n *\n * @alias module:plugin\n * @param {Function} plugin Base plugin for markdown-it.\n * @returns {Function} Generated Marpit plugin.\n */\nfunction marpitPlugin(plugin) {\n  // eslint-disable-next-line func-names\n  return function (md, ...args) {\n    if (md.marpit) return plugin.call(this, md, ...args);\n    throw new Error('Marpit plugin has detected incompatible markdown-it instance.');\n  };\n}\n\nvar _default = marpitPlugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}