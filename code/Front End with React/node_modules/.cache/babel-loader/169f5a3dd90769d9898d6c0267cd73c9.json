{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/** @module */\n\n/**\n * Split array into multiple arrays by specified condition.\n *\n * @alias module:helpers/split\n * @param {Array} arr Target array.\n * @param {splitCallback} func Callback to split array.\n * @param {boolean} [keepSplitedValue=false] Keep splited value. The split\n *     point is before the matched value.\n * @returns {Array[]} Splited array.\n */\n\nfunction split(arr, func, keepSplitedValue = false) {\n  const ret = [[]];\n\n  for (const value of arr) {\n    /**\n     * Return true at the split point.\n     *\n     * @callback splitCallback\n     * @param {*} value\n     */\n    if (func(value)) {\n      ret.push(keepSplitedValue ? [value] : []);\n    } else {\n      ret[ret.length - 1].push(value);\n    }\n  }\n\n  return ret;\n}\n\nvar _default = split;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/helpers/split.js"],"names":["Object","defineProperty","exports","value","default","split","arr","func","keepSplitedValue","ret","push","length","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;AAEA;;;;;;;;;;;AAUA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,IAApB,EAA0BC,gBAAgB,GAAG,KAA7C,EAAoD;AAClD,QAAMC,GAAG,GAAG,CAAC,EAAD,CAAZ;;AAEA,OAAK,MAAMN,KAAX,IAAoBG,GAApB,EAAyB;AACvB;;;;;;AAMA,QAAIC,IAAI,CAACJ,KAAD,CAAR,EAAiB;AACfM,MAAAA,GAAG,CAACC,IAAJ,CAASF,gBAAgB,GAAG,CAACL,KAAD,CAAH,GAAa,EAAtC;AACD,KAFD,MAEO;AACLM,MAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,CAAoBD,IAApB,CAAyBP,KAAzB;AACD;AACF;;AAED,SAAOM,GAAP;AACD;;AAED,IAAIG,QAAQ,GAAGP,KAAf;AACAH,OAAO,CAACE,OAAR,GAAkBQ,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** @module */\n\n/**\n * Split array into multiple arrays by specified condition.\n *\n * @alias module:helpers/split\n * @param {Array} arr Target array.\n * @param {splitCallback} func Callback to split array.\n * @param {boolean} [keepSplitedValue=false] Keep splited value. The split\n *     point is before the matched value.\n * @returns {Array[]} Splited array.\n */\nfunction split(arr, func, keepSplitedValue = false) {\n  const ret = [[]];\n\n  for (const value of arr) {\n    /**\n     * Return true at the split point.\n     *\n     * @callback splitCallback\n     * @param {*} value\n     */\n    if (func(value)) {\n      ret.push(keepSplitedValue ? [value] : []);\n    } else {\n      ret[ret.length - 1].push(value);\n    }\n  }\n\n  return ret;\n}\n\nvar _default = split;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}