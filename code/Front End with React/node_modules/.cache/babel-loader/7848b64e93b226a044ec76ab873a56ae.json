{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Marpit background image apply plugin.\n *\n * Apply parsed meta for background image / color into directives of each page.\n *\n * When inline SVG is enabled, it will reshape meta for advanced process instead\n * of converting to directives.\n *\n * @alias module:markdown/background_image/apply\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction backgroundImageApply(md) {\n  md.core.ruler.after('marpit_inline_svg', 'marpit_apply_background_image', function (_ref) {\n    var inlineMode = _ref.inlineMode,\n        tokens = _ref.tokens;\n    if (inlineMode) return;\n    var current = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var tb = _step.value;\n        if (tb.type === 'marpit_slide_open') current.open = tb;\n        if (tb.type === 'marpit_inline_svg_content_open') current.svgContent = tb;\n\n        if (tb.type === 'marpit_slide_close') {\n          if (current.images && current.images.length > 0) {\n            if (current.svgContent) {\n              // Reshape meta for advanced background\n              current.svgContent.meta = _objectSpread({}, current.svgContent.meta || {}, {\n                marpitBackground: {\n                  direction: current.direction,\n                  height: current.svgContent.attrGet('height'),\n                  images: current.images,\n                  open: current.open,\n                  split: current.split,\n                  splitSize: current.splitSize,\n                  width: current.svgContent.attrGet('width')\n                }\n              });\n            } else {\n              // Apply simple CSS background\n              var img = current.images[current.images.length - 1];\n              current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n                backgroundImage: \"url(\\\"\".concat(img.url, \"\\\")\")\n              });\n              if (img.size) current.open.meta.marpitDirectives.backgroundSize = img.size;\n            }\n          }\n\n          current = {};\n        } // Collect parsed inline image meta\n\n\n        if (current.open && tb.type === 'inline') {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = tb.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var t = _step2.value;\n\n              if (t.type === 'image') {\n                (function () {\n                  var _t$meta$marpitImage = t.meta.marpitImage,\n                      background = _t$meta$marpitImage.background,\n                      backgroundDirection = _t$meta$marpitImage.backgroundDirection,\n                      backgroundSize = _t$meta$marpitImage.backgroundSize,\n                      backgroundSplit = _t$meta$marpitImage.backgroundSplit,\n                      backgroundSplitSize = _t$meta$marpitImage.backgroundSplitSize,\n                      color = _t$meta$marpitImage.color,\n                      filter = _t$meta$marpitImage.filter,\n                      height = _t$meta$marpitImage.height,\n                      size = _t$meta$marpitImage.size,\n                      url = _t$meta$marpitImage.url,\n                      width = _t$meta$marpitImage.width;\n\n                  if (background && !url.match(/^\\s*$/)) {\n                    if (color) {\n                      // Background color\n                      current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n                        backgroundColor: color\n                      });\n                    } else {\n                      // Background image\n                      current.images = [].concat(_toConsumableArray(current.images || []), [{\n                        filter: filter,\n                        height: height,\n                        size: function () {\n                          var s = size || backgroundSize || undefined;\n                          return !['contain', 'cover'].includes(s) && (width || height) ? \"\".concat(width || s || 'auto', \" \").concat(height || s || 'auto') : s;\n                        }(),\n                        url: url,\n                        width: width\n                      }]);\n                    }\n                  }\n\n                  if (backgroundDirection) current.direction = backgroundDirection;\n                  if (backgroundSplit) current.split = backgroundSplit;\n                  if (backgroundSplitSize) current.splitSize = backgroundSplitSize;\n                })();\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageApply);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/background_image/apply.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","backgroundImageApply","md","core","ruler","after","inlineMode","tokens","current","tb","type","open","svgContent","images","meta","marpitBackground","direction","height","attrGet","split","splitSize","width","img","marpitDirectives","backgroundImage","url","size","backgroundSize","children","t","marpitImage","background","backgroundDirection","backgroundSplit","backgroundSplitSize","color","match","backgroundColor","s","undefined","includes","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGb,MAAM,CAACa,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIX,MAAM,CAACc,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGf,MAAM,CAACc,qBAAP,CAA6BH,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBG,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOjB,MAAM,CAACkB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAErV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEd,MAAAA,OAAO,CAACV,MAAM,CAAC2B,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAEC,QAAAA,eAAe,CAACP,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAI7B,MAAM,CAAC+B,yBAAX,EAAsC;AAAE/B,MAAAA,MAAM,CAACgC,gBAAP,CAAwBT,MAAxB,EAAgCvB,MAAM,CAAC+B,yBAAP,CAAiCJ,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEjB,MAAAA,OAAO,CAACV,MAAM,CAAC2B,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAE7B,QAAAA,MAAM,CAACC,cAAP,CAAsBsB,MAAtB,EAA8BM,GAA9B,EAAmC7B,MAAM,CAACkB,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB;;AAEthB,SAASO,eAAT,CAAyBtB,GAAzB,EAA8BqB,GAA9B,EAAmC1B,KAAnC,EAA0C;AAAE,MAAI0B,GAAG,IAAIrB,GAAX,EAAgB;AAAER,IAAAA,MAAM,CAACC,cAAP,CAAsBO,GAAtB,EAA2BqB,GAA3B,EAAgC;AAAE1B,MAAAA,KAAK,EAAEA,KAAT;AAAgBgB,MAAAA,UAAU,EAAE,IAA5B;AAAkCc,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAE1B,IAAAA,GAAG,CAACqB,GAAD,CAAH,GAAW1B,KAAX;AAAmB;;AAAC,SAAOK,GAAP;AAAa;AAEjN;;;;;;;;;;;;;AAWA,SAAS2B,oBAAT,CAA8BC,EAA9B,EAAkC;AAChCA,EAAAA,EAAE,CAACC,IAAH,CAAQC,KAAR,CAAcC,KAAd,CAAoB,mBAApB,EAAyC,+BAAzC,EAA0E,gBAGpE;AAAA,QAFJC,UAEI,QAFJA,UAEI;AAAA,QADJC,MACI,QADJA,MACI;AACJ,QAAID,UAAJ,EAAgB;AAChB,QAAIE,OAAO,GAAG,EAAd;AAFI;AAAA;AAAA;;AAAA;AAIJ,2BAAiBD,MAAjB,8HAAyB;AAAA,YAAdE,EAAc;AACvB,YAAIA,EAAE,CAACC,IAAH,KAAY,mBAAhB,EAAqCF,OAAO,CAACG,IAAR,GAAeF,EAAf;AACrC,YAAIA,EAAE,CAACC,IAAH,KAAY,gCAAhB,EAAkDF,OAAO,CAACI,UAAR,GAAqBH,EAArB;;AAElD,YAAIA,EAAE,CAACC,IAAH,KAAY,oBAAhB,EAAsC;AACpC,cAAIF,OAAO,CAACK,MAAR,IAAkBL,OAAO,CAACK,MAAR,CAAerB,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,gBAAIgB,OAAO,CAACI,UAAZ,EAAwB;AACtB;AACAJ,cAAAA,OAAO,CAACI,UAAR,CAAmBE,IAAnB,GAA0B1B,aAAa,CAAC,EAAD,EAAKoB,OAAO,CAACI,UAAR,CAAmBE,IAAnB,IAA2B,EAAhC,EAAoC;AACzEC,gBAAAA,gBAAgB,EAAE;AAChBC,kBAAAA,SAAS,EAAER,OAAO,CAACQ,SADH;AAEhBC,kBAAAA,MAAM,EAAET,OAAO,CAACI,UAAR,CAAmBM,OAAnB,CAA2B,QAA3B,CAFQ;AAGhBL,kBAAAA,MAAM,EAAEL,OAAO,CAACK,MAHA;AAIhBF,kBAAAA,IAAI,EAAEH,OAAO,CAACG,IAJE;AAKhBQ,kBAAAA,KAAK,EAAEX,OAAO,CAACW,KALC;AAMhBC,kBAAAA,SAAS,EAAEZ,OAAO,CAACY,SANH;AAOhBC,kBAAAA,KAAK,EAAEb,OAAO,CAACI,UAAR,CAAmBM,OAAnB,CAA2B,OAA3B;AAPS;AADuD,eAApC,CAAvC;AAWD,aAbD,MAaO;AACL;AACA,kBAAMI,GAAG,GAAGd,OAAO,CAACK,MAAR,CAAeL,OAAO,CAACK,MAAR,CAAerB,MAAf,GAAwB,CAAvC,CAAZ;AACAgB,cAAAA,OAAO,CAACG,IAAR,CAAaG,IAAb,CAAkBS,gBAAlB,GAAqCnC,aAAa,CAAC,EAAD,EAAKoB,OAAO,CAACG,IAAR,CAAaG,IAAb,CAAkBS,gBAAlB,IAAsC,EAA3C,EAA+C;AAC/FC,gBAAAA,eAAe,kBAAUF,GAAG,CAACG,GAAd;AADgF,eAA/C,CAAlD;AAGA,kBAAIH,GAAG,CAACI,IAAR,EAAclB,OAAO,CAACG,IAAR,CAAaG,IAAb,CAAkBS,gBAAlB,CAAmCI,cAAnC,GAAoDL,GAAG,CAACI,IAAxD;AACf;AACF;;AAEDlB,UAAAA,OAAO,GAAG,EAAV;AACD,SA9BsB,CA8BrB;;;AAGF,YAAIA,OAAO,CAACG,IAAR,IAAgBF,EAAE,CAACC,IAAH,KAAY,QAAhC;AAAA;AAAA;AAAA;;AAAA;AAA0C,kCAAgBD,EAAE,CAACmB,QAAnB,mIAA6B;AAAA,kBAAlBC,CAAkB;;AACrE,kBAAIA,CAAC,CAACnB,IAAF,KAAW,OAAf,EAAwB;AAAA;AAAA,4CAalBmB,CAAC,CAACf,IAAF,CAAOgB,WAbW;AAAA,sBAEpBC,UAFoB,uBAEpBA,UAFoB;AAAA,sBAGpBC,mBAHoB,uBAGpBA,mBAHoB;AAAA,sBAIpBL,cAJoB,uBAIpBA,cAJoB;AAAA,sBAKpBM,eALoB,uBAKpBA,eALoB;AAAA,sBAMpBC,mBANoB,uBAMpBA,mBANoB;AAAA,sBAOpBC,KAPoB,uBAOpBA,KAPoB;AAAA,sBAQpBrD,MARoB,uBAQpBA,MARoB;AAAA,sBASpBmC,MAToB,uBASpBA,MAToB;AAAA,sBAUpBS,IAVoB,uBAUpBA,IAVoB;AAAA,sBAWpBD,GAXoB,uBAWpBA,GAXoB;AAAA,sBAYpBJ,KAZoB,uBAYpBA,KAZoB;;AAetB,sBAAIU,UAAU,IAAI,CAACN,GAAG,CAACW,KAAJ,CAAU,OAAV,CAAnB,EAAuC;AACrC,wBAAID,KAAJ,EAAW;AACT;AACA3B,sBAAAA,OAAO,CAACG,IAAR,CAAaG,IAAb,CAAkBS,gBAAlB,GAAqCnC,aAAa,CAAC,EAAD,EAAKoB,OAAO,CAACG,IAAR,CAAaG,IAAb,CAAkBS,gBAAlB,IAAsC,EAA3C,EAA+C;AAC/Fc,wBAAAA,eAAe,EAAEF;AAD8E,uBAA/C,CAAlD;AAGD,qBALD,MAKO;AACL;AACA3B,sBAAAA,OAAO,CAACK,MAAR,gCAAsBL,OAAO,CAACK,MAAR,IAAkB,EAAxC,IAA6C;AAC3C/B,wBAAAA,MAAM,EAANA,MAD2C;AAE3CmC,wBAAAA,MAAM,EAANA,MAF2C;AAG3CS,wBAAAA,IAAI,EAAG,YAAM;AACX,8BAAMY,CAAC,GAAGZ,IAAI,IAAIC,cAAR,IAA0BY,SAApC;AACA,iCAAO,CAAC,CAAC,SAAD,EAAY,OAAZ,EAAqBC,QAArB,CAA8BF,CAA9B,CAAD,KAAsCjB,KAAK,IAAIJ,MAA/C,cAA4DI,KAAK,IAAIiB,CAAT,IAAc,MAA1E,cAAoFrB,MAAM,IAAIqB,CAAV,IAAe,MAAnG,IAA8GA,CAArH;AACD,yBAHK,EAHqC;AAO3Cb,wBAAAA,GAAG,EAAHA,GAP2C;AAQ3CJ,wBAAAA,KAAK,EAALA;AAR2C,uBAA7C;AAUD;AACF;;AAED,sBAAIW,mBAAJ,EAAyBxB,OAAO,CAACQ,SAAR,GAAoBgB,mBAApB;AACzB,sBAAIC,eAAJ,EAAqBzB,OAAO,CAACW,KAAR,GAAgBc,eAAhB;AACrB,sBAAIC,mBAAJ,EAAyB1B,OAAO,CAACY,SAAR,GAAoBc,mBAApB;AAtCH;AAuCvB;AACF;AAzCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CD;AA/EG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFL,GAnFD;AAoFD;;AAED,IAAIO,QAAQ,GAAG,CAAC,GAAGtE,OAAO,CAACD,OAAZ,EAAqB+B,oBAArB,CAAf;;AAEAjC,OAAO,CAACE,OAAR,GAAkBuE,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Marpit background image apply plugin.\n *\n * Apply parsed meta for background image / color into directives of each page.\n *\n * When inline SVG is enabled, it will reshape meta for advanced process instead\n * of converting to directives.\n *\n * @alias module:markdown/background_image/apply\n * @param {MarkdownIt} md markdown-it instance.\n */\nfunction backgroundImageApply(md) {\n  md.core.ruler.after('marpit_inline_svg', 'marpit_apply_background_image', ({\n    inlineMode,\n    tokens\n  }) => {\n    if (inlineMode) return;\n    let current = {};\n\n    for (const tb of tokens) {\n      if (tb.type === 'marpit_slide_open') current.open = tb;\n      if (tb.type === 'marpit_inline_svg_content_open') current.svgContent = tb;\n\n      if (tb.type === 'marpit_slide_close') {\n        if (current.images && current.images.length > 0) {\n          if (current.svgContent) {\n            // Reshape meta for advanced background\n            current.svgContent.meta = _objectSpread({}, current.svgContent.meta || {}, {\n              marpitBackground: {\n                direction: current.direction,\n                height: current.svgContent.attrGet('height'),\n                images: current.images,\n                open: current.open,\n                split: current.split,\n                splitSize: current.splitSize,\n                width: current.svgContent.attrGet('width')\n              }\n            });\n          } else {\n            // Apply simple CSS background\n            const img = current.images[current.images.length - 1];\n            current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n              backgroundImage: `url(\"${img.url}\")`\n            });\n            if (img.size) current.open.meta.marpitDirectives.backgroundSize = img.size;\n          }\n        }\n\n        current = {};\n      } // Collect parsed inline image meta\n\n\n      if (current.open && tb.type === 'inline') for (const t of tb.children) {\n        if (t.type === 'image') {\n          const {\n            background,\n            backgroundDirection,\n            backgroundSize,\n            backgroundSplit,\n            backgroundSplitSize,\n            color,\n            filter,\n            height,\n            size,\n            url,\n            width\n          } = t.meta.marpitImage;\n\n          if (background && !url.match(/^\\s*$/)) {\n            if (color) {\n              // Background color\n              current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n                backgroundColor: color\n              });\n            } else {\n              // Background image\n              current.images = [...(current.images || []), {\n                filter,\n                height,\n                size: (() => {\n                  const s = size || backgroundSize || undefined;\n                  return !['contain', 'cover'].includes(s) && (width || height) ? `${width || s || 'auto'} ${height || s || 'auto'}` : s;\n                })(),\n                url,\n                width\n              }];\n            }\n          }\n\n          if (backgroundDirection) current.direction = backgroundDirection;\n          if (backgroundSplit) current.split = backgroundSplit;\n          if (backgroundSplitSize) current.splitSize = backgroundSplitSize;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageApply);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}