{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _wrap_tokens = _interopRequireDefault(require(\"../helpers/wrap_tokens\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n/**\n * Marpit header and footer plugin.\n *\n * At each slide, add header and footer that are provided by directives.\n *\n * @alias module:markdown/header_and_footer\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction headerAndFooter(md) {\n  md.core.ruler.after('marpit_directives_apply', 'marpit_header_and_footer', state => {\n    if (state.inlineMode) return;\n    const parsedInlines = new Map();\n\n    const getParsed = markdown => {\n      let parsed = parsedInlines.get(markdown);\n\n      if (!parsed) {\n        parsed = md.parseInline(markdown, state.env);\n        delete parsed.map;\n        parsedInlines.set(markdown, parsed);\n      }\n\n      return parsed;\n    };\n\n    const createMarginalTokens = (tag, markdown) => (0, _wrap_tokens.default)(state.Token, `marpit_${tag}`, {\n      tag,\n      close: {\n        block: true\n      }\n    }, getParsed(markdown));\n\n    let current;\n    const newTokens = [];\n\n    for (const token of state.tokens) {\n      if (token.type === 'marpit_slide_open') {\n        current = token;\n        newTokens.push(token);\n        if (current.meta && current.meta.marpitHeader) newTokens.push(...createMarginalTokens('header', current.meta.marpitHeader));\n      } else if (token.type === 'marpit_slide_close') {\n        if (current.meta && current.meta.marpitFooter) newTokens.push(...createMarginalTokens('footer', current.meta.marpitFooter));\n        newTokens.push(token);\n      } else {\n        newTokens.push(token);\n      }\n    }\n\n    state.tokens = newTokens;\n  });\n}\n\nvar _default = (0, _plugin.default)(headerAndFooter);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/header_and_footer.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","_wrap_tokens","obj","__esModule","headerAndFooter","md","core","ruler","after","state","inlineMode","parsedInlines","Map","getParsed","markdown","parsed","get","parseInline","env","map","set","createMarginalTokens","tag","Token","close","block","current","newTokens","token","tokens","type","push","meta","marpitHeader","marpitFooter","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _wrap_tokens = _interopRequireDefault(require(\"../helpers/wrap_tokens\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\n\n/**\n * Marpit header and footer plugin.\n *\n * At each slide, add header and footer that are provided by directives.\n *\n * @alias module:markdown/header_and_footer\n * @param {MarkdownIt} md markdown-it instance.\n */\nfunction headerAndFooter(md) {\n  md.core.ruler.after('marpit_directives_apply', 'marpit_header_and_footer', state => {\n    if (state.inlineMode) return;\n    const parsedInlines = new Map();\n\n    const getParsed = markdown => {\n      let parsed = parsedInlines.get(markdown);\n\n      if (!parsed) {\n        parsed = md.parseInline(markdown, state.env);\n        delete parsed.map;\n        parsedInlines.set(markdown, parsed);\n      }\n\n      return parsed;\n    };\n\n    const createMarginalTokens = (tag, markdown) => (0, _wrap_tokens.default)(state.Token, `marpit_${tag}`, {\n      tag,\n      close: {\n        block: true\n      }\n    }, getParsed(markdown));\n\n    let current;\n    const newTokens = [];\n\n    for (const token of state.tokens) {\n      if (token.type === 'marpit_slide_open') {\n        current = token;\n        newTokens.push(token);\n        if (current.meta && current.meta.marpitHeader) newTokens.push(...createMarginalTokens('header', current.meta.marpitHeader));\n      } else if (token.type === 'marpit_slide_close') {\n        if (current.meta && current.meta.marpitFooter) newTokens.push(...createMarginalTokens('footer', current.meta.marpitFooter));\n        newTokens.push(token);\n      } else {\n        newTokens.push(token);\n      }\n    }\n\n    state.tokens = newTokens;\n  });\n}\n\nvar _default = (0, _plugin.default)(headerAndFooter);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}