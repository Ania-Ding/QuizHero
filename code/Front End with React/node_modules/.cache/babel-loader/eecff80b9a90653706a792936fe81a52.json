{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nvar fragmentedListMarkups = ['*', ')'];\n/**\n * Marpit fragment plugin.\n *\n * @alias module:markdown/fragment\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction fragment(md) {\n  // Fragmented list\n  md.core.ruler.after('marpit_directives_parse', 'marpit_fragment', function (state) {\n    if (state.inlineMode) return;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = state.tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n\n        if (token.type === 'list_item_open' && fragmentedListMarkups.includes(token.markup)) {\n          token.meta = token.meta || {};\n          token.meta.marpitFragment = true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }); // Add data-marpit-fragment(s) attributes to token\n\n  md.core.ruler.after('marpit_fragment', 'marpit_apply_fragment', function (state) {\n    if (state.inlineMode) return;\n    var fragments = {\n      slide: undefined,\n      count: 0\n    };\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = state.tokens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var token = _step2.value;\n\n        if (token.meta && token.meta.marpitSlideElement === 1) {\n          fragments.slide = token;\n          fragments.count = 0;\n        } else if (token.meta && token.meta.marpitSlideElement === -1) {\n          if (fragments.slide && fragments.count > 0) {\n            fragments.slide.attrSet('data-marpit-fragments', fragments.count);\n          }\n        } else if (token.meta && token.meta.marpitFragment) {\n          fragments.count += 1;\n          token.meta.marpitFragment = fragments.count;\n          token.attrSet('data-marpit-fragment', fragments.count);\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(fragment);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/fragment.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","fragmentedListMarkups","fragment","md","core","ruler","after","state","inlineMode","tokens","token","type","includes","markup","meta","marpitFragment","fragments","slide","undefined","count","marpitSlideElement","attrSet","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst fragmentedListMarkups = ['*', ')'];\n/**\n * Marpit fragment plugin.\n *\n * @alias module:markdown/fragment\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction fragment(md) {\n  // Fragmented list\n  md.core.ruler.after('marpit_directives_parse', 'marpit_fragment', state => {\n    if (state.inlineMode) return;\n\n    for (const token of state.tokens) {\n      if (token.type === 'list_item_open' && fragmentedListMarkups.includes(token.markup)) {\n        token.meta = token.meta || {};\n        token.meta.marpitFragment = true;\n      }\n    }\n  }); // Add data-marpit-fragment(s) attributes to token\n\n  md.core.ruler.after('marpit_fragment', 'marpit_apply_fragment', state => {\n    if (state.inlineMode) return;\n    const fragments = {\n      slide: undefined,\n      count: 0\n    };\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        fragments.slide = token;\n        fragments.count = 0;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (fragments.slide && fragments.count > 0) {\n          fragments.slide.attrSet('data-marpit-fragments', fragments.count);\n        }\n      } else if (token.meta && token.meta.marpitFragment) {\n        fragments.count += 1;\n        token.meta.marpitFragment = fragments.count;\n        token.attrSet('data-marpit-fragment', fragments.count);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(fragment);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}