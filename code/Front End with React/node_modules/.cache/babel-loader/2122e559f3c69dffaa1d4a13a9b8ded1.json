{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.marpitContainer = void 0;\n/** @module */\n\n/**\n * Marpit element class.\n *\n * @alias Element\n */\n\nclass Element {\n  /**\n   * Create a Element instance.\n   *\n   * Element instance has compatibility with a plain object that is consists by\n   * `tag` key and pairs of attribute names and values. A difference is whether\n   * object has been frozen.\n   *\n   * ```js\n   * import assert from 'assert'\n   * import { Element } from 'marpit'\n   *\n   * const obj = { tag: 'div', class: 'marpit' }\n   * const elm = new Element('div', { class: 'marpit' })\n   *\n   * // This assertion would pass.\n   * assert.deepStrictEqual(obj, { ...elm })\n   * ```\n   *\n   * @param {string} tag Tag name\n   * @param {Object} [attributes={}] Tag attributes\n   */\n  constructor(tag, attributes = {}) {\n    Object.defineProperties(this, {\n      attributes: {\n        value: attributes\n      },\n      tag: {\n        enumerable: true,\n        value: tag\n      }\n    });\n\n    for (const attr of Object.keys(attributes)) {\n      Object.defineProperty(this, attr, {\n        enumerable: true,\n        value: attributes[attr]\n      });\n    }\n\n    Object.freeze(this);\n  }\n\n}\n/**\n * Marpit's default container.\n *\n * It would output `<div class=\"marpit\"></div>`.\n *\n * @alias module:element.marpitContainer\n * @type {Element}\n */\n\n\nconst marpitContainer = new Element('div', {\n  class: 'marpit'\n});\nexports.marpitContainer = marpitContainer;\nvar _default = Element;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/element.js"],"names":["Object","defineProperty","exports","value","default","marpitContainer","Element","constructor","tag","attributes","defineProperties","enumerable","attr","keys","freeze","class","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,eAAR,GAA0B,KAAK,CAAjD;AAEA;;AAEA;;;;;;AAKA,MAAMC,OAAN,CAAc;AACZ;;;;;;;;;;;;;;;;;;;;;AAqBAC,EAAAA,WAAW,CAACC,GAAD,EAAMC,UAAU,GAAG,EAAnB,EAAuB;AAChCT,IAAAA,MAAM,CAACU,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BD,MAAAA,UAAU,EAAE;AACVN,QAAAA,KAAK,EAAEM;AADG,OADgB;AAI5BD,MAAAA,GAAG,EAAE;AACHG,QAAAA,UAAU,EAAE,IADT;AAEHR,QAAAA,KAAK,EAAEK;AAFJ;AAJuB,KAA9B;;AAUA,SAAK,MAAMI,IAAX,IAAmBZ,MAAM,CAACa,IAAP,CAAYJ,UAAZ,CAAnB,EAA4C;AAC1CT,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BW,IAA5B,EAAkC;AAChCD,QAAAA,UAAU,EAAE,IADoB;AAEhCR,QAAAA,KAAK,EAAEM,UAAU,CAACG,IAAD;AAFe,OAAlC;AAID;;AAEDZ,IAAAA,MAAM,CAACc,MAAP,CAAc,IAAd;AACD;;AAzCW;AA4Cd;;;;;;;;;;AAUA,MAAMT,eAAe,GAAG,IAAIC,OAAJ,CAAY,KAAZ,EAAmB;AACzCS,EAAAA,KAAK,EAAE;AADkC,CAAnB,CAAxB;AAGAb,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA,IAAIW,QAAQ,GAAGV,OAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBY,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.marpitContainer = void 0;\n\n/** @module */\n\n/**\n * Marpit element class.\n *\n * @alias Element\n */\nclass Element {\n  /**\n   * Create a Element instance.\n   *\n   * Element instance has compatibility with a plain object that is consists by\n   * `tag` key and pairs of attribute names and values. A difference is whether\n   * object has been frozen.\n   *\n   * ```js\n   * import assert from 'assert'\n   * import { Element } from 'marpit'\n   *\n   * const obj = { tag: 'div', class: 'marpit' }\n   * const elm = new Element('div', { class: 'marpit' })\n   *\n   * // This assertion would pass.\n   * assert.deepStrictEqual(obj, { ...elm })\n   * ```\n   *\n   * @param {string} tag Tag name\n   * @param {Object} [attributes={}] Tag attributes\n   */\n  constructor(tag, attributes = {}) {\n    Object.defineProperties(this, {\n      attributes: {\n        value: attributes\n      },\n      tag: {\n        enumerable: true,\n        value: tag\n      }\n    });\n\n    for (const attr of Object.keys(attributes)) {\n      Object.defineProperty(this, attr, {\n        enumerable: true,\n        value: attributes[attr]\n      });\n    }\n\n    Object.freeze(this);\n  }\n\n}\n/**\n * Marpit's default container.\n *\n * It would output `<div class=\"marpit\"></div>`.\n *\n * @alias module:element.marpitContainer\n * @type {Element}\n */\n\n\nconst marpitContainer = new Element('div', {\n  class: 'marpit'\n});\nexports.marpitContainer = marpitContainer;\nvar _default = Element;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}