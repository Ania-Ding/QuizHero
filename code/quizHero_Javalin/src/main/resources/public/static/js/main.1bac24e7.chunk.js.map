{"version":3,"sources":["fig/logo.png","components/Upload.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","components/QuizPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","name","action","headers","authorization","marpit","Marpit","themeSet","default","add","MyUpload","state","file","result","rawString","quiz","beforeUpload","console","log","setState","onChange","info","status","fileList","message","success","readFile","then","convertText","error","onDownload","data","urlObject","window","URL","webkitURL","export_blob","Blob","save_link","document","createElementNS","href","createObjectURL","download","obj","ev","createEvent","initMouseEvent","dispatchEvent","fakeClick","exportRaw","onPreview","trans","Promise","resolve","reject","reader","FileReader","readAsText","onload","e","onerror","render","html","css","filestring","parseString","quizList","Array","quizzes","split","i","length","choice","question","answers","quizArray","j","line","parsedQuestion","slice","join","charAt","push","type","content","substring","charCode","charCodeAt","String","fromCharCode","questions","callback","this","React","Component","Question","className","QuestionCount","counter","total","AnswerOption","checked","answerType","answer","id","value","questionId","answerContent","disabled","onAnswerSelected","htmlFor","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionTotal","answerOptions","map","Result","quizRquizResultesult","QuizPage","upload","answersCount","quizQuestions","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answerArray","BASE_URL","location","origin","formData","fileId","parseInt","axios","post","catch","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","quizResult","renderResult","renderQuiz","App","quizFlag","renderUploadPage","src","logo","alt","target","rel","renderQuizPage","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bac24e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f45975d0.png\";","import { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit'\nimport axios from 'axios'\n\n\n// const fs = require('fs');\nconst props = {\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n\n\n};\n\n\n\nconst marpit = new Marpit();\n// 2. Add theme CSS\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `\nmarpit.themeSet.default = marpit.themeSet.add(theme)\n\n\nclass MyUpload extends React.Component{\n    constructor(props) {\n        super(props);\n        this.callback = props.callback;\n        // this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n    state = {\n        file:\"\",\n        result:\"\",\n        rawString:\"\",\n        quiz:[]\n    }\n\n\n\n    beforeUpload = (file) => {\n        console.log(\"FILEEE\",file);\n        this.setState({\n            file:file\n        });\n    }\n    onChange = (info) => {\n        // console.log(\"file!!!:\",info.file)\n\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            // this.convertFile();\n            console.log(info.file.name);\n            message.success(`${info.file.name} file uploaded successfully`);\n            this.readFile(this.state.file).then(this.convertText);\n            // this.trans();\n        } else if (info.file.status === 'error') {\n            console.log(info.file.name);\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    }\n\n    onDownload = (file) => {\n        // const BASE_URL = document.location.origin;\n\n        // const formData = {\n        //     fileContent: { file },\n        //     userName: 'admin'\n        // }\n        function fakeClick(obj) {\n            var ev = document.createEvent(\"MouseEvents\");\n            ev.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            obj.dispatchEvent(ev);\n        }\n        function exportRaw(name, data) {\n            var urlObject = window.URL || window.webkitURL || window;\n            var export_blob = new Blob([data]);\n            var save_link = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n            save_link.href = urlObject.createObjectURL(export_blob);\n            save_link.download = name;\n            fakeClick(save_link);\n        }\n        exportRaw('filename.html', this.state.result);\n        console.log(this.state.rawString);\n        // const formData = {\n        //     fileId : 1,\n        //     questionId : 1,\n        //     choice : 2\n        // }\n        // axios\n        //     .post(BASE_URL+\"/record\", formData, {\n        //         headers: {\n        //             \"Content-Type\": \"multipart/form-data\"\n        //         }\n        //     })\n        //     .then(() => {\n        //         console.log(\"upload success\");\n        //     })\n        //     .catch((error) => {\n        //         console.log(\"error\")\n        //     });\n    }\n\n    onPreview=(file)=>{\n        this.trans();\n    }\n\n    readFile=(file)=>{\n        return new Promise(function (resolve, reject) {\n            const reader = new FileReader();\n            console.log(\"1\");\n            reader.readAsText(file);\n            console.log(\"2\")\n            reader.onload = (e) => {\n                // let content = e.target.result;\n                resolve(reader.result);\n                console.log(\"3\");\n                // console.log(content);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n\n    convertText=(result)=> {\n        // console.log(result);\n        this.setState({\n            rawString : result\n        });\n        // console.log(this.state.rawString);\n        // 3. Render markdown\n        const {html, css} = marpit.render(result);\n        // 4. Use output in your HTML\n        let filestring = `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n        // console.log(filestring)\n        ;\n        this.setState({\n            result: filestring\n        },);\n    }\n\n    parseString = (rawString) => {\n        var quizList = new Array();\n        var data = rawString;\n        var quizzes = data.split(\"\\n\\n\");\n\n        for (var i = 0; i < quizzes.length; i++) {\n            var choice = \"A\";\n            var quiz = {\n                question : \"\",\n                answers : []\n            };\n            var quizArray = quizzes[i].split(\"\\n\");\n            for (var j = 0; j < quizArray.length; j++) {\n                var line = quizArray[j].split(\" \");\n                if (line.length > 1) {\n                    console.log(line)\n                    if (line[1]==\"Question:\") {\n                        // parse question\n                        var parsedQuestion = line.slice(2, line.length);\n                        quiz.question = parsedQuestion.join(\" \");\n                    } else if (line[1].charAt(0) == '*') {\n                        // parse correct answers\n                        quiz.answers.push({\n                            type : choice,\n                            content : line[1].substring(2, line[1].length - 2)\n                        });\n                        var charCode = choice.charCodeAt(0);\n                        choice = String.fromCharCode(charCode + 1);\n                    } else {\n                        // parse wrong answers\n                        quiz.answers.push({\n                            type : choice,\n                            content : line[1]\n                        });\n                        var charCode = choice.charCodeAt(0);\n                        choice = String.fromCharCode(charCode + 1);\n                    }\n                }\n            }\n            quizList.push(quiz);\n        }\n        return quizList;\n        // for (var i = 0; i < data.length(); i ++) {\n        //     var j = i;\n        //     var quiz = {};\n        //     if (data.charAt(i) == '$') {\n        //         j = i + 1;\n        //         i = j;\n        //         while (data.charAt(j) != '$') {\n        //             j ++;\n        //         }\n        //         var question = data.substring(i, j);\n        //         j = j + 1;\n        //         i = j;\n        //         quiz[\"question\"] = question;\n        //     }\n        //     var answers = [];\n        //     while (data.charAt(j) != '$' || data.length() == j) {\n        //         var answer = {};\n        //         i = i + 1;\n        //         j = j + 1;\n        //         answer[\"type\"] = data.charAt(i);\n        //         while (data.charAt(j) != '@' || data.charAt(j) != '$' || data.length() == j) {\n        //             j ++;\n        //         }\n        //         var content = data.substring(i + 1, j);\n        //         answer[\"content\"] = content;\n        //         i = j;\n        //         answers.push(answer);\n        //     }\n        //     quiz[\"answers\"] = answers;\n        //     quizList.push(quiz);\n        // }\n    };\n\n    trans=()=>{\n        // var obj = JSON.parse(this.state.rawString);\n        // var questions = obj;\n        var questions = this.parseString(this.state.rawString);\n        console.log(questions);\n        this.setState({\n            quiz : questions\n        });\n        this.props.callback(questions);\n    };\n\n\n    render(){\n        return(\n            <div>\n                <Upload\n                    onChange={this.onChange}\n                    beforeUpload={this.beforeUpload}\n                    onDownload={this.onDownload}\n                    onPreview={this.onPreview}\n                    {...props}>\n\n                    <Button>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n\n                </Upload>\n\n            </div>\n        )\n    }\n}\n\nexport default MyUpload;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n    return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n    content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\n        </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n    return (\n        <li className=\"answerOption\">\n            <input\n                type=\"radio\"\n                className=\"radioCustomButton\"\n                name=\"radioGroup\"\n                checked={props.answerType === props.answer}\n                id={props.answerType}\n                value={props.answerType+\" \"+props.questionId+\" \"+props.answerContent}\n                disabled={props.answer}\n                onChange={props.onAnswerSelected}\n            />\n            <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n                {props.answerContent}\n            </label>\n        </li>\n    );\n}\n\nAnswerOption.propTypes = {\n    answerType: PropTypes.string.isRequired,\n    answerContent: PropTypes.string.isRequired,\n    answer: PropTypes.string.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n    function renderAnswerOptions(key) {\n        return (\n            <AnswerOption\n                key={key.content}\n                answerContent={key.content}\n                answerType={key.type}\n                answer={props.answer}\n                questionId={props.questionId}\n                onAnswerSelected={props.onAnswerSelected}\n            />\n        );\n    }\n\n    return (\n        <CSSTransitionGroup\n            className=\"container\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}\n        >\n            <div key={props.questionId}>\n                <QuestionCount counter={props.questionId} total={props.questionTotal} />\n                <Question content={props.question} />\n                <ul className=\"answerOptions\">\n                    {props.answerOptions.map(renderAnswerOptions)}\n                </ul>\n            </div>\n        </CSSTransitionGroup>\n    );\n}\n\nQuiz.propTypes = {\n    answer: PropTypes.string.isRequired,\n    answerOptions: PropTypes.array.isRequired,\n    question: PropTypes.string.isRequired,\n    questionId: PropTypes.number.isRequired,\n    questionTotal: PropTypes.number.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n    return (\n        <CSSTransitionGroup\n            className=\"container result\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}\n        >\n            <div>\n                You prefer <strong>{props.quizRquizResultesult}</strong>!\n            </div>\n        </CSSTransitionGroup>\n    );\n}\n\nResult.propTypes = {\n    quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\n// import quizQuestions from \"../api/quizQuestions\";\nimport Quiz from './Quiz';\nimport Result from './Result';\n// import logo from '../svg/logo.svg';\nimport axios from 'axios'\n\nclass QuizPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            upload: 0,\n            counter: 0,\n            questionId: 1,\n            question: '',\n            answerOptions: [],\n            answer: '',\n            answersCount: {},\n            result: '',\n            quizQuestions: props.questions\n        };\n\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        const shuffledAnswerOptions = this.state.quizQuestions.map(question =>\n            this.shuffleArray(question.answers)\n        );\n        this.setState({\n            question: this.state.quizQuestions[0].question,\n            answerOptions: shuffledAnswerOptions[0]\n        });\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    handleAnswerSelected(event) {\n        this.setUserAnswer(event.currentTarget.value);\n        console.log(event.currentTarget.value);\n        if (this.state.questionId < this.state.quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer(answer) {\n        var answerArray = answer.split(\" \");\n        var type = answerArray[0];\n        var questionId = answerArray[1];\n        var answerContent = answerArray[2];\n        console.log(answerArray)\n        this.setState((state, props) => ({\n            answersCount: {\n                ...state.answersCount,\n                [answer]: (state.answersCount[type] || 0) + 1\n            },\n            answer: type\n        }));\n\n        //send choice to back-end\n        const BASE_URL = document.location.origin;\n        const formData = {\n            fileId : 1,\n            questionId : parseInt(questionId),\n            choice : type\n        }\n        console.log(formData)\n        axios\n            .post(BASE_URL+\"/record\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n            .then(() => {\n                console.log(\"upload success\");\n            })\n            .catch((error) => {\n                console.log(\"error\")\n            });\n    }\n\n    setNextQuestion() {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n        // console.log(this.state.quizQuestions);\n        this.setState({\n            counter: counter,\n            questionId: questionId,\n            question: this.state.quizQuestions[counter].question,\n            answerOptions: this.state.quizQuestions[counter].answers,\n            answer: ''\n        });\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        return (\n            <Quiz\n                answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={this.state.quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n            />\n        );\n    }\n\n    renderResult() {\n        return <Result quizResult={this.state.result} />;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                    {/*<h2>React Quiz</h2>*/}\n                </div>\n\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n\n            </div>\n        );\n    }\n}\n\nexport default QuizPage;\n","import React , { Component } from  'react';\nimport logo from './fig/logo.png';\nimport './App.css';\nimport MyUpload from './components/Upload'\nimport QuizPage from \"./components/QuizPage\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            quiz:'',\n            quizFlag: 0\n        };\n\n    }\n\n    callback=(quiz)=>{\n        this.setState({quiz})\n        this.setState({quizFlag : 1});\n    }\n\n    renderQuizPage() {\n        console.log(this.state.quiz)\n        return (\n            <QuizPage\n            questions={this.state.quiz}\n            />\n        );\n    }\n\n    renderUploadPage = () => {\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n\n                    <MyUpload callback={this.callback}/>\n\n                    <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Learn QuizHero\n                    </a>\n                </header>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.quizFlag ? this.renderQuizPage() : this.renderUploadPage()}\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}