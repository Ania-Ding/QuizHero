{"version":3,"sources":["components/Upload.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/QuizStatistic.js","components/Spectacle.js","components/Button.js","components/ResultPresenter.js","components/QuizPagePresenter.js","components/ResultStudent.js","components/QuizPageStudent.js","App.js","serviceWorker.js","index.js","fig/logo.png"],"names":["props","name","action","headers","authorization","marpit","Marpit","themeSet","default","add","MyUpload","state","file","result","rawString","slideString","quizString","quiz","display_name","beforeUpload","console","log","setState","onChange","info","status","fileList","message","success","readFile","then","convertText","error","onDownload","data","urlObject","window","URL","webkitURL","export_blob","Blob","save_link","document","createElementNS","href","createObjectURL","download","obj","ev","createEvent","initMouseEvent","dispatchEvent","fakeClick","exportRaw","onPreview","separateQuestion","Promise","resolve","reject","reader","FileReader","readAsText","onload","e","onerror","render","html","css","filestring","fileString","slides","Array","questions","sections","split","i","length","section","push","join","trans","parseString","parsedChoice","quizList","quizzes","choice","question","answers","quizArray","j","line","slice","type","content","charCode","charCodeAt","String","fromCharCode","BASE_URL","location","origin","formData","fileId","questionId","answer","countA","countB","countC","countD","axios","post","catch","toStudentMode","callback4","toPresenterMode","slidesString","callback","callback1","this","style","display","onClick","React","Component","Question","className","QuestionCount","counter","total","AnswerOption","checked","answerType","id","value","answerContent","disabled","onAnswerSelected","htmlFor","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionTotal","answerOptions","map","QuizStatistic","refreshStatistic","getStatistic","get","params","res","quizData","jsonArray","quizNum","xAxisData","correntPercent","color","index","num","percent","toFixed","echartOption","title","text","x","tooltip","trigger","axisPointer","xAxis","yAxis","position","axisLine","lineStyle","axisLabel","formatter","series","barGap","barWidth","itemStyle","normal","dataIndex","yAxisIndex","float","marginLeft","backgroundColor","width","height","margin","borderRadius","ref","echartsElement","option","theme","mdContent","template","justifyContent","bottom","padding","Slides","callback2","loop","containsSlides","BackButton","OnClick","callback3","ResultPresenter","QuizPagePresenter","upload","answersCount","quizQuestions","handleAnswerSelected","bind","skipQuestion","shuffledAnswerOptions","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answerArray","parseInt","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","quizResult","renderResult","renderQuiz","ResultStudent","QuizPageStudent","App","slidesFlag","quizFlag","studentFlag","statisticButtonClicked","renderUploadPage","src","logo","alt","renderStudentPage","renderPresenterPage","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.782f1184.chunk.js","sourcesContent":["import { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit'\nimport axios from 'axios';\n\n\n\n// const fs = require('fs');\nconst props = {\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n};\n\n// Marpit\nconst marpit = new Marpit();\n// Add Marpit theme CSS\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `\nmarpit.themeSet.default = marpit.themeSet.add(theme)\n\n\nclass MyUpload extends React.Component{\n    constructor(props) {\n        super(props);\n        this.callback = props.callback;\n        this.callback1 = props.callback1;\n        this.callback4 = props.callback4;\n        // this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n    state = {\n        file:\"\",\n        result:\"\",\n        rawString:\"\",\n        slideString:\"\",\n        quizString:\"\",\n        quiz:[],\n        display_name:'none'\n    }\n\n\n\n    beforeUpload = (file) => {\n        console.log(\"FILEEE\",file);\n        this.setState({\n            file:file\n        });\n    }\n    onChange = (info) => {\n        // console.log(\"file!!!:\",info.file)\n\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            // this.convertFile();\n            console.log(info.file.name);\n            message.success(`${info.file.name} file uploaded successfully`);\n            this.readFile(this.state.file).then(this.convertText);\n            // this.trans();\n            this.state.display_name = this.display_name(this.state.display_name);\n        } else if (info.file.status === 'error') {\n            console.log(info.file.name);\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    }\n\n    onDownload = (file) => {\n        function fakeClick(obj) {\n            var ev = document.createEvent(\"MouseEvents\");\n            ev.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            obj.dispatchEvent(ev);\n        }\n        function exportRaw(name, data) {\n            var urlObject = window.URL || window.webkitURL || window;\n            var export_blob = new Blob([data]);\n            var save_link = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n            save_link.href = urlObject.createObjectURL(export_blob);\n            save_link.download = name;\n            fakeClick(save_link);\n        }\n        exportRaw('filename.html', this.state.result);\n        console.log(this.state.rawString);\n\n    }\n\n    onPreview=(file)=>{\n        this.separateQuestion(this.state.rawString);\n    }\n\n    readFile=(file)=>{\n        return new Promise(function (resolve, reject) {\n            const reader = new FileReader();\n            console.log(\"1\");\n            reader.readAsText(file);\n            console.log(\"2\")\n            reader.onload = (e) => {\n                // let content = e.target.result;\n                resolve(reader.result);\n                console.log(\"3\");\n                // console.log(content);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n\n    convertText=(result)=> {\n        // console.log(result);\n        this.setState({\n            rawString : result\n        });\n        // console.log(this.state.rawString);\n        // 3. Render markdown\n        const {html, css} = marpit.render(result);\n        // 4. Use output in your HTML\n        let filestring = `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n        // console.log(filestring)\n        ;\n        this.setState({\n            result: filestring\n        },);\n    }\n\n    separateQuestion = (fileString) => {\n        var slides = new Array();\n        var questions = new Array();\n        var data = fileString;\n        var sections = data.split(\"---\\n\\n\")\n        for (var i = 0; i < sections.length; i++) {\n            console.log(sections[i].split(\" \", 2)[0] === \">\");\n            const section = sections[i].split(\" \");\n            console.log(section[0]);\n            if (section[0] === \">\") {\n                questions.push(sections[i]);\n            } else {\n                slides.push(sections[i]);\n            }\n        }\n        console.log(questions)\n        this.setState({\n            slideString: slides.join(\"---\\n\\n\"),\n            quizString: questions.join(\"---\\n\\n\")\n        }, this.trans)\n    }\n\n    parseString = (rawString) => {\n        // this.separateQuestion(this.state.rawString);\n        var quizList = new Array();\n        var data = rawString;\n        var quizzes = data.split(\"\\n\\n\");\n        var parsedChoice;\n\n        for (var i = 0; i < quizzes.length; i++) {\n            var choice = \"A\";\n            var quiz = {\n                question : \"\",\n                answers : []\n            };\n            var quizArray = quizzes[i].split(\"\\n\");\n            for (var j = 0; j < quizArray.length; j++) {\n                var line = quizArray[j];\n                if (line.length > 1) {\n                    console.log(line)\n                    if (line.slice(0, 11) === \"> Question:\") {\n                        // parse question\n                        quiz.question = line.slice(12, line.length);\n                        // quiz.question = parsedQuestion.join(\" \");\n                    } else if (line[0] === '*' && line.slice(2, 5) === \"[x]\") {\n                        // parse correct choice\n                        parsedChoice = line.slice(6, line.length);\n                        // parsedChoice = parsedChoice.join(\" \");\n                        quiz.answers.push({\n                            type : choice,\n                            content : parsedChoice\n                        });\n                        var charCode = choice.charCodeAt(0);\n                        choice = String.fromCharCode(charCode + 1);\n\n                        // send correct answer to backend\n                        const BASE_URL = document.location.origin;\n                        const formData = {\n                            fileId : 1,\n                            questionId : quizList.length + 1,\n                            answer : String.fromCharCode(charCode),\n                            countA : 0,\n                            countB : 0,\n                            countC : 0,\n                            countD : 0,\n                        }\n                        console.log(formData)\n                        axios\n                            .post(BASE_URL + \"/quiz\", formData, {\n                                headers: {\n                                \"Content-Type\": \"multipart/form-data\"\n                                }\n                            })\n                            .then(() => {\n                                console.log(\"quiz initialize success\");\n                            })\n                            .catch((error) => {\n                                 console.log(\"error\")\n                            });\n                    } else if (line[0] === '*' && line.slice(2, 5) === \"[ ]\") {\n                        // parse wrong choice\n                        parsedChoice = line.slice(6, line.length);\n                        // parsedChoice = parsedChoice.join(\" \");\n                        quiz.answers.push({\n                            type : choice,\n                            content : parsedChoice\n                        });\n                        var charCode = choice.charCodeAt(0);\n                        choice = String.fromCharCode(charCode + 1);\n                    }\n                }\n            }\n            quizList.push(quiz);\n        }\n        return quizList;\n    };\n\n    toStudentMode = () => {\n        this.separateQuestion(this.state.rawString);\n        this.callback4()\n    }\n\n    toPresenterMode = () => {\n        this.separateQuestion(this.state.rawString);\n    }\n\n    trans=()=>{\n        // var obj = JSON.parse(this.state.rawString);\n        // var questions = obj;\n        // this.separateQuestion(this.state.rawString);\n        console.log(this.state.quizString)\n        console.log(this.state.slideString)\n        var questions = this.parseString(this.state.quizString);\n        console.log(questions);\n        this.setState({\n            quiz : questions\n        });\n        const slidesString = this.state.slideString;\n        this.props.callback(questions);\n        this.props.callback1(slidesString);\n    };\n\n    display_name () {\n        if (this.state.display_name === 'none') {\n            this.setState({\n                display_name:'block'\n            })\n        }else if (this.state.display_name === 'block'){\n            this.setState({\n                display_name:'none'\n            })\n        }\n    };\n\n\n    render(){\n        return(\n            <div>\n                <div>\n                    <Upload\n                        onChange={this.onChange}\n                        beforeUpload={this.beforeUpload}\n                        onDownload={this.onDownload}\n                        onPreview={this.onPreview}\n                        {...props}>\n\n                        <Button>\n                            <Icon type = 'upload' /> Click to Upload\n                        </Button>\n\n                    </Upload>\n                </div>\n                <div style={{display:this.state.display_name}}>\n                    <div>\n                        <Button onClick={this.toPresenterMode}>\n                            <Icon/>Presenter mode\n                        </Button>\n                    </div>\n                    <div>\n                        <Button onClick={this.toStudentMode}>\n                            <Icon/>Student mode\n                        </Button>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MyUpload;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n    return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n    content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n            Question <span>{props.counter}</span> of <span>{props.total}</span>\n        </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n    return (\n        <li className=\"answerOption\">\n            <input\n                type=\"radio\"\n                className=\"radioCustomButton\"\n                name=\"radioGroup\"\n                checked={props.answerType === props.answer}\n                id={props.answerType}\n                value={props.answerType+\" \"+props.questionId+\" \"+props.answerContent}\n                disabled={props.answer}\n                onChange={props.onAnswerSelected}\n            />\n            <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n                {props.answerContent}\n            </label>\n        </li>\n    );\n}\n\nAnswerOption.propTypes = {\n    answerType: PropTypes.string.isRequired,\n    answerContent: PropTypes.string.isRequired,\n    answer: PropTypes.string.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n    function renderAnswerOptions(key) {\n        return (\n            <AnswerOption\n                key={key.content}\n                answerContent={key.content}\n                answerType={key.type}\n                answer={props.answer}\n                questionId={props.questionId}\n                onAnswerSelected={props.onAnswerSelected}\n            />\n        );\n    }\n\n    return (\n        <CSSTransitionGroup\n            className=\"container\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}\n        >\n            <div key={props.questionId}>\n                <QuestionCount counter={props.questionId} total={props.questionTotal} />\n                <Question content={props.question} />\n                <ul className=\"answerOptions\">\n                    {props.answerOptions.map(renderAnswerOptions)}\n                </ul>\n            </div>\n        </CSSTransitionGroup>\n    );\n}\n\nQuiz.propTypes = {\n    answer: PropTypes.string.isRequired,\n    answerOptions: PropTypes.array.isRequired,\n    question: PropTypes.string.isRequired,\n    questionId: PropTypes.number.isRequired,\n    questionTotal: PropTypes.number.isRequired,\n    onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport axios from 'axios'\nimport {Button} from 'antd'\n\n\nclass QuizStatistic extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            quizData : []\n        }\n    }\n    \n    componentDidMount(){\n        this.getStatistic();\n    }\n\n    refreshStatistic = () =>{\n        console.log(\"Push\");\n        this.getStatistic();\n    } \n\n    getStatistic = ()=>{\n        const BASE_URL = document.location.origin;\n        let params = {\n            fileId : 1,\n            questionId: 1,\n        }\n        axios\n        .get(BASE_URL + \"/quizstat\", {params})\n        .then((res) => {\n            if(res.status === 200){\n                this.setState({quizData : res.data});\n                console.log(\"res\",res);\n            }\n            // console.log(res.data);\n        })\n        .catch((error) => {\n            console.log(\"error\")\n        });\n    }\n\n    render() {\n        // const {chartData} = this.props;\n        // const charData = [];\n        // const myChartData = chartData.details?chartData.details.dtl:[];\n        // const categories = [], roArray = [], shfArray = [], avgArray = [];\n\n        // myChartData.map((item)=>{\n        //     const roNum = parseFloat(item.RO_COUNT);\n        //     const shfNum = parseFloat(item.SHF_COUNT);\n        //     const avgNum = parseFloat(item.AVG_VAL);\n\n        //     categories.push(item.MECHANIC_NAME);\n        //     roArray.push(roNum);\n        //     shfArray.push(shfNum);\n        //     avgArray.push(avgNum);\n        // });\n\n        // console.log(\"quiz data\",typeof(this.state.quizData))\n        var jsonArray = this.state.quizData;\n        // for(let i=0;i<jsonArray.length;i++){\n        //     jsonArray[i].answer = 'B';\n        // }\n\n        // var jsonArray = [\n        //     {\n        //         \"id\": 1,\n        //         \"fileId\": 1,\n        //         \"questionId\": 1,\n        //         \"answer\": 'B',\n        //         \"countA\": 13,\n        //         \"countB\": 14,\n        //         \"countC\": 8,\n        //         \"countD\": 9\n        //     },\n        //     {\n        //         \"id\": 2,\n        //         \"fileId\": 1,\n        //         \"questionId\": 2,\n        //         \"answer\": 'C',\n        //         \"countA\": 8,\n        //         \"countB\": 6,\n        //         \"countC\": 25,\n        //         \"countD\": 11\n        //     }\n        // ];\n     \n        var quizNum = 0;\n        var xAxisData = [];\n        var countA = [];\n        var countB = [];\n        var countC = [];\n        var countD = [];\n        var answers = [];\n        var correntPercent = [];\n        var color = ['#FE8463', '#C6E579', '#32D3EB'];\n\n        for (var index in jsonArray) {\n            quizNum = quizNum + 1;\n            xAxisData.push(\"Q\" + quizNum);\n            countA.push(jsonArray[index].countA);\n            countB.push(jsonArray[index].countB);\n            countC.push(jsonArray[index].countC);\n            countD.push(jsonArray[index].countD);\n            answers.push(jsonArray[index].answer);\n            var total = jsonArray[index].countA + jsonArray[index].countB + jsonArray[index].countC + jsonArray[index].countD;\n            var num = 0;\n            if (jsonArray[index].answer === \"A\") {\n                num = jsonArray[index].countA;\n            }\n            else if (jsonArray[index].answer === \"B\") {\n                num = jsonArray[index].countB;\n            }\n            else if (jsonArray[index].answer === \"C\") {\n                num = jsonArray[index].countC;\n            }\n            else if (jsonArray[index].answer === \"D\") {\n                num = jsonArray[index].countD;\n            }\n            var percent = num / total * 100;\n            correntPercent.push(percent.toFixed(1));\n        }\n\n       \n        const echartOption = {\n            title: { text: 'Quiz Statistic',\n                    x:'center'},\n    \n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {type: 'shadow'},\n            },\n            // legend: {\n            //     orient: 'horizontal',\n            //     x:'center',\n            //     y: 'top',\n            //     data: [\n            //         {\n            //             name: 'Correct Answer',\n            //             textStyle:{fontWeight:'bold', color:'green'}\n            //         },\n            //         {\n            //             name: 'Wrong Answer',\n            //             textStyle:{fontWeight:'bold', color:'blue'}\n            //         },\n\n            //     ],  \n            // },\n            \n            xAxis: {\n                // name:\"Quiz Number\",\n                // data: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n                data: xAxisData,\n            },\n            yAxis: [\n                {\n                    type: 'value',\n                    name:\"Amount of Choices\",\n                    position: 'left',\n                    axisLine: {\n                        lineStyle: {\n                            color: 'black'\n                        }\n                    },\n                },\n                {\n                    type: 'value',\n                    name: 'Correct Percentage',\n                    position: 'right',\n                    axisLine: {\n                        lineStyle: {\n                            color: 'black'\n                        }\n                    },\n                    axisLabel: {\n                        formatter: '{value} %'\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'A',\n                    type: 'bar',\n                    barGap: 0.1,\n                    barWidth : 30,\n                    data: countA,\n                    itemStyle: {\n                        normal: {\n                            color: function(params) {                        \n                                return answers[params.dataIndex] === 'A' ? color[0] : color[1];\n                            }\n                        }\n                    }\n                },\n                {\n                    name: 'B',\n                    type: 'bar',\n                    barWidth : 30,\n                    data: countB,\n                    itemStyle: {\n                        normal: {\n                            color: function(params) {\n                                return answers[params.dataIndex] === 'B' ? color[0] : color[1];\n                            }\n                        }\n                    }\n                },\n                {\n                    name:'C',\n                    type:'bar',\n                    barWidth: 30,\n                    data: countC,\n                    itemStyle: {\n                        normal: {\n                            color: function(params) {\n                                return answers[params.dataIndex] === 'C' ? color[0] : color[1];\n                            }\n                        }\n                    }\n                },\n                {\n                    name:'D',\n                    type:'bar',\n                    barWidth: 30,\n                    data: countD,\n                    itemStyle: {\n                        normal: {\n                            color: function(params) {\n                                return answers[params.dataIndex] === 'D' ? color[0] : color[1];\n                            }\n                        }\n                    }\n                },\n                {\n                    name: 'Corrent Percentage',\n                    type: 'line',\n                    data: correntPercent,\n                    yAxisIndex: 1,\n                    itemStyle: {\n                        normal: {color: color[2]}\n                    }\n                }\n            ]\n        };\n\n        const firstButtonStyle = {\n            backgroundColor:\"#FE8463\",\n            width:\"30px\",\n            height:\"15px\",\n            margin:\"0px 10px\",\n            borderRadius: \"3px\"\n          };\n\n          const secondButtonStyle = {\n            backgroundColor:\"#C6E579\",\n            width:\"30px\",\n            height:\"15px\",\n            margin:\"0px 10px\",\n            borderRadius: \"3px\"\n          };\n\n        return (\n            <div>\n                <div className=\"legend\" style={{float:\"left\"}}>\n                    <span style={{marginLeft:\"10px\"}}>Correct Answer</span><button style={firstButtonStyle}></button>\n                    <span style={{marginLeft:\"10px\"}}>Wrong Answer</span><button style={secondButtonStyle}></button>   \n                </div>\n                <Button onClick={this.refreshStatistic}>Refresh</Button>\n                <ReactEcharts\n                    ref={(e) => {this.echartsElement = e }}\n                    option={echartOption}\n                    theme=\"clear\"\n                />\n            </div>\n        )\n    }\n}\n\nexport default QuizStatistic","import React from 'react';\nimport { render } from 'react-dom';\nimport { Upload, message, Button, Icon } from 'antd';\n\nimport { Box, Deck, FlexBox, FullScreen, Markdown, Progress, Slide, Heading, Notes} from 'spectacle';\n\n// SPECTACLE_CLI_MD_START\n// import mdContent from './questions.md';\n// SPECTACLE_CLI_MD_END\nconst mdContent = `> Question: What is your favorite course?`\n// SPECTACLE_CLI_THEME_START\nconsole.log(mdContent)\nconst theme = {\n    // colors: {\n    //     primary: '#f00',\n    //     secondary: '#00f'\n    // }\n};\n// SPECTACLE_CLI_THEME_END\n\n// SPECTACLE_CLI_TEMPLATE_START\nconst template = () => (\n    <FlexBox\n        justifyContent=\"space-between\"\n        position=\"absolute\"\n        bottom={0}\n        width={1}\n    >\n        <Box padding=\"0 1em\">\n            <FullScreen />\n        </Box>\n        <Box padding=\"1em\">\n            <Progress />\n        </Box>\n    </FlexBox>\n);\n\n// SPECTACLE_CLI_TEMPLATE_END\n\n// const Presentation = () => (\n//     <Deck loop theme={theme} template={template}>\n//         {/*<Markdown containsSlides>{mdContent}</Markdown>*/}\n//         <Slide>\n//             <Heading>Welcome to Spectacle</Heading>\n//         </Slide>\n//         <Slide>\n//             <Heading>Next, We will do some in class quiz</Heading>\n//             <Upload>\n//                 <Button\n//                     onDownload={this.onDownload}>\n//                     <Icon type = 'upload' /> Click to Next page\n//                 </Button>\n//             </Upload>\n//         </Slide>\n//     </Deck>\n// );\n\nclass Slides extends React.Component{\n    constructor(props) {\n        super(props);\n        this.callback2 = props.callback2;\n        this.slides = props.slidesString;\n        // this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n\n    onClick = () => {\n        this.props.callback2(1);\n    }\n\n    render(){\n        console.log(mdContent)\n        return (\n            <Deck loop theme={theme} template={template}>\n\n                <Markdown containsSlides>{this.slides}</Markdown>\n                {/*<Slide>*/}\n                {/*    <Heading>Welcome to Spectacle</Heading>*/}\n\n                {/*</Slide>*/}\n                <Slide>\n                    <Heading>Next, We will do some in class quiz</Heading>\n                    <Box padding=\"1em\">\n                        <Button\n                            onClick={this.onClick}>\n                            <Icon /> Click to start quiz\n                        </Button>\n                    </Box>\n\n                </Slide>\n                <Markdown containsSlides>{this.slides}</Markdown>\n            </Deck>\n        );\n    }\n    // render (<Presentation />, document.getElementById('root'));\n}\n\nexport default Slides;","import React from 'react';\nimport { render } from 'react-dom';\nimport { Upload, message, Button, Icon } from 'antd';\nimport Slides from \"./Spectacle\";\n\nclass BackButton extends React.Component{\n    constructor(props) {\n        super(props);\n        this.callback3 = props.callback3;\n\n\n    }\n    OnClick =()=> {\n        this.props.callback3();\n    }\n    render () {\n        return (\n            <Button\n                onClick={this.OnClick}>\n                <Icon /> Back to Slides\n            </Button>\n        )\n    }\n\n}\n\nexport default BackButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport QuizStatictic from './QuizStatistic'\nimport BackButton from './Button'\n\nfunction ResultPresenter(props) {\n    return (\n        <div>\n            <CSSTransitionGroup\n                className=\"container result\"\n                component=\"div\"\n                transitionName=\"fade\"\n                transitionEnterTimeout={800}\n                transitionLeaveTimeout={500}\n                transitionAppear\n                transitionAppearTimeout={500}\n            >\n            <div>\n                {/* Thank you for taking the quiz, your score is <strong>{props.quizResult}</strong>! */}\n                Thank you for finishing the quiz, here are the statistics:\n            </div>\n            </CSSTransitionGroup>\n            <QuizStatictic/>\n            <BackButton callback3={props.callback3}/>\n        </div>\n    );\n}\n\nResultPresenter.propTypes = {\n    quizResult: PropTypes.string.isRequired\n};\n\nexport default ResultPresenter;\n","import React, { Component } from 'react';\nimport Quiz from './Quiz';\nimport ResultPresenter from './ResultPresenter';\nimport axios from 'axios'\nimport {Button, Icon} from \"antd\";\n\nclass QuizPagePresenter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            upload: 0,\n            counter: 0,\n            questionId: 1,\n            question: '',\n            answerOptions: [],\n            answer: '',\n            answersCount: {},\n            result: '',\n            quizQuestions: props.questions\n        };\n\n        this.callback3 = props.callback3;\n\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n        this.skipQuestion = this.skipQuestion.bind(this);\n    }\n\n    componentDidMount() {\n\n        const shuffledAnswerOptions = this.state.quizQuestions.map(question =>\n            this.shuffleArray(question.answers)\n        );\n        this.setState({\n            question: this.state.quizQuestions[0].question,\n            answerOptions: shuffledAnswerOptions[0]\n        });\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    handleAnswerSelected(event) {\n        this.setUserAnswer(event.currentTarget.value);\n        console.log(event.currentTarget.value);\n        if (this.state.questionId < this.state.quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer(answer) {\n        var answerArray = answer.split(\" \");\n        var type = answerArray[0];\n        var questionId = answerArray[1];\n        var answerContent = answerArray[2];\n        console.log(answerArray)\n        this.setState((state, props) => ({\n            answersCount: {\n                ...state.answersCount,\n                [answer]: (state.answersCount[type] || 0) + 1\n            },\n            answer: type\n        }));\n\n        //send choice to back-end\n        const BASE_URL = document.location.origin;\n        const formData = {\n            fileId : 1,\n            questionId : parseInt(questionId),\n            choice : type\n        }\n        console.log(formData)\n        axios\n            .post(BASE_URL+\"/record\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n            .then(() => {\n                console.log(\"upload success\");\n            })\n            .catch((error) => {\n                console.log(\"error\")\n            });\n    }\n\n    setNextQuestion() {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n        // console.log(this.state.quizQuestions);\n        this.setState({\n            counter: counter,\n            questionId: questionId,\n            question: this.state.quizQuestions[counter].question,\n            answerOptions: this.state.quizQuestions[counter].answers,\n            answer: ''\n        });\n    }\n\n    skipQuestion() {\n        if (this.state.questionId < this.state.quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        return (\n            <div>\n                <Quiz\n                    answer={this.state.answer}\n                    answerOptions={this.state.answerOptions}\n                    questionId={this.state.questionId}\n                    question={this.state.question}\n                    questionTotal={this.state.quizQuestions.length}\n                    onAnswerSelected={this.handleAnswerSelected}\n                />\n                <Button\n                    onClick={this.skipQuestion}>\n                    <Icon /> Skip\n                </Button>\n            </div>\n        );\n    }\n\n\n    renderResult() {\n        return <ResultPresenter quizResult={this.state.result} callback3={this.callback3} />;\n    }\n\n    render() {\n        return (\n            <div className=\"Quiz-page\">\n                <div className=\"Quiz-header\">\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                    {/*<h2>React Quiz</h2>*/}\n                </div>\n\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n\n            </div>\n        );\n    }\n}\n\nexport default QuizPagePresenter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport QuizStatictic from './QuizStatistic'\nimport BackButton from './Button'\n\nfunction ResultStudent(props) {\n    return (\n        <div>\n            <CSSTransitionGroup\n                className=\"container result\"\n                component=\"div\"\n                transitionName=\"fade\"\n                transitionEnterTimeout={800}\n                transitionLeaveTimeout={500}\n                transitionAppear\n                transitionAppearTimeout={500}\n            >\n                <div>\n                    {/* Thank you for taking the quiz, your score is <strong>{props.quizResult}</strong>! */}\n                    Thank you for finishing the quiz, please go back to the slides.\n                </div>\n            </CSSTransitionGroup>\n            <BackButton callback3={props.callback3}/>\n        </div>\n    );\n}\n\nResultStudent.propTypes = {\n    quizResult: PropTypes.string.isRequired\n};\n\nexport default ResultStudent;\n","import React, { Component } from 'react';\nimport Quiz from './Quiz';\nimport ResultStudent from './ResultStudent';\nimport axios from 'axios'\n\nclass QuizPageStudent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            upload: 0,\n            counter: 0,\n            questionId: 1,\n            question: '',\n            answerOptions: [],\n            answer: '',\n            answersCount: {},\n            result: '',\n            quizQuestions: props.questions\n        };\n\n        this.callback3 = props.callback3;\n\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    }\n\n    componentDidMount() {\n\n        const shuffledAnswerOptions = this.state.quizQuestions.map(question =>\n            this.shuffleArray(question.answers)\n        );\n        this.setState({\n            question: this.state.quizQuestions[0].question,\n            answerOptions: shuffledAnswerOptions[0]\n        });\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    handleAnswerSelected(event) {\n        this.setUserAnswer(event.currentTarget.value);\n        console.log(event.currentTarget.value);\n        if (this.state.questionId < this.state.quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer(answer) {\n        var answerArray = answer.split(\" \");\n        var type = answerArray[0];\n        var questionId = answerArray[1];\n        var answerContent = answerArray[2];\n        console.log(answerArray)\n        this.setState((state, props) => ({\n            answersCount: {\n                ...state.answersCount,\n                [answer]: (state.answersCount[type] || 0) + 1\n            },\n            answer: type\n        }));\n\n        //send choice to back-end\n        const BASE_URL = document.location.origin;\n        const formData = {\n            fileId : 1,\n            questionId : parseInt(questionId),\n            choice : type\n        }\n        console.log(formData)\n        axios\n            .post(BASE_URL+\"/record\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n            .then(() => {\n                console.log(\"upload success\");\n            })\n            .catch((error) => {\n                console.log(\"error\")\n            });\n    }\n\n    setNextQuestion() {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n        // console.log(this.state.quizQuestions);\n        this.setState({\n            counter: counter,\n            questionId: questionId,\n            question: this.state.quizQuestions[counter].question,\n            answerOptions: this.state.quizQuestions[counter].answers,\n            answer: ''\n        });\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        return (\n            <Quiz\n                answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={this.state.quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n            />\n        );\n    }\n\n\n    renderResult() {\n        return <ResultStudent quizResult={this.state.result} callback3={this.callback3} />;\n    }\n\n    render() {\n        return (\n            <div className=\"Quiz-page\">\n                <div className=\"Quiz-header\">\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                    {/*<h2>React Quiz</h2>*/}\n                </div>\n\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n\n            </div>\n        );\n    }\n}\n\nexport default QuizPageStudent;\n","import React , { Component } from  'react';\nimport logo from './fig/logo.png';\nimport './App.css';\nimport {Button} from 'antd';\nimport MyUpload from './components/Upload'\nimport QuizPagePresenter from \"./components/QuizPagePresenter\";\nimport QuizPageStudent from \"./components/QuizPageStudent\";\nimport Slides from \"./components/Spectacle\"\nimport quizStatistic from \"./components/QuizStatistic\"\nimport {dimValueGetter} from \"echarts/src/component/marker/markerHelper\";\n// import {\n//     BrowserRouter,\n//     Switch,\n//     Route,\n//     Link\n//   } from \"react-router-dom\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            quiz:'',\n            rawString:'',\n            slidesFlag: 0,\n            quizFlag: 0,\n            studentFlag: 0\n        };\n\n    }\n\n    callback=(quiz)=>{\n        this.setState({quiz:quiz})\n        this.setState({slidesFlag : 1});\n    }\n\n    callback1=(slidesString)=>{\n        this.setState({slidesString:slidesString})\n    }\n\n    callback2=()=>{\n        this.setState({quizFlag : 1})\n    }\n\n    callback3=()=>(\n        this.setState({quizFlag : 0})\n    )\n\n    callback4=()=>(\n        this.setState({studentFlag : 1})\n    )\n\n    statisticButtonClicked=()=>{\n        // window.location.reload(\"/quizStatistic\");\n        window.location = \"/quizStatistic\"\n    }\n\n    renderStudentPage() {\n        console.log(this.state.quiz)\n        return (\n            <div>\n                {this.state.quizFlag ? <QuizPageStudent questions={this.state.quiz} callback3={this.callback3}/> : <Slides callback2={this.callback2} slidesString={this.state.slidesString}/>}\n            </div>\n\n            // <Slides />\n            // <QuizPagePresenter\n            // questions={this.state.quiz}\n            // />\n        );\n    }\n\n    renderPresenterPage() {\n        return (\n            <div>\n                {this.state.quizFlag ? <QuizPagePresenter questions={this.state.quiz} callback3={this.callback3}/> : <Slides callback2={this.callback2} slidesString={this.state.slidesString}/>}\n            </div>\n\n            // <Slides />\n            // <QuizPagePresenter\n            // questions={this.state.quiz}\n            // />\n        );\n    }\n\n    renderUploadPage = () => {\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n\n                    <MyUpload callback={this.callback} callback1={this.callback1} callback4={this.callback4}/>\n                    {/*<a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">*/}\n                    {/*    Learn QuizHero*/}\n                    {/*</a>*/}\n                </header>\n\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.slidesFlag ? (this.state.studentFlag ? this.renderStudentPage() : this.renderPresenterPage()) : this.renderUploadPage()}\n            \n                {/* <BrowserRouter>\n       <div>\n         <Route path=\"/\" component={App}>\n           <Route path=\"/quizStatistic\" component={QuizStatisticPage}/>\n         </Route>\n      </div>\n    </BrowserRouter> */}\n    </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f45975d0.png\";"],"sourceRoot":""}