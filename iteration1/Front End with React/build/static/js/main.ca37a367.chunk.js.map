{"version":3,"sources":["logo.svg","upload.js","marked.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","require","name","action","headers","authorization","marpit","Marpit","themeSet","default","add","MyUpload","state","file","result","beforeUpload","fileList","console","log","setState","onChange","info","status","message","success","error","onPreview","readFile","then","convertText","Promise","resolve","reject","reader","FileReader","readAsText","onload","e","this","onerror","render","html","css","filestring","bind","type","React","Component","InputFileReader","src","value","handleClick","inputFileChanged","refs","input_reader","click","window","target","files","self","r","readAsDataURL","alert","accept","capture","multiple","height","width","onClick","ref","Array","isArray","join","style","display","defaultProps","App","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ca37a367.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit'\nconst fs = require('fs');\n// const fs = require('fs');\nconst props = {\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n\n\n};\n\nconst marpit = new Marpit()\n// 2. Add theme CSS\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `\nmarpit.themeSet.default = marpit.themeSet.add(theme)\n\n\nclass MyUpload extends React.Component{\n    constructor(props) {\n        super(props);\n        this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n    state = {\n        file:\"\",\n        result:\"\"\n    }\n\n    beforeUpload = (file,fileList) => {\n        console.log(\"FILEEE\",file);\n        this.setState({\n            file:file\n        });\n    }\n    onChange = (info) => {\n        // console.log(\"file!!!:\",info.file)\n\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            // this.convertFile();\n            console.log(info.file.name);\n            message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n            console.log(info.file.name);\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    }\n\n    onPreview = () => {\n        this.readFile(this.state.file).then(this.convertText);\n    }\n\n    readFile=(file)=>{\n        return new Promise(function (resolve, reject) {\n            const reader = new FileReader();\n            console.log(\"1\");\n            reader.readAsText(file);\n            console.log(\"2\")\n            reader.onload = function (e) {\n                // let content = e.target.result;\n                resolve(this.result);\n                console.log(\"3\");\n                // console.log(content);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n\n    convertText=(result)=> {\n        console.log(result)\n        // 3. Render markdown\n        const {html, css} = marpit.render(result);\n        // 4. Use output in your HTML\n        let filestring = `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n        console.log(filestring)\n        ;\n        this.setState({\n            result: filestring\n        },);\n    }\n\n    render(){\n\n        return(\n            <div>\n                <Upload\n                    onChange={this.onChange}\n                    beforeUpload={this.beforeUpload}\n                    onPreview={this.onPreview}\n                    {...props}>\n\n                    <Button>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n\n                </Upload>\n\n                <div>\n                    {this.state.result}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MyUpload;","// test.js\n\nimport React , { Component } from 'react';\nimport PropTypes from 'prop-types';\nclass InputFileReader extends Component{\n    constructor(){\n        super();\n        this.state = {\n            src: '',\n            value: ''\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.inputFileChanged = this.inputFileChanged.bind(this);\n    };\n    handleClick(){\n        let input = this.refs.input_reader;\n        input.click();\n    };\n    inputFileChanged(e){\n        if(window.FileReader){\n            let file = e.target.files[0], reader = new FileReader(), self = this;\n            reader.onload = function(r){\n                self.setState({\n                    src: r.target.result\n                });\n            }\n            reader.readAsDataURL(file);\n            self.setState({value:reader});\n        }\n        else {\n            alert('Soryy, your browser does\\'nt support for preview');\n        }\n    }\n    render(){\n        const { accept, capture, multiple } = this.props, { src, value } = this.state;\n        return(\n            <div>\n                <img src={src} height={80} width={80}/>\n                <button onClick={this.handleClick}>Upload</button>\n                <input type=\"file\" ref=\"input_reader\" accept={Array.isArray(accept) ? accept.join(',') : accept} multiple={multiple} capture={capture} style={{display:'none'}} onChange={this.inputFileChanged}/>\n            </div>\n        );\n    }\n}\n\nInputFileReader.defaultProps = {\n    accept: '.md',\n    capture: true,\n    multiple: false\n}\n\nInputFileReader.propTypes = {\n    accept: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.array\n    ]),\n    capture: PropTypes.bool,\n    multiple: PropTypes.bool\n}\nexport default InputFileReader;\n\n// import React, { Component } from 'react'\n// import ReactFileReader from 'react-file-reader';\n//\n// class Test extends Component {\n//     constructor() {\n//         super();\n//         this.state = {\n//             file : \"\"\n//         }\n//     }\n//\n//\n//     handleFiles = files => {\n//         this.setState({\n//             file: files\n//         })\n//         console.log(this.state.file)\n//     }\n//     render() {\n//         return(\n//             <div className=\"files\">\n//                 <ReactFileReader handleFiles={this.handleFiles}>\n//                     <button className='btn'>Upload</button>\n//                 </ReactFileReader>\n//\n//                 <p>Read</p>\n//                 <iframe src={this.state.file} frameBorder=\"0\" height=\"400\" width=\"100%\" />\n//             </div>\n//         )\n//     }\n// }\n\n// import marked from 'marked'\n//\n// const md = '### test'\n//\n// marked.setOptions({ // marked 设置\n//     renderer: new marked.Renderer(),\n//     gfm: true,\n//     tables: true,\n//     breaks: true,\n//     pedantic: false,\n//     sanitize: false,\n//     smartLists: true,\n//     smartypants: false\n// })\n//\n// class Test extends Component {\n//     render () {\n//         const strHtml = marked(md)\n//         return (\n//             <div>\n//                 <div>\n//                     {strHtml}\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// export default Test","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyUpload from '../src/upload'\nimport Convert from '../src/marp'\nimport InputFileReader from '../src/marked'\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>Please upload the markdown file</div>\n          <MyUpload/>\n          {/*<InputFileReader/>*/}\n        </header>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}