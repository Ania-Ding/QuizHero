{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n/**\n * Marpit collect plugin.\n *\n * Collect parsed tokens per slide and comments except marked as used for\n * internally. These will store to lastSlideTokens and lastComments member of\n * Marpit instance. It would use in the returned object from\n * {@link Marpit#render}.\n *\n * @alias module:markdown/collect\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction collect(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.push('marpit_collect', state => {\n    if (state.inlineMode) return;\n    marpit.lastComments = [];\n    marpit.lastSlideTokens = [];\n    let currentPage;\n    let pageIdx = -1;\n\n    const collectComment = token => {\n      if (currentPage >= 0 && !(token.meta && token.meta.marpitCommentParsed !== undefined)) marpit.lastComments[currentPage].push(token.content);\n    };\n\n    const collectable = () => currentPage >= 0 && marpit.lastSlideTokens[currentPage] !== undefined;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        pageIdx += 1;\n        currentPage = pageIdx;\n\n        if (marpit.lastSlideTokens[currentPage] === undefined) {\n          marpit.lastSlideTokens[currentPage] = [token];\n          marpit.lastComments[currentPage] = [];\n        }\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n        currentPage = undefined;\n      } else {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n\n        if (token.type === 'marpit_comment') {\n          collectComment(token);\n        } else if (token.type === 'inline') {\n          for (const t of token.children) if (t.type === 'marpit_comment') collectComment(t);\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(collect);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/collect.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","collect","md","marpit","core","ruler","push","state","inlineMode","lastComments","lastSlideTokens","currentPage","pageIdx","collectComment","token","meta","marpitCommentParsed","undefined","content","collectable","tokens","marpitSlideElement","type","t","children","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;;AAEA;;;;;;;;;;;;;AAWA,SAASE,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,QAAM;AACJC,IAAAA;AADI,MAEFD,EAFJ;AAGAA,EAAAA,EAAE,CAACE,IAAH,CAAQC,KAAR,CAAcC,IAAd,CAAmB,gBAAnB,EAAqCC,KAAK,IAAI;AAC5C,QAAIA,KAAK,CAACC,UAAV,EAAsB;AACtBL,IAAAA,MAAM,CAACM,YAAP,GAAsB,EAAtB;AACAN,IAAAA,MAAM,CAACO,eAAP,GAAyB,EAAzB;AACA,QAAIC,WAAJ;AACA,QAAIC,OAAO,GAAG,CAAC,CAAf;;AAEA,UAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,UAAIH,WAAW,IAAI,CAAf,IAAoB,EAAEG,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,mBAAX,KAAmCC,SAAnD,CAAxB,EAAuFd,MAAM,CAACM,YAAP,CAAoBE,WAApB,EAAiCL,IAAjC,CAAsCQ,KAAK,CAACI,OAA5C;AACxF,KAFD;;AAIA,UAAMC,WAAW,GAAG,MAAMR,WAAW,IAAI,CAAf,IAAoBR,MAAM,CAACO,eAAP,CAAuBC,WAAvB,MAAwCM,SAAtF;;AAEA,SAAK,MAAMH,KAAX,IAAoBP,KAAK,CAACa,MAA1B,EAAkC;AAChC,UAAIN,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWM,kBAAX,KAAkC,CAApD,EAAuD;AACrDT,QAAAA,OAAO,IAAI,CAAX;AACAD,QAAAA,WAAW,GAAGC,OAAd;;AAEA,YAAIT,MAAM,CAACO,eAAP,CAAuBC,WAAvB,MAAwCM,SAA5C,EAAuD;AACrDd,UAAAA,MAAM,CAACO,eAAP,CAAuBC,WAAvB,IAAsC,CAACG,KAAD,CAAtC;AACAX,UAAAA,MAAM,CAACM,YAAP,CAAoBE,WAApB,IAAmC,EAAnC;AACD;AACF,OARD,MAQO,IAAIG,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWM,kBAAX,KAAkC,CAAC,CAArD,EAAwD;AAC7D,YAAIF,WAAW,EAAf,EAAmBhB,MAAM,CAACO,eAAP,CAAuBC,WAAvB,EAAoCL,IAApC,CAAyCQ,KAAzC;AACnBH,QAAAA,WAAW,GAAGM,SAAd;AACD,OAHM,MAGA;AACL,YAAIE,WAAW,EAAf,EAAmBhB,MAAM,CAACO,eAAP,CAAuBC,WAAvB,EAAoCL,IAApC,CAAyCQ,KAAzC;;AAEnB,YAAIA,KAAK,CAACQ,IAAN,KAAe,gBAAnB,EAAqC;AACnCT,UAAAA,cAAc,CAACC,KAAD,CAAd;AACD,SAFD,MAEO,IAAIA,KAAK,CAACQ,IAAN,KAAe,QAAnB,EAA6B;AAClC,eAAK,MAAMC,CAAX,IAAgBT,KAAK,CAACU,QAAtB,EAAgC,IAAID,CAAC,CAACD,IAAF,KAAW,gBAAf,EAAiCT,cAAc,CAACU,CAAD,CAAd;AAClE;AACF;AACF;AACF,GAnCD;AAoCD;;AAED,IAAIE,QAAQ,GAAG,CAAC,GAAG7B,OAAO,CAACD,OAAZ,EAAqBM,OAArB,CAAf;;AAEAR,OAAO,CAACE,OAAR,GAAkB8B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\n\n/**\n * Marpit collect plugin.\n *\n * Collect parsed tokens per slide and comments except marked as used for\n * internally. These will store to lastSlideTokens and lastComments member of\n * Marpit instance. It would use in the returned object from\n * {@link Marpit#render}.\n *\n * @alias module:markdown/collect\n * @param {MarkdownIt} md markdown-it instance.\n */\nfunction collect(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.push('marpit_collect', state => {\n    if (state.inlineMode) return;\n    marpit.lastComments = [];\n    marpit.lastSlideTokens = [];\n    let currentPage;\n    let pageIdx = -1;\n\n    const collectComment = token => {\n      if (currentPage >= 0 && !(token.meta && token.meta.marpitCommentParsed !== undefined)) marpit.lastComments[currentPage].push(token.content);\n    };\n\n    const collectable = () => currentPage >= 0 && marpit.lastSlideTokens[currentPage] !== undefined;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        pageIdx += 1;\n        currentPage = pageIdx;\n\n        if (marpit.lastSlideTokens[currentPage] === undefined) {\n          marpit.lastSlideTokens[currentPage] = [token];\n          marpit.lastComments[currentPage] = [];\n        }\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n        currentPage = undefined;\n      } else {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n\n        if (token.type === 'marpit_comment') {\n          collectComment(token);\n        } else if (token.type === 'inline') {\n          for (const t of token.children) if (t.type === 'marpit_comment') collectComment(t);\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(collect);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}