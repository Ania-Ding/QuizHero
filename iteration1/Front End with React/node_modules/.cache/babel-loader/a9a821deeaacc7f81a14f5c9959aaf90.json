{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _wrap_array = _interopRequireDefault(require(\"../../helpers/wrap_array\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nconst buildSelector = elms => elms.map(e => {\n  const classes = new Set((e.class || '').split(/\\s+/).filter(c => c));\n  let element = [e.tag, ...classes].join('.');\n  if (e.id) element += `#${e.id}`;\n  return element;\n}).join(' > ');\n/**\n * Marpit PostCSS pseudo selector replace plugin.\n *\n * Replace `:marpit-container` and `:marpit-slide` pseudo selector into\n * container element(s).\n *\n * @alias module:postcss/pseudo_selector/replace\n * @param {Element|Element[]} [elements] Container elements\n * @param {Element|Element[]} [slideElements={ tag: 'section' }] Slide elements\n */\n\n\nconst plugin = _postcss.default.plugin('marpit-postcss-pseudo-selector-replace', (elements, slideElements = {\n  tag: 'section'\n}) => {\n  const container = buildSelector([...(0, _wrap_array.default)(elements)]);\n  const section = buildSelector([...(0, _wrap_array.default)(slideElements)]);\n  return css => css.walkRules(rule => {\n    rule.selectors = rule.selectors.map(selector => selector.replace(/:marpit-container(?![\\w-])/g, container).replace(/:marpit-slide(?![\\w-])/g, section).replace(/^\\s*>\\s*/, ''));\n  });\n});\n\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/postcss/pseudo_selector/replace.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_wrap_array","obj","__esModule","buildSelector","elms","map","e","classes","Set","class","split","filter","c","element","tag","join","id","plugin","elements","slideElements","container","section","css","walkRules","rule","selectors","selector","replace","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,0BAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;AAE/F;;;AACA,MAAME,aAAa,GAAGC,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,CAAC,IAAI;AAC1C,QAAMC,OAAO,GAAG,IAAIC,GAAJ,CAAQ,CAACF,CAAC,CAACG,KAAF,IAAW,EAAZ,EAAgBC,KAAhB,CAAsB,KAAtB,EAA6BC,MAA7B,CAAoCC,CAAC,IAAIA,CAAzC,CAAR,CAAhB;AACA,MAAIC,OAAO,GAAG,CAACP,CAAC,CAACQ,GAAH,EAAQ,GAAGP,OAAX,EAAoBQ,IAApB,CAAyB,GAAzB,CAAd;AACA,MAAIT,CAAC,CAACU,EAAN,EAAUH,OAAO,IAAK,IAAGP,CAAC,CAACU,EAAG,EAApB;AACV,SAAOH,OAAP;AACD,CAL6B,EAK3BE,IAL2B,CAKtB,KALsB,CAA9B;AAMA;;;;;;;;;;;;AAYA,MAAME,MAAM,GAAGpB,QAAQ,CAACD,OAAT,CAAiBqB,MAAjB,CAAwB,wCAAxB,EAAkE,CAACC,QAAD,EAAWC,aAAa,GAAG;AAC1GL,EAAAA,GAAG,EAAE;AADqG,CAA3B,KAE3E;AACJ,QAAMM,SAAS,GAAGjB,aAAa,CAAC,CAAC,GAAG,CAAC,GAAGH,WAAW,CAACJ,OAAhB,EAAyBsB,QAAzB,CAAJ,CAAD,CAA/B;AACA,QAAMG,OAAO,GAAGlB,aAAa,CAAC,CAAC,GAAG,CAAC,GAAGH,WAAW,CAACJ,OAAhB,EAAyBuB,aAAzB,CAAJ,CAAD,CAA7B;AACA,SAAOG,GAAG,IAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAI;AAClCA,IAAAA,IAAI,CAACC,SAAL,GAAiBD,IAAI,CAACC,SAAL,CAAepB,GAAf,CAAmBqB,QAAQ,IAAIA,QAAQ,CAACC,OAAT,CAAiB,6BAAjB,EAAgDP,SAAhD,EAA2DO,OAA3D,CAAmE,yBAAnE,EAA8FN,OAA9F,EAAuGM,OAAvG,CAA+G,UAA/G,EAA2H,EAA3H,CAA/B,CAAjB;AACD,GAFa,CAAd;AAGD,CARc,CAAf;;AAUA,IAAIC,QAAQ,GAAGX,MAAf;AACAvB,OAAO,CAACE,OAAR,GAAkBgC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _wrap_array = _interopRequireDefault(require(\"../../helpers/wrap_array\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst buildSelector = elms => elms.map(e => {\n  const classes = new Set((e.class || '').split(/\\s+/).filter(c => c));\n  let element = [e.tag, ...classes].join('.');\n  if (e.id) element += `#${e.id}`;\n  return element;\n}).join(' > ');\n/**\n * Marpit PostCSS pseudo selector replace plugin.\n *\n * Replace `:marpit-container` and `:marpit-slide` pseudo selector into\n * container element(s).\n *\n * @alias module:postcss/pseudo_selector/replace\n * @param {Element|Element[]} [elements] Container elements\n * @param {Element|Element[]} [slideElements={ tag: 'section' }] Slide elements\n */\n\n\nconst plugin = _postcss.default.plugin('marpit-postcss-pseudo-selector-replace', (elements, slideElements = {\n  tag: 'section'\n}) => {\n  const container = buildSelector([...(0, _wrap_array.default)(elements)]);\n  const section = buildSelector([...(0, _wrap_array.default)(slideElements)]);\n  return css => css.walkRules(rule => {\n    rule.selectors = rule.selectors.map(selector => selector.replace(/:marpit-container(?![\\w-])/g, container).replace(/:marpit-slide(?![\\w-])/g, section).replace(/^\\s*>\\s*/, ''));\n  });\n});\n\nvar _default = plugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}