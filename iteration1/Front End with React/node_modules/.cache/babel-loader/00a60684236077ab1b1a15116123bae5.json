{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n/**\n * Marpit PostCSS import replace plugin.\n *\n * Replace parsed `@import` / `@import-theme` rules.\n *\n * Please see {@link module:postcss/import/parse} about the specification of\n * each syntax.\n *\n * @alias module:postcss/import/replace\n * @param {ThemeSet} themeSet ThemeSet instance.\n */\n\n\nvar plugin = _postcss.default.plugin('marpit-postcss-import-replace', function (themeSet) {\n  var importedThemes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return (0, _postcss.default)([_parse.default, function (css) {\n    var prepends = [];\n    css.walk(function (node) {\n      var name = node.marpitImportParse;\n\n      if (name) {\n        var theme = themeSet.get(name);\n\n        if (theme) {\n          if (importedThemes.includes(name)) throw new Error(\"Circular \\\"\".concat(name, \"\\\" theme import is detected.\"));\n          var processed = (0, _postcss.default)([plugin(themeSet, [].concat(_toConsumableArray(importedThemes), [name]))]).process(theme.css);\n\n          if (node.name === 'import') {\n            node.replaceWith(processed.root);\n          } else {\n            node.remove();\n            prepends.unshift(processed.root);\n          }\n        }\n      }\n    });\n\n    for (var _i = 0, _prepends = prepends; _i < _prepends.length; _i++) {\n      var root = _prepends[_i];\n      css.first.before(root);\n    }\n  }]);\n});\n\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/postcss/import/replace.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_parse","obj","__esModule","plugin","themeSet","importedThemes","css","prepends","walk","node","name","marpitImportParse","theme","get","includes","Error","processed","process","replaceWith","root","remove","unshift","first","before","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;;AAEA,IAAIC,MAAM,GAAGF,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;AAE/F;;AAEA;;;;;;;;;;;;;AAWA,IAAME,MAAM,GAAGN,QAAQ,CAACD,OAAT,CAAiBO,MAAjB,CAAwB,+BAAxB,EAAyD,UAACC,QAAD;AAAA,MAAWC,cAAX,uEAA4B,EAA5B;AAAA,SAAmC,CAAC,GAAGR,QAAQ,CAACD,OAAb,EAAsB,CAACI,MAAM,CAACJ,OAAR,EAAiB,UAAAU,GAAG,EAAI;AACvJ,QAAMC,QAAQ,GAAG,EAAjB;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,UAAAC,IAAI,EAAI;AACf,UAAMC,IAAI,GAAGD,IAAI,CAACE,iBAAlB;;AAEA,UAAID,IAAJ,EAAU;AACR,YAAME,KAAK,GAAGR,QAAQ,CAACS,GAAT,CAAaH,IAAb,CAAd;;AAEA,YAAIE,KAAJ,EAAW;AACT,cAAIP,cAAc,CAACS,QAAf,CAAwBJ,IAAxB,CAAJ,EAAmC,MAAM,IAAIK,KAAJ,sBAAuBL,IAAvB,kCAAN;AACnC,cAAMM,SAAS,GAAG,CAAC,GAAGnB,QAAQ,CAACD,OAAb,EAAsB,CAACO,MAAM,CAACC,QAAD,+BAAeC,cAAf,IAA+BK,IAA/B,GAAP,CAAtB,EAAqEO,OAArE,CAA6EL,KAAK,CAACN,GAAnF,CAAlB;;AAEA,cAAIG,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AAC1BD,YAAAA,IAAI,CAACS,WAAL,CAAiBF,SAAS,CAACG,IAA3B;AACD,WAFD,MAEO;AACLV,YAAAA,IAAI,CAACW,MAAL;AACAb,YAAAA,QAAQ,CAACc,OAAT,CAAiBL,SAAS,CAACG,IAA3B;AACD;AACF;AACF;AACF,KAlBD;;AAoBA,iCAAmBZ,QAAnB;AAAK,UAAMY,IAAI,gBAAV;AAAwBb,MAAAA,GAAG,CAACgB,KAAJ,CAAUC,MAAV,CAAiBJ,IAAjB;AAA7B;AACD,GAvBgI,CAAtB,CAAnC;AAAA,CAAzD,CAAf;;AAyBA,IAAIK,QAAQ,GAAGrB,MAAf;AACAT,OAAO,CAACE,OAAR,GAAkB4B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\n\n/**\n * Marpit PostCSS import replace plugin.\n *\n * Replace parsed `@import` / `@import-theme` rules.\n *\n * Please see {@link module:postcss/import/parse} about the specification of\n * each syntax.\n *\n * @alias module:postcss/import/replace\n * @param {ThemeSet} themeSet ThemeSet instance.\n */\nconst plugin = _postcss.default.plugin('marpit-postcss-import-replace', (themeSet, importedThemes = []) => (0, _postcss.default)([_parse.default, css => {\n  const prepends = [];\n  css.walk(node => {\n    const name = node.marpitImportParse;\n\n    if (name) {\n      const theme = themeSet.get(name);\n\n      if (theme) {\n        if (importedThemes.includes(name)) throw new Error(`Circular \"${name}\" theme import is detected.`);\n        const processed = (0, _postcss.default)([plugin(themeSet, [...importedThemes, name])]).process(theme.css);\n\n        if (node.name === 'import') {\n          node.replaceWith(processed.root);\n        } else {\n          node.remove();\n          prepends.unshift(processed.root);\n        }\n      }\n    }\n  });\n\n  for (const root of prepends) css.first.before(root);\n}]));\n\nvar _default = plugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}