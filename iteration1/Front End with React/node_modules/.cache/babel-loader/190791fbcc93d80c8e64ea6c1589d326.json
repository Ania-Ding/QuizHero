{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jsYaml = _interopRequireWildcard(require(\"js-yaml\"));\n\nvar _directives = _interopRequireDefault(require(\"./directives\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/** @module */\n\n\nconst createPatterns = keys => {\n  const set = new Set();\n\n  for (const k of keys) {\n    const normalized = k.replace(/[.*+?^=!:${}()|[\\]\\\\/]/g, '\\\\$&');\n    set.add(normalized);\n    set.add(`\"${normalized}\"`);\n    set.add(`'${normalized}'`);\n  }\n\n  return [...set.values()];\n};\n\nconst yamlSpecialChars = `[\"'{|>~&*`;\n\nfunction parse(text) {\n  try {\n    const obj = _jsYaml.default.safeLoad(text, {\n      schema: _jsYaml.FAILSAFE_SCHEMA\n    });\n\n    if (obj === null || typeof obj !== 'object') return false;\n    return obj;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction convertLoose(text, looseDirectives) {\n  const keyPattern = `[_$]?(?:${createPatterns(looseDirectives).join('|')})`;\n  const looseMatcher = new RegExp(`^(${keyPattern}\\\\s*:)(.+)$`);\n  let normalized = '';\n\n  for (const line of text.split(/\\r?\\n/)) normalized += `${line.replace(looseMatcher, (original, prop, value) => {\n    const trimmed = value.trim();\n    if (trimmed.length === 0 || yamlSpecialChars.includes(trimmed[0])) return original;\n    const spaceLength = value.length - value.trimLeft().length;\n    const spaces = value.substring(0, spaceLength);\n    return `${prop}${spaces}\"${trimmed.split('\"').join('\\\\\"')}\"`;\n  })}\\n`;\n\n  return normalized.trim();\n}\n/**\n * Parse text as YAML by using js-yaml's FAILSAFE_SCHEMA.\n *\n * @alias module:markdown/directives/yaml\n * @param {String} text Target text.\n * @param {boolean|string[]} [looseDirectives=false] By setting `true`, it try\n *     to parse as loose YAML only in defined Marpit built-in directives. You\n *     may also extend target keys for loose parsing by passing an array of\n *     strings.\n * @returns {Object|false} Return parse result, or `false` when failed to parse.\n */\n\n\nvar _default = (text, looseDirectives = false) => parse(looseDirectives ? convertLoose(text, [..._directives.default, ...(Array.isArray(looseDirectives) ? looseDirectives : [])]) : text);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/directives/yaml.js"],"names":["Object","defineProperty","exports","value","default","_jsYaml","_interopRequireWildcard","require","_directives","_interopRequireDefault","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","createPatterns","keys","Set","k","normalized","replace","add","values","yamlSpecialChars","parse","text","safeLoad","schema","FAILSAFE_SCHEMA","e","convertLoose","looseDirectives","keyPattern","join","looseMatcher","RegExp","line","split","original","prop","trimmed","trim","length","includes","spaceLength","trimLeft","spaces","substring","_default","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jsYaml = _interopRequireWildcard(require(\"js-yaml\"));\n\nvar _directives = _interopRequireDefault(require(\"./directives\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n/** @module */\nconst createPatterns = keys => {\n  const set = new Set();\n\n  for (const k of keys) {\n    const normalized = k.replace(/[.*+?^=!:${}()|[\\]\\\\/]/g, '\\\\$&');\n    set.add(normalized);\n    set.add(`\"${normalized}\"`);\n    set.add(`'${normalized}'`);\n  }\n\n  return [...set.values()];\n};\n\nconst yamlSpecialChars = `[\"'{|>~&*`;\n\nfunction parse(text) {\n  try {\n    const obj = _jsYaml.default.safeLoad(text, {\n      schema: _jsYaml.FAILSAFE_SCHEMA\n    });\n\n    if (obj === null || typeof obj !== 'object') return false;\n    return obj;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction convertLoose(text, looseDirectives) {\n  const keyPattern = `[_$]?(?:${createPatterns(looseDirectives).join('|')})`;\n  const looseMatcher = new RegExp(`^(${keyPattern}\\\\s*:)(.+)$`);\n  let normalized = '';\n\n  for (const line of text.split(/\\r?\\n/)) normalized += `${line.replace(looseMatcher, (original, prop, value) => {\n    const trimmed = value.trim();\n    if (trimmed.length === 0 || yamlSpecialChars.includes(trimmed[0])) return original;\n    const spaceLength = value.length - value.trimLeft().length;\n    const spaces = value.substring(0, spaceLength);\n    return `${prop}${spaces}\"${trimmed.split('\"').join('\\\\\"')}\"`;\n  })}\\n`;\n\n  return normalized.trim();\n}\n/**\n * Parse text as YAML by using js-yaml's FAILSAFE_SCHEMA.\n *\n * @alias module:markdown/directives/yaml\n * @param {String} text Target text.\n * @param {boolean|string[]} [looseDirectives=false] By setting `true`, it try\n *     to parse as loose YAML only in defined Marpit built-in directives. You\n *     may also extend target keys for loose parsing by passing an array of\n *     strings.\n * @returns {Object|false} Return parse result, or `false` when failed to parse.\n */\n\n\nvar _default = (text, looseDirectives = false) => parse(looseDirectives ? convertLoose(text, [..._directives.default, ...(Array.isArray(looseDirectives) ? looseDirectives : [])]) : text);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}