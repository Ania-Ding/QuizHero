{"ast":null,"code":"var _jsxFileName = \"/Users/yaozixuan/Document/OOSE/my-app/src/upload.js\";\nimport { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit';\nimport axios from 'axios';\n\nconst fs = require('fs'); // const fs = require('fs');\n\n\nconst props = {\n  name: 'file',\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  headers: {\n    authorization: 'authorization-text'\n  }\n};\nconst marpit = new Marpit(); // 2. Add theme CSS\n\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `;\nmarpit.themeSet.default = marpit.themeSet.add(theme);\n\nclass MyUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: \"\",\n      result: \"\"\n    };\n\n    this.beforeUpload = (file, fileList) => {\n      console.log(\"FILEEE\", file);\n      this.setState({\n        file: file\n      });\n    };\n\n    this.onChange = info => {\n      // console.log(\"file!!!:\",info.file)\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n\n      if (info.file.status === 'done') {\n        // this.convertFile();\n        console.log(info.file.name);\n        message.success(`${info.file.name} file uploaded successfully`);\n      } else if (info.file.status === 'error') {\n        console.log(info.file.name);\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    };\n\n    this.onDownload = file => {\n      this.readFile(this.state.file).then(this.convertText);\n      const formData = {\n        fileContent: {\n          file\n        },\n        userName: 'admin'\n      };\n      axios.post(\"/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(() => {\n        console.log(\"upload success\");\n      }).catch(error => {\n        console.log(\"error\");\n      });\n    };\n\n    this.readFile = file => {\n      return new Promise(function (resolve, reject) {\n        const reader = new FileReader();\n        console.log(\"1\");\n        reader.readAsText(file);\n        console.log(\"2\");\n\n        reader.onload = function (e) {\n          // let content = e.target.result;\n          resolve(this.result);\n          console.log(\"3\"); // console.log(content);\n        };\n\n        reader.onerror = function (e) {\n          reject(e);\n        };\n      });\n    };\n\n    this.convertText = result => {\n      console.log(result); // 3. Render markdown\n\n      const {\n        html,\n        css\n      } = marpit.render(result); // 4. Use output in your HTML\n\n      let filestring = `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `;\n      console.log(filestring);\n      this.setState({\n        result: filestring\n      });\n\n      function fakeClick(obj) {\n        var ev = document.createEvent(\"MouseEvents\");\n        ev.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        obj.dispatchEvent(ev);\n      }\n\n      function exportRaw(name, data) {\n        var urlObject = window.URL || window.webkitURL || window;\n        var export_blob = new Blob([data]);\n        var save_link = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\");\n        save_link.href = urlObject.createObjectURL(export_blob);\n        save_link.download = name;\n        fakeClick(save_link);\n      }\n\n      exportRaw('filename.html', filestring);\n    };\n\n    this.beforeUpload.bind = this.beforeUpload.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({\n      onChange: this.onChange,\n      beforeUpload: this.beforeUpload,\n      onDownload: this.onDownload\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), \" Click to Upload\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.result));\n  }\n\n}\n\nexport default MyUpload;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/src/upload.js"],"names":["Upload","message","Button","Icon","React","Marpit","axios","fs","require","props","name","action","headers","authorization","marpit","theme","themeSet","default","add","MyUpload","Component","constructor","state","file","result","beforeUpload","fileList","console","log","setState","onChange","info","status","success","error","onDownload","readFile","then","convertText","formData","fileContent","userName","post","catch","Promise","resolve","reject","reader","FileReader","readAsText","onload","e","onerror","html","css","render","filestring","fakeClick","obj","ev","document","createEvent","initMouseEvent","window","dispatchEvent","exportRaw","data","urlObject","URL","webkitURL","export_blob","Blob","save_link","createElementNS","href","createObjectURL","download","bind"],"mappings":"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","sourcesContent":["import { Upload, message, Button, Icon } from 'antd';\nimport React from \"react\";\nimport Marpit from '@marp-team/marpit'\nimport axios from 'axios'\n\nconst fs = require('fs');\n// const fs = require('fs');\nconst props = {\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n\n\n};\n\nconst marpit = new Marpit()\n// 2. Add theme CSS\nconst theme = `\n            /* @theme example */\n\n            section {\n              background-color: #369;\n              color: #fff;\n              font-size: 30px;\n              padding: 40px;\n            }\n\n        h1,\n        h2 {\n          text-align: center;\n          margin: 0;\n        }\n\n        h1 {\n          color: #8cf;\n        }\n        `\nmarpit.themeSet.default = marpit.themeSet.add(theme)\n\n\nclass MyUpload extends React.Component{\n    constructor(props) {\n        super(props);\n        this.beforeUpload.bind = this.beforeUpload.bind(this);\n\n    }\n    state = {\n        file:\"\",\n        result:\"\"\n    }\n\n    beforeUpload = (file,fileList) => {\n        console.log(\"FILEEE\",file);\n        this.setState({\n            file:file\n        });\n    }\n    onChange = (info) => {\n        // console.log(\"file!!!:\",info.file)\n\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            // this.convertFile();\n            console.log(info.file.name);\n            message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n            console.log(info.file.name);\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    }\n\n    onDownload = (file) => {\n        this.readFile(this.state.file).then(this.convertText);\n\n        const formData = {\n            fileContent: { file },\n            userName: 'admin'\n        }\n        axios\n            .post(\"/\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n            .then(() => {\n                console.log(\"upload success\");\n            })\n            .catch((error) => {\n                console.log(\"error\")\n            });\n    }\n\n    readFile=(file)=>{\n        return new Promise(function (resolve, reject) {\n            const reader = new FileReader();\n            console.log(\"1\");\n            reader.readAsText(file);\n            console.log(\"2\")\n            reader.onload = function (e) {\n                // let content = e.target.result;\n                resolve(this.result);\n                console.log(\"3\");\n                // console.log(content);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n\n    convertText=(result)=> {\n        console.log(result)\n        // 3. Render markdown\n        const {html, css} = marpit.render(result);\n        // 4. Use output in your HTML\n        let filestring = `\n            <!DOCTYPE html>\n            <html><body>\n              <style>${css}</style>\n              ${html}\n            </body></html>\n            `\n        console.log(filestring)\n        ;\n        this.setState({\n            result: filestring\n        },);\n\n        function fakeClick(obj) {\n            var ev = document.createEvent(\"MouseEvents\");\n            ev.initMouseEvent(\"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            obj.dispatchEvent(ev);\n        }\n        function exportRaw(name, data) {\n            var urlObject = window.URL || window.webkitURL || window;\n            var export_blob = new Blob([data]);\n            var save_link = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n            save_link.href = urlObject.createObjectURL(export_blob);\n            save_link.download = name;\n            fakeClick(save_link);\n        }\n        exportRaw('filename.html', filestring)\n    }\n\n    render(){\n\n        return(\n            <div>\n                <Upload\n                    onChange={this.onChange}\n                    beforeUpload={this.beforeUpload}\n                    onDownload={this.onDownload}\n                    {...props}>\n\n                    <Button>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n\n                </Upload>\n\n                <div>\n                    {this.state.result}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MyUpload;"]},"metadata":{},"sourceType":"module"}