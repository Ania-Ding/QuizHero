{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _markdownItFrontMatter = _interopRequireDefault(require(\"markdown-it-front-matter\"));\n\nvar _yaml = _interopRequireDefault(require(\"./yaml\"));\n\nvar directives = _interopRequireWildcard(require(\"./directives\"));\n\nvar _comment = require(\"../comment\");\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar isDirectiveComment = function isDirectiveComment(token) {\n  return token.type === 'marpit_comment' && token.meta.marpitParsedDirectives;\n};\n/**\n * Parse Marpit directives and store result to the slide token meta.\n *\n * Marpit comment plugin ans slide plugin requires already loaded to\n * markdown-it instance.\n *\n * @alias module:markdown/directives/parse\n * @param {MarkdownIt} md markdown-it instance.\n * @param {Object} [opts]\n * @param {boolean} [opts.frontMatter=true] Switch feature to support YAML\n *     front-matter. If true, you can use Jekyll style directive setting to the\n *     first page.\n */\n\n\nfunction parse(md) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var marpit = md.marpit;\n\n  var applyBuiltinDirectives = function applyBuiltinDirectives(newProps, builtinDirectives) {\n    var ret = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(newProps); _i < _Object$keys.length; _i++) {\n      var prop = _Object$keys[_i];\n\n      if (builtinDirectives[prop]) {\n        ret = _objectSpread({}, ret, {}, builtinDirectives[prop](newProps[prop], marpit));\n      } else {\n        ret[prop] = newProps[prop];\n      }\n    }\n\n    return ret;\n  }; // Front-matter support\n\n\n  var frontMatter = opts.frontMatter === undefined ? true : !!opts.frontMatter;\n  var frontMatterObject = {};\n\n  if (frontMatter) {\n    md.core.ruler.before('block', 'marpit_directives_front_matter', function (state) {\n      frontMatterObject = {};\n      if (!state.inlineMode) marpit.lastGlobalDirectives = {};\n    });\n    md.use(_markdownItFrontMatter.default, function (fm) {\n      frontMatterObject.text = fm;\n      var parsed = (0, _yaml.default)(fm, marpit.options.looseYAML ? [].concat(_toConsumableArray(Object.keys(marpit.customDirectives.global)), _toConsumableArray(Object.keys(marpit.customDirectives.local))) : false);\n      if (parsed !== false) frontMatterObject.yaml = parsed;\n    });\n  } // Parse global directives\n\n\n  md.core.ruler.after('inline', 'marpit_directives_global_parse', function (state) {\n    if (state.inlineMode) return;\n    var globalDirectives = {};\n\n    var applyDirectives = function applyDirectives(obj) {\n      var recognized = false;\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(obj); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n\n        if (directives.globals[key]) {\n          recognized = true;\n          globalDirectives = _objectSpread({}, globalDirectives, {}, directives.globals[key](obj[key], marpit));\n        } else if (marpit.customDirectives.global[key]) {\n          recognized = true;\n          globalDirectives = _objectSpread({}, globalDirectives, {}, applyBuiltinDirectives(marpit.customDirectives.global[key](obj[key], marpit), directives.globals));\n        }\n      }\n\n      return recognized;\n    };\n\n    if (frontMatterObject.yaml) applyDirectives(frontMatterObject.yaml);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = state.tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n\n        if (isDirectiveComment(token) && applyDirectives(token.meta.marpitParsedDirectives)) {\n          (0, _comment.markAsParsed)(token, 'directive');\n        } else if (token.type === 'inline') {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = token.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var t = _step2.value;\n              if (isDirectiveComment(t) && applyDirectives(t.meta.marpitParsedDirectives)) (0, _comment.markAsParsed)(t, 'directive');\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    marpit.lastGlobalDirectives = _objectSpread({}, globalDirectives);\n  }); // Parse local directives and apply meta to slide\n\n  md.core.ruler.after('marpit_slide', 'marpit_directives_parse', function (state) {\n    if (state.inlineMode) return;\n    var slides = [];\n    var cursor = {\n      slide: undefined,\n      local: {},\n      spot: {}\n    };\n\n    var applyDirectives = function applyDirectives(obj) {\n      var recognized = false;\n\n      for (var _i3 = 0, _Object$keys3 = Object.keys(obj); _i3 < _Object$keys3.length; _i3++) {\n        var key = _Object$keys3[_i3];\n\n        if (directives.locals[key]) {\n          recognized = true;\n          cursor.local = _objectSpread({}, cursor.local, {}, directives.locals[key](obj[key], marpit));\n        } else if (marpit.customDirectives.local[key]) {\n          recognized = true;\n          cursor.local = _objectSpread({}, cursor.local, {}, applyBuiltinDirectives(marpit.customDirectives.local[key](obj[key], marpit), directives.locals));\n        } // Spot directives\n        // (Apply local directive to only current slide by prefix \"_\")\n\n\n        if (key.startsWith('_')) {\n          var spotKey = key.slice(1);\n\n          if (directives.locals[spotKey]) {\n            recognized = true;\n            cursor.spot = _objectSpread({}, cursor.spot, {}, directives.locals[spotKey](obj[key], marpit));\n          } else if (marpit.customDirectives.local[spotKey]) {\n            recognized = true;\n            cursor.spot = _objectSpread({}, cursor.spot, {}, applyBuiltinDirectives(marpit.customDirectives.local[spotKey](obj[key], marpit), directives.locals));\n          }\n        }\n      }\n\n      return recognized;\n    };\n\n    if (frontMatterObject.yaml) applyDirectives(frontMatterObject.yaml);\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = state.tokens[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var token = _step3.value;\n\n        if (token.meta && token.meta.marpitSlideElement === 1) {\n          // Initialize Marpit directives meta\n          token.meta.marpitDirectives = {};\n          slides.push(token);\n          cursor.slide = token;\n        } else if (token.meta && token.meta.marpitSlideElement === -1) {\n          // Assign local and spot directives to meta\n          cursor.slide.meta.marpitDirectives = _objectSpread({}, cursor.slide.meta.marpitDirectives, {}, cursor.local, {}, cursor.spot);\n          cursor.spot = {};\n        } else if (isDirectiveComment(token) && applyDirectives(token.meta.marpitParsedDirectives)) {\n          (0, _comment.markAsParsed)(token, 'directive');\n        } else if (token.type === 'inline') {\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = token.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var t = _step4.value;\n              if (isDirectiveComment(t) && applyDirectives(t.meta.marpitParsedDirectives)) (0, _comment.markAsParsed)(t, 'directive');\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }\n      } // Assign global directives to meta\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    for (var _i4 = 0, _slides = slides; _i4 < _slides.length; _i4++) {\n      var _token = _slides[_i4];\n      _token.meta.marpitDirectives = _objectSpread({}, _token.meta.marpitDirectives, {}, marpit.lastGlobalDirectives);\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(parse);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/directives/parse.js"],"names":["Object","defineProperty","exports","value","default","_markdownItFrontMatter","_interopRequireDefault","require","_yaml","directives","_interopRequireWildcard","_comment","_plugin","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","isDirectiveComment","token","type","meta","marpitParsedDirectives","parse","md","opts","marpit","applyBuiltinDirectives","newProps","builtinDirectives","ret","prop","frontMatter","undefined","frontMatterObject","core","ruler","before","state","inlineMode","lastGlobalDirectives","use","fm","text","parsed","options","looseYAML","customDirectives","global","local","yaml","after","globalDirectives","applyDirectives","recognized","globals","tokens","markAsParsed","children","t","slides","cursor","slide","spot","locals","startsWith","spotKey","slice","marpitSlideElement","marpitDirectives","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _markdownItFrontMatter = _interopRequireDefault(require(\"markdown-it-front-matter\"));\n\nvar _yaml = _interopRequireDefault(require(\"./yaml\"));\n\nvar directives = _interopRequireWildcard(require(\"./directives\"));\n\nvar _comment = require(\"../comment\");\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst isDirectiveComment = token => token.type === 'marpit_comment' && token.meta.marpitParsedDirectives;\n/**\n * Parse Marpit directives and store result to the slide token meta.\n *\n * Marpit comment plugin ans slide plugin requires already loaded to\n * markdown-it instance.\n *\n * @alias module:markdown/directives/parse\n * @param {MarkdownIt} md markdown-it instance.\n * @param {Object} [opts]\n * @param {boolean} [opts.frontMatter=true] Switch feature to support YAML\n *     front-matter. If true, you can use Jekyll style directive setting to the\n *     first page.\n */\n\n\nfunction parse(md, opts = {}) {\n  const {\n    marpit\n  } = md;\n\n  const applyBuiltinDirectives = (newProps, builtinDirectives) => {\n    let ret = {};\n\n    for (const prop of Object.keys(newProps)) {\n      if (builtinDirectives[prop]) {\n        ret = _objectSpread({}, ret, {}, builtinDirectives[prop](newProps[prop], marpit));\n      } else {\n        ret[prop] = newProps[prop];\n      }\n    }\n\n    return ret;\n  }; // Front-matter support\n\n\n  const frontMatter = opts.frontMatter === undefined ? true : !!opts.frontMatter;\n  let frontMatterObject = {};\n\n  if (frontMatter) {\n    md.core.ruler.before('block', 'marpit_directives_front_matter', state => {\n      frontMatterObject = {};\n      if (!state.inlineMode) marpit.lastGlobalDirectives = {};\n    });\n    md.use(_markdownItFrontMatter.default, fm => {\n      frontMatterObject.text = fm;\n      const parsed = (0, _yaml.default)(fm, marpit.options.looseYAML ? [...Object.keys(marpit.customDirectives.global), ...Object.keys(marpit.customDirectives.local)] : false);\n      if (parsed !== false) frontMatterObject.yaml = parsed;\n    });\n  } // Parse global directives\n\n\n  md.core.ruler.after('inline', 'marpit_directives_global_parse', state => {\n    if (state.inlineMode) return;\n    let globalDirectives = {};\n\n    const applyDirectives = obj => {\n      let recognized = false;\n\n      for (const key of Object.keys(obj)) {\n        if (directives.globals[key]) {\n          recognized = true;\n          globalDirectives = _objectSpread({}, globalDirectives, {}, directives.globals[key](obj[key], marpit));\n        } else if (marpit.customDirectives.global[key]) {\n          recognized = true;\n          globalDirectives = _objectSpread({}, globalDirectives, {}, applyBuiltinDirectives(marpit.customDirectives.global[key](obj[key], marpit), directives.globals));\n        }\n      }\n\n      return recognized;\n    };\n\n    if (frontMatterObject.yaml) applyDirectives(frontMatterObject.yaml);\n\n    for (const token of state.tokens) {\n      if (isDirectiveComment(token) && applyDirectives(token.meta.marpitParsedDirectives)) {\n        (0, _comment.markAsParsed)(token, 'directive');\n      } else if (token.type === 'inline') {\n        for (const t of token.children) {\n          if (isDirectiveComment(t) && applyDirectives(t.meta.marpitParsedDirectives)) (0, _comment.markAsParsed)(t, 'directive');\n        }\n      }\n    }\n\n    marpit.lastGlobalDirectives = _objectSpread({}, globalDirectives);\n  }); // Parse local directives and apply meta to slide\n\n  md.core.ruler.after('marpit_slide', 'marpit_directives_parse', state => {\n    if (state.inlineMode) return;\n    const slides = [];\n    const cursor = {\n      slide: undefined,\n      local: {},\n      spot: {}\n    };\n\n    const applyDirectives = obj => {\n      let recognized = false;\n\n      for (const key of Object.keys(obj)) {\n        if (directives.locals[key]) {\n          recognized = true;\n          cursor.local = _objectSpread({}, cursor.local, {}, directives.locals[key](obj[key], marpit));\n        } else if (marpit.customDirectives.local[key]) {\n          recognized = true;\n          cursor.local = _objectSpread({}, cursor.local, {}, applyBuiltinDirectives(marpit.customDirectives.local[key](obj[key], marpit), directives.locals));\n        } // Spot directives\n        // (Apply local directive to only current slide by prefix \"_\")\n\n\n        if (key.startsWith('_')) {\n          const spotKey = key.slice(1);\n\n          if (directives.locals[spotKey]) {\n            recognized = true;\n            cursor.spot = _objectSpread({}, cursor.spot, {}, directives.locals[spotKey](obj[key], marpit));\n          } else if (marpit.customDirectives.local[spotKey]) {\n            recognized = true;\n            cursor.spot = _objectSpread({}, cursor.spot, {}, applyBuiltinDirectives(marpit.customDirectives.local[spotKey](obj[key], marpit), directives.locals));\n          }\n        }\n      }\n\n      return recognized;\n    };\n\n    if (frontMatterObject.yaml) applyDirectives(frontMatterObject.yaml);\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        // Initialize Marpit directives meta\n        token.meta.marpitDirectives = {};\n        slides.push(token);\n        cursor.slide = token;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        // Assign local and spot directives to meta\n        cursor.slide.meta.marpitDirectives = _objectSpread({}, cursor.slide.meta.marpitDirectives, {}, cursor.local, {}, cursor.spot);\n        cursor.spot = {};\n      } else if (isDirectiveComment(token) && applyDirectives(token.meta.marpitParsedDirectives)) {\n        (0, _comment.markAsParsed)(token, 'directive');\n      } else if (token.type === 'inline') {\n        for (const t of token.children) {\n          if (isDirectiveComment(t) && applyDirectives(t.meta.marpitParsedDirectives)) (0, _comment.markAsParsed)(t, 'directive');\n        }\n      }\n    } // Assign global directives to meta\n\n\n    for (const token of slides) token.meta.marpitDirectives = _objectSpread({}, token.meta.marpitDirectives, {}, marpit.lastGlobalDirectives);\n  });\n}\n\nvar _default = (0, _plugin.default)(parse);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}