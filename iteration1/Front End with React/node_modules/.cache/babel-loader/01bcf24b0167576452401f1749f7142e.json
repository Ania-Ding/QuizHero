{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/** @module */\n\n/**\n * Split array into multiple arrays by specified condition.\n *\n * @alias module:helpers/split\n * @param {Array} arr Target array.\n * @param {splitCallback} func Callback to split array.\n * @param {boolean} [keepSplitedValue=false] Keep splited value. The split\n *     point is before the matched value.\n * @returns {Array[]} Splited array.\n */\n\nfunction split(arr, func) {\n  var keepSplitedValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var ret = [[]];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      /**\n       * Return true at the split point.\n       *\n       * @callback splitCallback\n       * @param {*} value\n       */\n      if (func(value)) {\n        ret.push(keepSplitedValue ? [value] : []);\n      } else {\n        ret[ret.length - 1].push(value);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\nvar _default = split;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/helpers/split.js"],"names":["Object","defineProperty","exports","value","default","split","arr","func","keepSplitedValue","ret","push","length","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;AAEA;;;;;;;;;;;AAUA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,IAApB,EAAoD;AAAA,MAA1BC,gBAA0B,uEAAP,KAAO;AAClD,MAAMC,GAAG,GAAG,CAAC,EAAD,CAAZ;AADkD;AAAA;AAAA;;AAAA;AAGlD,yBAAoBH,GAApB,8HAAyB;AAAA,UAAdH,KAAc;;AACvB;;;;;;AAMA,UAAII,IAAI,CAACJ,KAAD,CAAR,EAAiB;AACfM,QAAAA,GAAG,CAACC,IAAJ,CAASF,gBAAgB,GAAG,CAACL,KAAD,CAAH,GAAa,EAAtC;AACD,OAFD,MAEO;AACLM,QAAAA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,CAAoBD,IAApB,CAAyBP,KAAzB;AACD;AACF;AAfiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBlD,SAAOM,GAAP;AACD;;AAED,IAAIG,QAAQ,GAAGP,KAAf;AACAH,OAAO,CAACE,OAAR,GAAkBQ,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** @module */\n\n/**\n * Split array into multiple arrays by specified condition.\n *\n * @alias module:helpers/split\n * @param {Array} arr Target array.\n * @param {splitCallback} func Callback to split array.\n * @param {boolean} [keepSplitedValue=false] Keep splited value. The split\n *     point is before the matched value.\n * @returns {Array[]} Splited array.\n */\nfunction split(arr, func, keepSplitedValue = false) {\n  const ret = [[]];\n\n  for (const value of arr) {\n    /**\n     * Return true at the split point.\n     *\n     * @callback splitCallback\n     * @param {*} value\n     */\n    if (func(value)) {\n      ret.push(keepSplitedValue ? [value] : []);\n    } else {\n      ret[ret.length - 1].push(value);\n    }\n  }\n\n  return ret;\n}\n\nvar _default = split;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}