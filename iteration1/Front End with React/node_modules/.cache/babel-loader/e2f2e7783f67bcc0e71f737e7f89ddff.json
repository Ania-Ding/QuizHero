{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/yaozixuan/Document/OOSE/my-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nvar bgSizeKeywords = {\n  auto: 'auto',\n  contain: 'contain',\n  cover: 'cover',\n  fit: 'contain'\n};\nvar splitSizeMatcher = /^(left|right)(?::((?:\\d*\\.)?\\d+%))?$/;\n/**\n * Marpit background image parse plugin.\n *\n * Parse Marpit's image token and mark as background image when the alternate\n * text includes `bg`. The marked images will not show as the regular image.\n *\n * Furthermore, it parses additional keywords needed for background image.\n *\n * @alias module:markdown/background_image/parse\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction backgroundImageParse(md) {\n  md.inline.ruler2.after('marpit_parse_image', 'marpit_background_image', function (_ref) {\n    var tokens = _ref.tokens;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var t = _step.value;\n\n        if (t.type === 'image') {\n          var marpitImage = t.meta.marpitImage;\n\n          if (t.meta.marpitImage.options.includes('bg')) {\n            marpitImage.background = true;\n            t.hidden = true;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = marpitImage.options[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var opt = _step2.value;\n                // Background size keyword\n                if (bgSizeKeywords[opt]) marpitImage.backgroundSize = bgSizeKeywords[opt]; // Split background keyword\n\n                var matched = opt.match(splitSizeMatcher);\n\n                if (matched) {\n                  var _matched = _slicedToArray(matched, 3),\n                      splitSide = _matched[1],\n                      splitSize = _matched[2];\n\n                  marpitImage.backgroundSplit = splitSide;\n                  marpitImage.backgroundSplitSize = splitSize;\n                } // Background aligned direction\n\n\n                if (opt === 'vertical' || opt === 'horizontal') marpitImage.backgroundDirection = opt;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageParse);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/background_image/parse.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","bgSizeKeywords","auto","contain","cover","fit","splitSizeMatcher","backgroundImageParse","md","inline","ruler2","after","tokens","t","type","marpitImage","meta","options","includes","background","hidden","opt","backgroundSize","matched","match","splitSide","splitSize","backgroundSplit","backgroundSplitSize","backgroundDirection","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;;;AACA,IAAME,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,OAAO,EAAE,SAFY;AAGrBC,EAAAA,KAAK,EAAE,OAHc;AAIrBC,EAAAA,GAAG,EAAE;AAJgB,CAAvB;AAMA,IAAMC,gBAAgB,GAAG,sCAAzB;AACA;;;;;;;;;;;;AAYA,SAASC,oBAAT,CAA8BC,EAA9B,EAAkC;AAChCA,EAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiBC,KAAjB,CAAuB,oBAAvB,EAA6C,yBAA7C,EAAwE,gBAElE;AAAA,QADJC,MACI,QADJA,MACI;AAAA;AAAA;AAAA;;AAAA;AACJ,2BAAgBA,MAAhB,8HAAwB;AAAA,YAAbC,CAAa;;AACtB,YAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AAAA,cAEpBC,WAFoB,GAGlBF,CAAC,CAACG,IAHgB,CAEpBD,WAFoB;;AAKtB,cAAIF,CAAC,CAACG,IAAF,CAAOD,WAAP,CAAmBE,OAAnB,CAA2BC,QAA3B,CAAoC,IAApC,CAAJ,EAA+C;AAC7CH,YAAAA,WAAW,CAACI,UAAZ,GAAyB,IAAzB;AACAN,YAAAA,CAAC,CAACO,MAAF,GAAW,IAAX;AAF6C;AAAA;AAAA;;AAAA;AAI7C,oCAAkBL,WAAW,CAACE,OAA9B,mIAAuC;AAAA,oBAA5BI,GAA4B;AACrC;AACA,oBAAIpB,cAAc,CAACoB,GAAD,CAAlB,EAAyBN,WAAW,CAACO,cAAZ,GAA6BrB,cAAc,CAACoB,GAAD,CAA3C,CAFY,CAEsC;;AAE3E,oBAAME,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUlB,gBAAV,CAAhB;;AAEA,oBAAIiB,OAAJ,EAAa;AAAA,gDACsBA,OADtB;AAAA,sBACFE,SADE;AAAA,sBACSC,SADT;;AAEXX,kBAAAA,WAAW,CAACY,eAAZ,GAA8BF,SAA9B;AACAV,kBAAAA,WAAW,CAACa,mBAAZ,GAAkCF,SAAlC;AACD,iBAVoC,CAUnC;;;AAGF,oBAAIL,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,YAAlC,EAAgDN,WAAW,CAACc,mBAAZ,GAAkCR,GAAlC;AACjD;AAlB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmB9C;AACF;AACF;AA5BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BL,GA/BD;AAgCD;;AAED,IAAIS,QAAQ,GAAG,CAAC,GAAGlC,OAAO,CAACD,OAAZ,EAAqBY,oBAArB,CAAf;;AAEAd,OAAO,CAACE,OAAR,GAAkBmC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst bgSizeKeywords = {\n  auto: 'auto',\n  contain: 'contain',\n  cover: 'cover',\n  fit: 'contain'\n};\nconst splitSizeMatcher = /^(left|right)(?::((?:\\d*\\.)?\\d+%))?$/;\n/**\n * Marpit background image parse plugin.\n *\n * Parse Marpit's image token and mark as background image when the alternate\n * text includes `bg`. The marked images will not show as the regular image.\n *\n * Furthermore, it parses additional keywords needed for background image.\n *\n * @alias module:markdown/background_image/parse\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction backgroundImageParse(md) {\n  md.inline.ruler2.after('marpit_parse_image', 'marpit_background_image', ({\n    tokens\n  }) => {\n    for (const t of tokens) {\n      if (t.type === 'image') {\n        const {\n          marpitImage\n        } = t.meta;\n\n        if (t.meta.marpitImage.options.includes('bg')) {\n          marpitImage.background = true;\n          t.hidden = true;\n\n          for (const opt of marpitImage.options) {\n            // Background size keyword\n            if (bgSizeKeywords[opt]) marpitImage.backgroundSize = bgSizeKeywords[opt]; // Split background keyword\n\n            const matched = opt.match(splitSizeMatcher);\n\n            if (matched) {\n              const [, splitSide, splitSize] = matched;\n              marpitImage.backgroundSplit = splitSide;\n              marpitImage.backgroundSplitSize = splitSize;\n            } // Background aligned direction\n\n\n            if (opt === 'vertical' || opt === 'horizontal') marpitImage.backgroundDirection = opt;\n          }\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageParse);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}