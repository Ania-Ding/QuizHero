{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nconst bgSizeKeywords = {\n  auto: 'auto',\n  contain: 'contain',\n  cover: 'cover',\n  fit: 'contain'\n};\nconst splitSizeMatcher = /^(left|right)(?::((?:\\d*\\.)?\\d+%))?$/;\n/**\n * Marpit background image parse plugin.\n *\n * Parse Marpit's image token and mark as background image when the alternate\n * text includes `bg`. The marked images will not show as the regular image.\n *\n * Furthermore, it parses additional keywords needed for background image.\n *\n * @alias module:markdown/background_image/parse\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction backgroundImageParse(md) {\n  md.inline.ruler2.after('marpit_parse_image', 'marpit_background_image', ({\n    tokens\n  }) => {\n    for (const t of tokens) {\n      if (t.type === 'image') {\n        const {\n          marpitImage\n        } = t.meta;\n\n        if (t.meta.marpitImage.options.includes('bg')) {\n          marpitImage.background = true;\n          t.hidden = true;\n\n          for (const opt of marpitImage.options) {\n            // Background size keyword\n            if (bgSizeKeywords[opt]) marpitImage.backgroundSize = bgSizeKeywords[opt]; // Split background keyword\n\n            const matched = opt.match(splitSizeMatcher);\n\n            if (matched) {\n              const [, splitSide, splitSize] = matched;\n              marpitImage.backgroundSplit = splitSide;\n              marpitImage.backgroundSplitSize = splitSize;\n            } // Background aligned direction\n\n\n            if (opt === 'vertical' || opt === 'horizontal') marpitImage.backgroundDirection = opt;\n          }\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageParse);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/background_image/parse.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","bgSizeKeywords","auto","contain","cover","fit","splitSizeMatcher","backgroundImageParse","md","inline","ruler2","after","tokens","t","type","marpitImage","meta","options","includes","background","hidden","opt","backgroundSize","matched","match","splitSide","splitSize","backgroundSplit","backgroundSplitSize","backgroundDirection","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;;;AACA,MAAME,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,OAAO,EAAE,SAFY;AAGrBC,EAAAA,KAAK,EAAE,OAHc;AAIrBC,EAAAA,GAAG,EAAE;AAJgB,CAAvB;AAMA,MAAMC,gBAAgB,GAAG,sCAAzB;AACA;;;;;;;;;;;;AAYA,SAASC,oBAAT,CAA8BC,EAA9B,EAAkC;AAChCA,EAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiBC,KAAjB,CAAuB,oBAAvB,EAA6C,yBAA7C,EAAwE,CAAC;AACvEC,IAAAA;AADuE,GAAD,KAElE;AACJ,SAAK,MAAMC,CAAX,IAAgBD,MAAhB,EAAwB;AACtB,UAAIC,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AACtB,cAAM;AACJC,UAAAA;AADI,YAEFF,CAAC,CAACG,IAFN;;AAIA,YAAIH,CAAC,CAACG,IAAF,CAAOD,WAAP,CAAmBE,OAAnB,CAA2BC,QAA3B,CAAoC,IAApC,CAAJ,EAA+C;AAC7CH,UAAAA,WAAW,CAACI,UAAZ,GAAyB,IAAzB;AACAN,UAAAA,CAAC,CAACO,MAAF,GAAW,IAAX;;AAEA,eAAK,MAAMC,GAAX,IAAkBN,WAAW,CAACE,OAA9B,EAAuC;AACrC;AACA,gBAAIhB,cAAc,CAACoB,GAAD,CAAlB,EAAyBN,WAAW,CAACO,cAAZ,GAA6BrB,cAAc,CAACoB,GAAD,CAA3C,CAFY,CAEsC;;AAE3E,kBAAME,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUlB,gBAAV,CAAhB;;AAEA,gBAAIiB,OAAJ,EAAa;AACX,oBAAM,GAAGE,SAAH,EAAcC,SAAd,IAA2BH,OAAjC;AACAR,cAAAA,WAAW,CAACY,eAAZ,GAA8BF,SAA9B;AACAV,cAAAA,WAAW,CAACa,mBAAZ,GAAkCF,SAAlC;AACD,aAVoC,CAUnC;;;AAGF,gBAAIL,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,YAAlC,EAAgDN,WAAW,CAACc,mBAAZ,GAAkCR,GAAlC;AACjD;AACF;AACF;AACF;AACF,GA/BD;AAgCD;;AAED,IAAIS,QAAQ,GAAG,CAAC,GAAGlC,OAAO,CAACD,OAAZ,EAAqBY,oBAArB,CAAf;;AAEAd,OAAO,CAACE,OAAR,GAAkBmC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst bgSizeKeywords = {\n  auto: 'auto',\n  contain: 'contain',\n  cover: 'cover',\n  fit: 'contain'\n};\nconst splitSizeMatcher = /^(left|right)(?::((?:\\d*\\.)?\\d+%))?$/;\n/**\n * Marpit background image parse plugin.\n *\n * Parse Marpit's image token and mark as background image when the alternate\n * text includes `bg`. The marked images will not show as the regular image.\n *\n * Furthermore, it parses additional keywords needed for background image.\n *\n * @alias module:markdown/background_image/parse\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction backgroundImageParse(md) {\n  md.inline.ruler2.after('marpit_parse_image', 'marpit_background_image', ({\n    tokens\n  }) => {\n    for (const t of tokens) {\n      if (t.type === 'image') {\n        const {\n          marpitImage\n        } = t.meta;\n\n        if (t.meta.marpitImage.options.includes('bg')) {\n          marpitImage.background = true;\n          t.hidden = true;\n\n          for (const opt of marpitImage.options) {\n            // Background size keyword\n            if (bgSizeKeywords[opt]) marpitImage.backgroundSize = bgSizeKeywords[opt]; // Split background keyword\n\n            const matched = opt.match(splitSizeMatcher);\n\n            if (matched) {\n              const [, splitSide, splitSize] = matched;\n              marpitImage.backgroundSplit = splitSide;\n              marpitImage.backgroundSplitSize = splitSize;\n            } // Background aligned direction\n\n\n            if (opt === 'vertical' || opt === 'horizontal') marpitImage.backgroundDirection = opt;\n          }\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageParse);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}