{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Marpit background image apply plugin.\n *\n * Apply parsed meta for background image / color into directives of each page.\n *\n * When inline SVG is enabled, it will reshape meta for advanced process instead\n * of converting to directives.\n *\n * @alias module:markdown/background_image/apply\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction backgroundImageApply(md) {\n  md.core.ruler.after('marpit_inline_svg', 'marpit_apply_background_image', ({\n    inlineMode,\n    tokens\n  }) => {\n    if (inlineMode) return;\n    let current = {};\n\n    for (const tb of tokens) {\n      if (tb.type === 'marpit_slide_open') current.open = tb;\n      if (tb.type === 'marpit_inline_svg_content_open') current.svgContent = tb;\n\n      if (tb.type === 'marpit_slide_close') {\n        if (current.images && current.images.length > 0) {\n          if (current.svgContent) {\n            // Reshape meta for advanced background\n            current.svgContent.meta = _objectSpread({}, current.svgContent.meta || {}, {\n              marpitBackground: {\n                direction: current.direction,\n                height: current.svgContent.attrGet('height'),\n                images: current.images,\n                open: current.open,\n                split: current.split,\n                splitSize: current.splitSize,\n                width: current.svgContent.attrGet('width')\n              }\n            });\n          } else {\n            // Apply simple CSS background\n            const img = current.images[current.images.length - 1];\n            current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n              backgroundImage: `url(\"${img.url}\")`\n            });\n            if (img.size) current.open.meta.marpitDirectives.backgroundSize = img.size;\n          }\n        }\n\n        current = {};\n      } // Collect parsed inline image meta\n\n\n      if (current.open && tb.type === 'inline') for (const t of tb.children) {\n        if (t.type === 'image') {\n          const {\n            background,\n            backgroundDirection,\n            backgroundSize,\n            backgroundSplit,\n            backgroundSplitSize,\n            color,\n            filter,\n            height,\n            size,\n            url,\n            width\n          } = t.meta.marpitImage;\n\n          if (background && !url.match(/^\\s*$/)) {\n            if (color) {\n              // Background color\n              current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n                backgroundColor: color\n              });\n            } else {\n              // Background image\n              current.images = [...(current.images || []), {\n                filter,\n                height,\n                size: (() => {\n                  const s = size || backgroundSize || undefined;\n                  return !['contain', 'cover'].includes(s) && (width || height) ? `${width || s || 'auto'} ${height || s || 'auto'}` : s;\n                })(),\n                url,\n                width\n              }];\n            }\n          }\n\n          if (backgroundDirection) current.direction = backgroundDirection;\n          if (backgroundSplit) current.split = backgroundSplit;\n          if (backgroundSplitSize) current.splitSize = backgroundSplitSize;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageApply);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/background_image/apply.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","backgroundImageApply","md","core","ruler","after","inlineMode","tokens","current","tb","type","open","svgContent","images","meta","marpitBackground","direction","height","attrGet","split","splitSize","width","img","marpitDirectives","backgroundImage","url","size","backgroundSize","t","children","background","backgroundDirection","backgroundSplit","backgroundSplitSize","color","marpitImage","match","backgroundColor","s","undefined","includes","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Marpit background image apply plugin.\n *\n * Apply parsed meta for background image / color into directives of each page.\n *\n * When inline SVG is enabled, it will reshape meta for advanced process instead\n * of converting to directives.\n *\n * @alias module:markdown/background_image/apply\n * @param {MarkdownIt} md markdown-it instance.\n */\nfunction backgroundImageApply(md) {\n  md.core.ruler.after('marpit_inline_svg', 'marpit_apply_background_image', ({\n    inlineMode,\n    tokens\n  }) => {\n    if (inlineMode) return;\n    let current = {};\n\n    for (const tb of tokens) {\n      if (tb.type === 'marpit_slide_open') current.open = tb;\n      if (tb.type === 'marpit_inline_svg_content_open') current.svgContent = tb;\n\n      if (tb.type === 'marpit_slide_close') {\n        if (current.images && current.images.length > 0) {\n          if (current.svgContent) {\n            // Reshape meta for advanced background\n            current.svgContent.meta = _objectSpread({}, current.svgContent.meta || {}, {\n              marpitBackground: {\n                direction: current.direction,\n                height: current.svgContent.attrGet('height'),\n                images: current.images,\n                open: current.open,\n                split: current.split,\n                splitSize: current.splitSize,\n                width: current.svgContent.attrGet('width')\n              }\n            });\n          } else {\n            // Apply simple CSS background\n            const img = current.images[current.images.length - 1];\n            current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n              backgroundImage: `url(\"${img.url}\")`\n            });\n            if (img.size) current.open.meta.marpitDirectives.backgroundSize = img.size;\n          }\n        }\n\n        current = {};\n      } // Collect parsed inline image meta\n\n\n      if (current.open && tb.type === 'inline') for (const t of tb.children) {\n        if (t.type === 'image') {\n          const {\n            background,\n            backgroundDirection,\n            backgroundSize,\n            backgroundSplit,\n            backgroundSplitSize,\n            color,\n            filter,\n            height,\n            size,\n            url,\n            width\n          } = t.meta.marpitImage;\n\n          if (background && !url.match(/^\\s*$/)) {\n            if (color) {\n              // Background color\n              current.open.meta.marpitDirectives = _objectSpread({}, current.open.meta.marpitDirectives || {}, {\n                backgroundColor: color\n              });\n            } else {\n              // Background image\n              current.images = [...(current.images || []), {\n                filter,\n                height,\n                size: (() => {\n                  const s = size || backgroundSize || undefined;\n                  return !['contain', 'cover'].includes(s) && (width || height) ? `${width || s || 'auto'} ${height || s || 'auto'}` : s;\n                })(),\n                url,\n                width\n              }];\n            }\n          }\n\n          if (backgroundDirection) current.direction = backgroundDirection;\n          if (backgroundSplit) current.split = backgroundSplit;\n          if (backgroundSplitSize) current.splitSize = backgroundSplitSize;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(backgroundImageApply);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}