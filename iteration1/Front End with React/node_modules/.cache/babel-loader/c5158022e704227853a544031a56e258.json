{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./postcss/import/parse\"));\n\nvar _meta = _interopRequireDefault(require(\"./postcss/meta\"));\n\nvar _section_size = _interopRequireDefault(require(\"./postcss/section_size\"));\n\nvar _symbol = _interopRequireDefault(require(\"./theme/symbol\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst absoluteUnits = {\n  cm: v => v * 960 / 25.4,\n  in: v => v * 96,\n  mm: v => v * 96 / 25.4,\n  pc: v => v * 16,\n  pt: v => v * 4 / 3,\n  px: v => v\n};\n\nconst convertToPixel = value => {\n  if (typeof value !== 'string') return undefined;\n  const matched = value.match(/^(-?[.0-9]+)([a-z]+)$/i);\n  if (!matched) return undefined;\n  const [, num, unit] = matched;\n  const parsed = Number.parseFloat(num);\n  if (Number.isNaN(parsed)) return undefined;\n  const conv = absoluteUnits[unit];\n  return conv ? conv(parsed) : undefined;\n};\n\nconst memoizeProp = name => `${name}Memoized`;\n\nconst reservedMetaType = {\n  theme: String\n};\n/**\n * Marpit theme class.\n */\n\nclass Theme {\n  /**\n   * Create a Theme instance.\n   *\n   * You should use {@link Theme.fromCSS} unless there is some particular\n   * reason.\n   *\n   * @param {string} name The name of theme.\n   * @param {string} css The content of CSS.\n   * @hideconstructor\n   */\n  constructor(name, css) {\n    /**\n     * The name of theme.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The content of theme CSS.\n     * @type {string}\n     */\n\n    this.css = css;\n    /**\n     * Parsed metadata from CSS comments.\n     * @type {Object}\n     */\n\n    this.meta = Object.freeze({});\n    /**\n     * Parsed `@import` rules.\n     * @type {module:postcss/import/parse~ImportMeta[]}\n     */\n\n    this.importRules = [];\n    /**\n     * Slide width. It requires the absolute unit supported in CSS.\n     * @type {string}\n     */\n\n    this.width = undefined;\n    /**\n     * Slide height. It requires the absolute unit supported in CSS.\n     * @type {string}\n     */\n\n    this.height = undefined;\n    this.memoizeInit('width');\n    this.memoizeInit('height');\n  }\n  /**\n   * Create a Theme instance from Marpit theme CSS.\n   *\n   * @alias Theme.fromCSS\n   * @param {string} cssString The string of Marpit theme CSS. It requires\n   *     `@theme` meta comment.\n   * @param {Object} [opts]\n   * @param {Object} [opts.metaType] An object for defined types for metadata.\n   */\n\n\n  static fromCSS(cssString, opts = {}) {\n    const metaType = _objectSpread({}, opts.metaType || {}, {}, reservedMetaType);\n\n    const {\n      css,\n      result\n    } = (0, _postcss.default)([(0, _meta.default)({\n      metaType\n    }), _section_size.default, _parse.default]).process(cssString);\n    if (!opts[_symbol.default] && !result.marpitMeta.theme) throw new Error('Marpit theme CSS requires @theme meta.');\n    const theme = new Theme(result.marpitMeta.theme, css);\n    theme.importRules = [...result.marpitImport];\n    theme.meta = Object.freeze(_objectSpread({}, result.marpitMeta));\n    Object.assign(theme, _objectSpread({}, result.marpitSectionSize));\n    return Object.freeze(theme);\n  }\n  /**\n   * The converted width into pixel.\n   *\n   * @alias Theme#widthPixel\n   * @type {number}\n   * @readonly\n   */\n\n\n  get widthPixel() {\n    return this.memoize('width', convertToPixel);\n  }\n  /**\n   * The converted height into pixel.\n   *\n   * @alias Theme#heightPixel\n   * @type {number}\n   * @readonly\n   */\n\n\n  get heightPixel() {\n    return this.memoize('height', convertToPixel);\n  }\n  /** @private */\n\n\n  memoize(prop, func) {\n    if (this[memoizeProp(prop)].has(this[prop])) return this[memoizeProp(prop)].get(this[prop]);\n    const converted = func(this[prop]);\n    this[memoizeProp(prop)].set(this[prop], converted);\n    return converted;\n  }\n  /** @private */\n\n\n  memoizeInit(prop) {\n    if (!this[memoizeProp(prop)]) Object.defineProperty(this, memoizeProp(prop), {\n      value: new Map()\n    });\n  }\n\n}\n\nvar _default = Theme;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/node_modules/@marp-team/marpit/lib/theme.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_parse","_meta","_section_size","_symbol","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","absoluteUnits","cm","v","in","mm","pc","pt","px","convertToPixel","undefined","matched","match","num","unit","parsed","Number","parseFloat","isNaN","conv","memoizeProp","name","reservedMetaType","theme","String","Theme","constructor","css","meta","freeze","importRules","width","height","memoizeInit","fromCSS","cssString","opts","metaType","result","process","marpitMeta","Error","marpitImport","assign","marpitSectionSize","widthPixel","memoize","heightPixel","prop","func","has","get","converted","set","Map","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _parse = _interopRequireDefault(require(\"./postcss/import/parse\"));\n\nvar _meta = _interopRequireDefault(require(\"./postcss/meta\"));\n\nvar _section_size = _interopRequireDefault(require(\"./postcss/section_size\"));\n\nvar _symbol = _interopRequireDefault(require(\"./theme/symbol\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst absoluteUnits = {\n  cm: v => v * 960 / 25.4,\n  in: v => v * 96,\n  mm: v => v * 96 / 25.4,\n  pc: v => v * 16,\n  pt: v => v * 4 / 3,\n  px: v => v\n};\n\nconst convertToPixel = value => {\n  if (typeof value !== 'string') return undefined;\n  const matched = value.match(/^(-?[.0-9]+)([a-z]+)$/i);\n  if (!matched) return undefined;\n  const [, num, unit] = matched;\n  const parsed = Number.parseFloat(num);\n  if (Number.isNaN(parsed)) return undefined;\n  const conv = absoluteUnits[unit];\n  return conv ? conv(parsed) : undefined;\n};\n\nconst memoizeProp = name => `${name}Memoized`;\n\nconst reservedMetaType = {\n  theme: String\n};\n/**\n * Marpit theme class.\n */\n\nclass Theme {\n  /**\n   * Create a Theme instance.\n   *\n   * You should use {@link Theme.fromCSS} unless there is some particular\n   * reason.\n   *\n   * @param {string} name The name of theme.\n   * @param {string} css The content of CSS.\n   * @hideconstructor\n   */\n  constructor(name, css) {\n    /**\n     * The name of theme.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The content of theme CSS.\n     * @type {string}\n     */\n\n    this.css = css;\n    /**\n     * Parsed metadata from CSS comments.\n     * @type {Object}\n     */\n\n    this.meta = Object.freeze({});\n    /**\n     * Parsed `@import` rules.\n     * @type {module:postcss/import/parse~ImportMeta[]}\n     */\n\n    this.importRules = [];\n    /**\n     * Slide width. It requires the absolute unit supported in CSS.\n     * @type {string}\n     */\n\n    this.width = undefined;\n    /**\n     * Slide height. It requires the absolute unit supported in CSS.\n     * @type {string}\n     */\n\n    this.height = undefined;\n    this.memoizeInit('width');\n    this.memoizeInit('height');\n  }\n  /**\n   * Create a Theme instance from Marpit theme CSS.\n   *\n   * @alias Theme.fromCSS\n   * @param {string} cssString The string of Marpit theme CSS. It requires\n   *     `@theme` meta comment.\n   * @param {Object} [opts]\n   * @param {Object} [opts.metaType] An object for defined types for metadata.\n   */\n\n\n  static fromCSS(cssString, opts = {}) {\n    const metaType = _objectSpread({}, opts.metaType || {}, {}, reservedMetaType);\n\n    const {\n      css,\n      result\n    } = (0, _postcss.default)([(0, _meta.default)({\n      metaType\n    }), _section_size.default, _parse.default]).process(cssString);\n    if (!opts[_symbol.default] && !result.marpitMeta.theme) throw new Error('Marpit theme CSS requires @theme meta.');\n    const theme = new Theme(result.marpitMeta.theme, css);\n    theme.importRules = [...result.marpitImport];\n    theme.meta = Object.freeze(_objectSpread({}, result.marpitMeta));\n    Object.assign(theme, _objectSpread({}, result.marpitSectionSize));\n    return Object.freeze(theme);\n  }\n  /**\n   * The converted width into pixel.\n   *\n   * @alias Theme#widthPixel\n   * @type {number}\n   * @readonly\n   */\n\n\n  get widthPixel() {\n    return this.memoize('width', convertToPixel);\n  }\n  /**\n   * The converted height into pixel.\n   *\n   * @alias Theme#heightPixel\n   * @type {number}\n   * @readonly\n   */\n\n\n  get heightPixel() {\n    return this.memoize('height', convertToPixel);\n  }\n  /** @private */\n\n\n  memoize(prop, func) {\n    if (this[memoizeProp(prop)].has(this[prop])) return this[memoizeProp(prop)].get(this[prop]);\n    const converted = func(this[prop]);\n    this[memoizeProp(prop)].set(this[prop], converted);\n    return converted;\n  }\n  /** @private */\n\n\n  memoizeInit(prop) {\n    if (!this[memoizeProp(prop)]) Object.defineProperty(this, memoizeProp(prop), {\n      value: new Map()\n    });\n  }\n\n}\n\nvar _default = Theme;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}