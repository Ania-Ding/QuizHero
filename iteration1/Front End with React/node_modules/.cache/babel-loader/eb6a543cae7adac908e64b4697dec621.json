{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n\nconst fragmentedListMarkups = ['*', ')'];\n/**\n * Marpit fragment plugin.\n *\n * @alias module:markdown/fragment\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction fragment(md) {\n  // Fragmented list\n  md.core.ruler.after('marpit_directives_parse', 'marpit_fragment', state => {\n    if (state.inlineMode) return;\n\n    for (const token of state.tokens) {\n      if (token.type === 'list_item_open' && fragmentedListMarkups.includes(token.markup)) {\n        token.meta = token.meta || {};\n        token.meta.marpitFragment = true;\n      }\n    }\n  }); // Add data-marpit-fragment(s) attributes to token\n\n  md.core.ruler.after('marpit_fragment', 'marpit_apply_fragment', state => {\n    if (state.inlineMode) return;\n    const fragments = {\n      slide: undefined,\n      count: 0\n    };\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        fragments.slide = token;\n        fragments.count = 0;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (fragments.slide && fragments.count > 0) {\n          fragments.slide.attrSet('data-marpit-fragments', fragments.count);\n        }\n      } else if (token.meta && token.meta.marpitFragment) {\n        fragments.count += 1;\n        token.meta.marpitFragment = fragments.count;\n        token.attrSet('data-marpit-fragment', fragments.count);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(fragment);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/fragment.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","fragmentedListMarkups","fragment","md","core","ruler","after","state","inlineMode","token","tokens","type","includes","markup","meta","marpitFragment","fragments","slide","undefined","count","marpitSlideElement","attrSet","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;AAE/F;;;AACA,MAAME,qBAAqB,GAAG,CAAC,GAAD,EAAM,GAAN,CAA9B;AACA;;;;;;;AAOA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB;AACAA,EAAAA,EAAE,CAACC,IAAH,CAAQC,KAAR,CAAcC,KAAd,CAAoB,yBAApB,EAA+C,iBAA/C,EAAkEC,KAAK,IAAI;AACzE,QAAIA,KAAK,CAACC,UAAV,EAAsB;;AAEtB,SAAK,MAAMC,KAAX,IAAoBF,KAAK,CAACG,MAA1B,EAAkC;AAChC,UAAID,KAAK,CAACE,IAAN,KAAe,gBAAf,IAAmCV,qBAAqB,CAACW,QAAtB,CAA+BH,KAAK,CAACI,MAArC,CAAvC,EAAqF;AACnFJ,QAAAA,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACK,IAAN,IAAc,EAA3B;AACAL,QAAAA,KAAK,CAACK,IAAN,CAAWC,cAAX,GAA4B,IAA5B;AACD;AACF;AACF,GATD,EAFoB,CAWhB;;AAEJZ,EAAAA,EAAE,CAACC,IAAH,CAAQC,KAAR,CAAcC,KAAd,CAAoB,iBAApB,EAAuC,uBAAvC,EAAgEC,KAAK,IAAI;AACvE,QAAIA,KAAK,CAACC,UAAV,EAAsB;AACtB,UAAMQ,SAAS,GAAG;AAChBC,MAAAA,KAAK,EAAEC,SADS;AAEhBC,MAAAA,KAAK,EAAE;AAFS,KAAlB;;AAKA,SAAK,MAAMV,KAAX,IAAoBF,KAAK,CAACG,MAA1B,EAAkC;AAChC,UAAID,KAAK,CAACK,IAAN,IAAcL,KAAK,CAACK,IAAN,CAAWM,kBAAX,KAAkC,CAApD,EAAuD;AACrDJ,QAAAA,SAAS,CAACC,KAAV,GAAkBR,KAAlB;AACAO,QAAAA,SAAS,CAACG,KAAV,GAAkB,CAAlB;AACD,OAHD,MAGO,IAAIV,KAAK,CAACK,IAAN,IAAcL,KAAK,CAACK,IAAN,CAAWM,kBAAX,KAAkC,CAAC,CAArD,EAAwD;AAC7D,YAAIJ,SAAS,CAACC,KAAV,IAAmBD,SAAS,CAACG,KAAV,GAAkB,CAAzC,EAA4C;AAC1CH,UAAAA,SAAS,CAACC,KAAV,CAAgBI,OAAhB,CAAwB,uBAAxB,EAAiDL,SAAS,CAACG,KAA3D;AACD;AACF,OAJM,MAIA,IAAIV,KAAK,CAACK,IAAN,IAAcL,KAAK,CAACK,IAAN,CAAWC,cAA7B,EAA6C;AAClDC,QAAAA,SAAS,CAACG,KAAV,IAAmB,CAAnB;AACAV,QAAAA,KAAK,CAACK,IAAN,CAAWC,cAAX,GAA4BC,SAAS,CAACG,KAAtC;AACAV,QAAAA,KAAK,CAACY,OAAN,CAAc,sBAAd,EAAsCL,SAAS,CAACG,KAAhD;AACD;AACF;AACF,GArBD;AAsBD;;AAED,IAAIG,QAAQ,GAAG,CAAC,GAAG1B,OAAO,CAACD,OAAZ,EAAqBO,QAArB,CAAf;;AAEAT,OAAO,CAACE,OAAR,GAAkB2B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\nconst fragmentedListMarkups = ['*', ')'];\n/**\n * Marpit fragment plugin.\n *\n * @alias module:markdown/fragment\n * @param {MarkdownIt} md markdown-it instance.\n */\n\nfunction fragment(md) {\n  // Fragmented list\n  md.core.ruler.after('marpit_directives_parse', 'marpit_fragment', state => {\n    if (state.inlineMode) return;\n\n    for (const token of state.tokens) {\n      if (token.type === 'list_item_open' && fragmentedListMarkups.includes(token.markup)) {\n        token.meta = token.meta || {};\n        token.meta.marpitFragment = true;\n      }\n    }\n  }); // Add data-marpit-fragment(s) attributes to token\n\n  md.core.ruler.after('marpit_fragment', 'marpit_apply_fragment', state => {\n    if (state.inlineMode) return;\n    const fragments = {\n      slide: undefined,\n      count: 0\n    };\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        fragments.slide = token;\n        fragments.count = 0;\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (fragments.slide && fragments.count > 0) {\n          fragments.slide.attrSet('data-marpit-fragments', fragments.count);\n        }\n      } else if (token.meta && token.meta.marpitFragment) {\n        fragments.count += 1;\n        token.meta.marpitFragment = fragments.count;\n        token.attrSet('data-marpit-fragment', fragments.count);\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(fragment);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}