{"ast":null,"code":"// import Marpit from '@marp-team/marpit'\n// import fs from 'fs'\n// import React, {Component} from \"react\";\n// import {Button, Icon, message, Upload} from \"antd\";\n// import MyUpload from \"./upload\";\n// import marked from \"./marked\";\n//\n// // 1. Create instance (with options if you want)\n// const marpit = new Marpit()\n//\n// // 2. Add theme CSS\n// const theme = `\n// /* @theme example */\n//\n// section {\n//   background-color: #369;\n//   color: #fff;\n//   font-size: 30px;\n//   padding: 40px;\n// }\n//\n// h1,\n// h2 {\n//   text-align: center;\n//   margin: 0;\n// }\n//\n// h1 {\n//   color: #8cf;\n// }\n// `\n// marpit.themeSet.default = marpit.themeSet.add(theme)\n//\n// // 3. Render markdown\n// const markdown = `\n//\n// # Homework 1\n//\n// # Requirement Specification Document\n//\n// ## Problem Statement\n//\n// > Write a few sentences that describes the problem you are trying to solve. In other words, justify why this software project is needed.\n//\n// People sometimes lose their personal belongings somewhere on the campus. Currently, only important stuff like wallet found inside the library will be handed to the security. It is really hard for people who lose their belongings in other common areas to look for their belongings. It is also unclear who people should turn to when they pick up stuff on the campus. Therefore, a uniform Campus Lost & Found platform is needed.\n//\n//\n// ## Potential Clients\n//\n// > Who are affected by this problem (and would benefit from the proposed solution)? I.e. the potential users of the software you are going to build.\n//\n// Whoever loses or picks up items on homewood campus. It is also possible to extend this service to other campuses or universities.\n//\n//\n// ## Proposed Solution\n//\n// > Write a few sentences that describes how a software solution will solve the problem described above.\n//\n// Build a website for people on the campus to post item lost information and item picked up information, facilitating people to find their missing belongings.\n//\n// ## Functional Requirements\n//\n// > List the (functional) requirements that software needs to have in order to solve the problem stated above. It is useful to write the requirements in form of **User Stories** and group them into those that are essential (must have), and those which are non-essential (but nice to have).\n//\n//\n// ### Must have\n//\n// 1. As a person who lost items, I want to post some information about the item I lost: What is it? Where did I potentially lose it? When did I potentially lose it?, so that people who picked up the item can know whose item is it?\n// 2. As a person who lost items, I want to post my contact information, so that people who picked up the item can contact me and return it to me.\n// 3. As a person who picked up items, I want to post some information about the item I picked up: What is it? Where did I pick it up? When did I pick it up? and my contact information, so that the owner of this item can reach out to me.\n// 4. As a user (either lost or picked up items), I want to browse the posts, so that I can find the owner or the person who picked up my item.\n// 5. As a user who posts a post, I want to close the post so that it will not bother others anymore after my issue is solved.\n//\n//\n// ### Nice to have\n//\n// 1. As a user who wants to post a post, I want to add some pictures when necessary, so that it will help the item find its owner.\n// 2. As a user who posts my contact information, I want my contact information to be protected, so that bad guys will not be able to disturb me.\n// 3. As a user who neither lost nor picked up items, I want to add a follow-up of the post, so that I can provide additional information.\n// 4. As a user who browse the posts (potentially someone who lost something) , I want the post to be prioritized and I can also search the posts, so that it can help me find my item.\n// 5. As an admin of this platform, I want to manage the posts when necessary (Make universal announcement, delete, manually change the priority of the posts, so that I can keep the platform organized.\n//\n//\n// ## Software Architecture\n//\n// > Will this be a Web/desktop/mobile (all, or some other kind of) application? Would it conform to the Client-Server software architecture?\n//\n// It will be a Web application (Mobile application is also possible). It will conform to the Client-Server software architecture.\n//\n//\n//\n// `\n// const { html, css } = marpit.render(markdown)\n//\n// // 4. Use output in your HTML\n// const htmlFile = `\n// <!DOCTYPE html>\n// <html><body>\n//   <style>${css}</style>\n//   ${html}\n// </body></html>\n// `\n// // fs.writeFileSync('example.html', htmlFile.trim())\n//\n// class Convert extends Component {\n//   render() {\n//     return (\n//         <div>\n//           <div>\n//             {htmlFile}\n//           </div>\n//         </div>\n//     )\n//   }\n// }\n//\n// export default Convert\n//\n// // const props = {\n// //   name: 'file',\n// //   action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n// //   headers: {\n// //     authorization: 'authorization-text',\n// //   },\n// //   onChange(info) {\n// //     if (info.file.status !== 'uploading') {\n// //       console.log(info.file, info.fileList);\n// //     }\n// //     if (info.file.status === 'done') {\n// //       message.success(`${info.file.name} file uploaded successfully`);\n// //     } else if (info.file.status === 'error') {\n// //       message.error(`${info.file.name} file upload failed.`);\n// //     }\n// //   },\n// // };\n// //\n// // class Convert extends React.Component{\n// //   render() {\n// //     return(\n// //         <Convert {...{ html, css }}>\n// //           <Button>\n// //             <Icon type=\"convert\" /> Click to convert\n// //           </Button>\n// //         </Convert>\n// //     )\n// //   }\n// // }\n//\n// // export default Convert","map":{"version":3,"sources":["/Users/yaozixuan/OneDrive/JHU Semester 2/OOSE/my-app/src/marp.js"],"names":[],"mappingssourcesContent":["// import Marpit from '@marp-team/marpit'\n// import fs from 'fs'\n// import React, {Component} from \"react\";\n// import {Button, Icon, message, Upload} from \"antd\";\n// import MyUpload from \"./upload\";\n// import marked from \"./marked\";\n//\n// // 1. Create instance (with options if you want)\n// const marpit = new Marpit()\n//\n// // 2. Add theme CSS\n// const theme = `\n// /* @theme example */\n//\n// section {\n//   background-color: #369;\n//   color: #fff;\n//   font-size: 30px;\n//   padding: 40px;\n// }\n//\n// h1,\n// h2 {\n//   text-align: center;\n//   margin: 0;\n// }\n//\n// h1 {\n//   color: #8cf;\n// }\n// `\n// marpit.themeSet.default = marpit.themeSet.add(theme)\n//\n// // 3. Render markdown\n// const markdown = `\n//\n// # Homework 1\n//\n// # Requirement Specification Document\n//\n// ## Problem Statement\n//\n// > Write a few sentences that describes the problem you are trying to solve. In other words, justify why this software project is needed.\n//\n// People sometimes lose their personal belongings somewhere on the campus. Currently, only important stuff like wallet found inside the library will be handed to the security. It is really hard for people who lose their belongings in other common areas to look for their belongings. It is also unclear who people should turn to when they pick up stuff on the campus. Therefore, a uniform Campus Lost & Found platform is needed.\n//\n//\n// ## Potential Clients\n//\n// > Who are affected by this problem (and would benefit from the proposed solution)? I.e. the potential users of the software you are going to build.\n//\n// Whoever loses or picks up items on homewood campus. It is also possible to extend this service to other campuses or universities.\n//\n//\n// ## Proposed Solution\n//\n// > Write a few sentences that describes how a software solution will solve the problem described above.\n//\n// Build a website for people on the campus to post item lost information and item picked up information, facilitating people to find their missing belongings.\n//\n// ## Functional Requirements\n//\n// > List the (functional) requirements that software needs to have in order to solve the problem stated above. It is useful to write the requirements in form of **User Stories** and group them into those that are essential (must have), and those which are non-essential (but nice to have).\n//\n//\n// ### Must have\n//\n// 1. As a person who lost items, I want to post some information about the item I lost: What is it? Where did I potentially lose it? When did I potentially lose it?, so that people who picked up the item can know whose item is it?\n// 2. As a person who lost items, I want to post my contact information, so that people who picked up the item can contact me and return it to me.\n// 3. As a person who picked up items, I want to post some information about the item I picked up: What is it? Where did I pick it up? When did I pick it up? and my contact information, so that the owner of this item can reach out to me.\n// 4. As a user (either lost or picked up items), I want to browse the posts, so that I can find the owner or the person who picked up my item.\n// 5. As a user who posts a post, I want to close the post so that it will not bother others anymore after my issue is solved.\n//\n//\n// ### Nice to have\n//\n// 1. As a user who wants to post a post, I want to add some pictures when necessary, so that it will help the item find its owner.\n// 2. As a user who posts my contact information, I want my contact information to be protected, so that bad guys will not be able to disturb me.\n// 3. As a user who neither lost nor picked up items, I want to add a follow-up of the post, so that I can provide additional information.\n// 4. As a user who browse the posts (potentially someone who lost something) , I want the post to be prioritized and I can also search the posts, so that it can help me find my item.\n// 5. As an admin of this platform, I want to manage the posts when necessary (Make universal announcement, delete, manually change the priority of the posts, so that I can keep the platform organized.\n//\n//\n// ## Software Architecture\n//\n// > Will this be a Web/desktop/mobile (all, or some other kind of) application? Would it conform to the Client-Server software architecture?\n//\n// It will be a Web application (Mobile application is also possible). It will conform to the Client-Server software architecture.\n//\n//\n//\n// `\n// const { html, css } = marpit.render(markdown)\n//\n// // 4. Use output in your HTML\n// const htmlFile = `\n// <!DOCTYPE html>\n// <html><body>\n//   <style>${css}</style>\n//   ${html}\n// </body></html>\n// `\n// // fs.writeFileSync('example.html', htmlFile.trim())\n//\n// class Convert extends Component {\n//   render() {\n//     return (\n//         <div>\n//           <div>\n//             {htmlFile}\n//           </div>\n//         </div>\n//     )\n//   }\n// }\n//\n// export default Convert\n//\n// // const props = {\n// //   name: 'file',\n// //   action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n// //   headers: {\n// //     authorization: 'authorization-text',\n// //   },\n// //   onChange(info) {\n// //     if (info.file.status !== 'uploading') {\n// //       console.log(info.file, info.fileList);\n// //     }\n// //     if (info.file.status === 'done') {\n// //       message.success(`${info.file.name} file uploaded successfully`);\n// //     } else if (info.file.status === 'error') {\n// //       message.error(`${info.file.name} file upload failed.`);\n// //     }\n// //   },\n// // };\n// //\n// // class Convert extends React.Component{\n// //   render() {\n// //     return(\n// //         <Convert {...{ html, css }}>\n// //           <Button>\n// //             <Icon type=\"convert\" /> Click to convert\n// //           </Button>\n// //         </Convert>\n// //     )\n// //   }\n// // }\n//\n// // export default Convert"]},"metadata":{},"sourceType":"module"}