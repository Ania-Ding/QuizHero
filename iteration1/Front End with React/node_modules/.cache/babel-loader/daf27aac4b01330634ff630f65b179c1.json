{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _advanced_background = _interopRequireDefault(require(\"./postcss/advanced_background\"));\n\nvar _replace = _interopRequireDefault(require(\"./postcss/import/replace\"));\n\nvar _rollup = _interopRequireDefault(require(\"./postcss/import/rollup\"));\n\nvar _suppress = _interopRequireDefault(require(\"./postcss/import/suppress\"));\n\nvar _pagination = _interopRequireDefault(require(\"./postcss/pagination\"));\n\nvar _printable = _interopRequireWildcard(require(\"./postcss/printable\"));\n\nvar _prepend = _interopRequireDefault(require(\"./postcss/pseudo_selector/prepend\"));\n\nvar _replace2 = _interopRequireDefault(require(\"./postcss/pseudo_selector/replace\"));\n\nvar _theme = _interopRequireDefault(require(\"./theme\"));\n\nvar _scaffold = _interopRequireDefault(require(\"./theme/scaffold\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Marpit theme set class.\n */\n\n\nclass ThemeSet {\n  /**\n   * Create a ThemeSet instance.\n   */\n  constructor() {\n    /**\n     * An instance of default theme.\n     *\n     * While running {@link ThemeSet#pack}, ThemeSet will use this theme when\n     * the definition of theme directive or the theme with specified name is not\n     * found.\n     *\n     * By default, Marpit does not provide default theme (`undefined`).\n     *\n     * @type {Theme|undefined}\n     */\n    this.default = undefined;\n    /**\n     * The default type settings for theme metadata added by\n     * {@link ThemeSet#add}.\n     *\n     * A key of object is the name of metadata and a value is the type which of\n     * `String` and `Array`. You have to set `Array` if the theme allows\n     * multi-time definitions in same meta key.\n     *\n     * ```css\n     * /**\n     *  * @theme example\n     *  * @foo Single value\n     *  * @foo allows only one string\n     *  * @bar Multiple value 1\n     *  * @bar Multiple value 2\n     *  * @bar Multiple value 3\n     *  * ...\n     * ```\n     *\n     * ```js\n     * const themeSet = new ThemeSet()\n     *\n     * themeSet.metaType = {\n     *   foo: String,\n     *   bar: Array,\n     * }\n     *\n     * themeSet.add(css)\n     *\n     * console.log(themeSet.getThemeMeta('example', 'foo'))\n     * // => 'allows only one string'\n     *\n     * console.log(themeSet.getThemeMeta('example', 'bar'))\n     * // => ['Multiple value 1', 'Multiple value 2', 'Multiple value 3']\n     * ```\n     *\n     * @type {Object}\n     */\n\n    this.metaType = {};\n    Object.defineProperty(this, 'themeMap', {\n      value: new Map()\n    });\n  }\n  /**\n   * Return the number of themes.\n   *\n   * @type {number}\n   * @readonly\n   */\n\n\n  get size() {\n    return this.themeMap.size;\n  }\n  /**\n   * Add theme CSS from string.\n   *\n   * @param {string} css The theme CSS string.\n   * @returns {Theme} A created {@link Theme} instance.\n   * @throws Will throw an error if the theme name is not specified by `@theme`\n   *     metadata.\n   */\n\n\n  add(css) {\n    const theme = _theme.default.fromCSS(css, {\n      metaType: this.metaType\n    });\n\n    this.addTheme(theme);\n    return theme;\n  }\n  /**\n   * Add theme instance.\n   *\n   * @param {Theme} theme The theme instance.\n   * @throws Will throw an error if the theme name is not specified.\n   */\n\n\n  addTheme(theme) {\n    if (!(theme instanceof _theme.default)) throw new Error('ThemeSet can add only an instance of Theme.');\n    if (typeof theme.name !== 'string') throw new Error('An instance of Theme requires name.');\n    this.themeMap.set(theme.name, theme);\n  }\n  /**\n   * Removes all themes from a {@link themeSet} object.\n   */\n\n\n  clear() {\n    return this.themeMap.clear();\n  }\n  /**\n   * Remove a specific named theme from a {@link themeSet} object.\n   *\n   * @param {string} name The theme name to delete.\n   * @returns {boolean} Returns `true` if a theme in current {@link ThemeSet}\n   *     existed and has been removed, or `false` if the theme does not exist.\n   */\n\n\n  delete(name) {\n    return this.themeMap.delete(name);\n  }\n  /**\n   * Returns a specific named theme.\n   *\n   * @param {string} name The theme name to get.\n   * @param {boolean} [fallback=false] If true, return instance's default theme\n   *     or scaffold theme when specified theme cannot find.\n   * @returns {Theme|undefined} Returns specified or fallbacked theme, or\n   *     `undefined` if `fallback` is false and the specified theme has not\n   *     existed.\n   */\n\n\n  get(name, fallback = false) {\n    const theme = this.themeMap.get(name);\n    return fallback ? theme || this.default || _scaffold.default : theme;\n  }\n  /**\n   * Returns value(s) of specified metadata from a theme. It considers `@import`\n   * and `@import-theme` rules in getting meta value. On the other hand, the\n   * default theme specified by the instance is not considered.\n   *\n   * To support metadata with array type, it will merge into a flatten array\n   * when the all of got valid values that includes imported themes are array.\n   *\n   * @param {string|Theme} theme The theme name or instance.\n   * @param {string} meta The meta name to get.\n   * @returns {string|string[]|undefined}\n   */\n\n\n  getThemeMeta(theme, meta) {\n    const themeInstance = theme instanceof _theme.default ? theme : this.get(theme);\n    const metas = themeInstance ? this.resolveImport(themeInstance).map(t => t.meta[meta]).filter(m => m) : []; // Flatten in order of definitions when the all of valid values are array\n\n    if (metas.length > 0 && metas.every(m => Array.isArray(m))) {\n      const mergedArray = [];\n\n      for (const m of metas) mergedArray.unshift(...m);\n\n      return mergedArray;\n    }\n\n    return metas[0];\n  }\n  /**\n   * Returns the value of specified property name from a theme. It considers\n   * `@import` and `@import-theme` rules in getting value.\n   *\n   * It will fallback the reference object into the instance's default theme or\n   * scaffold theme when the specified theme is `undefined`.\n   *\n   * @param {string|Theme} theme The theme name or instance.\n   * @param {string} prop The property name to get.\n   * @returns {*}\n   */\n\n\n  getThemeProp(theme, prop) {\n    const themeInstance = theme instanceof _theme.default ? theme : this.get(theme);\n    const props = themeInstance ? this.resolveImport(themeInstance).map(t => t[prop]) : [];\n    return [...props, this.default && this.default[prop], _scaffold.default[prop]].find(t => t);\n  }\n  /**\n   * Returns a boolean indicating whether a specific named theme exists or not.\n   *\n   * @param {string} name The theme name.\n   * @returns {boolean} Returns `true` if a specific named theme exists,\n   *     otherwise `false`.\n   */\n\n\n  has(name) {\n    return this.themeMap.has(name);\n  }\n  /**\n   * Convert registered theme CSS into usable in the rendered markdown by\n   * {@link Marpit#render}.\n   *\n   * You should use {@link Marpit#render} unless there is some particular\n   * reason.\n   *\n   * @param {string} name The theme name. It will use the instance's default\n   *     theme or scaffold theme when a specific named theme does not exist.\n   * @param {Object} [opts] The option object passed by {@link Marpit#render}.\n   * @param {string} [opts.after] A CSS string to append into after theme.\n   * @param {string} [opts.before] A CSS string to prepend into before theme.\n   * @param {Element[]} [opts.containers] Container elements wrapping whole\n   *     slide deck.\n   * @param {boolean} [opts.printable] Make style printable to PDF.\n   * @param {boolean} [opts.inlineSVG] Apply a hierarchy of inline SVG to CSS\n   *     selector by setting `true`. _(Experimental)_\n   * @return {string} The converted CSS string.\n   */\n\n\n  pack(name, opts = {}) {\n    const slideElements = [{\n      tag: 'section'\n    }];\n    const theme = this.get(name, true);\n    if (opts.inlineSVG) slideElements.unshift({\n      tag: 'svg'\n    }, {\n      tag: 'foreignObject'\n    });\n\n    const additionalCSS = css => {\n      if (!css) return undefined;\n\n      try {\n        return (0, _postcss.default)([(0, _suppress.default)(this)]).process(css).css;\n      } catch (e) {\n        return undefined;\n      }\n    };\n\n    const after = additionalCSS(opts.after);\n    const before = additionalCSS(opts.before);\n    const packer = (0, _postcss.default)([before && (css => css.first.before(before)), after && (css => css.last.after(after)), _rollup.default, (0, _replace.default)(this), opts.printable && (0, _printable.default)({\n      width: this.getThemeProp(theme, 'width'),\n      height: this.getThemeProp(theme, 'height')\n    }), theme !== _scaffold.default && (css => css.first.before(_scaffold.default.css)), opts.inlineSVG && _advanced_background.default, _pagination.default, _prepend.default, (0, _replace2.default)(opts.containers, slideElements), opts.printable && _printable.postprocess, _rollup.default].filter(p => p));\n    return packer.process(theme.css).css;\n  }\n  /**\n   * Returns a `Iterator` object that contains registered themes to current\n   * instance.\n   *\n   * @returns {Iterator.<Theme>}\n   */\n\n\n  themes() {\n    return this.themeMap.values();\n  }\n  /**\n   * Resolves `@import` and `@import-theme` and returns an array of using theme\n   * instances.\n   *\n   * @private\n   * @param {Theme} theme Theme instance\n   * @returns {Theme[]}\n   */\n\n\n  resolveImport(theme, importedThemes = []) {\n    const {\n      name\n    } = theme;\n    if (importedThemes.includes(name)) throw new Error(`Circular \"${name}\" theme import is detected.`);\n    const resolvedThemes = [theme];\n    theme.importRules.forEach(m => {\n      const importTheme = this.get(m.value);\n      if (importTheme) resolvedThemes.push(...this.resolveImport(importTheme, [...importedThemes, name].filter(n => n)));\n    });\n    return resolvedThemes.filter(v => v);\n  }\n\n}\n\nvar _default = ThemeSet;\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/theme_set.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_advanced_background","_replace","_rollup","_suppress","_pagination","_printable","_interopRequireWildcard","_prepend","_replace2","_theme","_scaffold","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ThemeSet","constructor","undefined","metaType","Map","size","themeMap","add","css","theme","fromCSS","addTheme","Error","name","clear","delete","fallback","getThemeMeta","meta","themeInstance","metas","resolveImport","map","t","filter","m","length","every","Array","isArray","mergedArray","unshift","getThemeProp","prop","props","find","pack","opts","slideElements","tag","inlineSVG","additionalCSS","process","e","after","before","packer","first","last","printable","width","height","containers","postprocess","p","themes","values","importedThemes","includes","resolvedThemes","importRules","forEach","importTheme","push","n","v","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _advanced_background = _interopRequireDefault(require(\"./postcss/advanced_background\"));\n\nvar _replace = _interopRequireDefault(require(\"./postcss/import/replace\"));\n\nvar _rollup = _interopRequireDefault(require(\"./postcss/import/rollup\"));\n\nvar _suppress = _interopRequireDefault(require(\"./postcss/import/suppress\"));\n\nvar _pagination = _interopRequireDefault(require(\"./postcss/pagination\"));\n\nvar _printable = _interopRequireWildcard(require(\"./postcss/printable\"));\n\nvar _prepend = _interopRequireDefault(require(\"./postcss/pseudo_selector/prepend\"));\n\nvar _replace2 = _interopRequireDefault(require(\"./postcss/pseudo_selector/replace\"));\n\nvar _theme = _interopRequireDefault(require(\"./theme\"));\n\nvar _scaffold = _interopRequireDefault(require(\"./theme/scaffold\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Marpit theme set class.\n */\nclass ThemeSet {\n  /**\n   * Create a ThemeSet instance.\n   */\n  constructor() {\n    /**\n     * An instance of default theme.\n     *\n     * While running {@link ThemeSet#pack}, ThemeSet will use this theme when\n     * the definition of theme directive or the theme with specified name is not\n     * found.\n     *\n     * By default, Marpit does not provide default theme (`undefined`).\n     *\n     * @type {Theme|undefined}\n     */\n    this.default = undefined;\n    /**\n     * The default type settings for theme metadata added by\n     * {@link ThemeSet#add}.\n     *\n     * A key of object is the name of metadata and a value is the type which of\n     * `String` and `Array`. You have to set `Array` if the theme allows\n     * multi-time definitions in same meta key.\n     *\n     * ```css\n     * /**\n     *  * @theme example\n     *  * @foo Single value\n     *  * @foo allows only one string\n     *  * @bar Multiple value 1\n     *  * @bar Multiple value 2\n     *  * @bar Multiple value 3\n     *  * ...\n     * ```\n     *\n     * ```js\n     * const themeSet = new ThemeSet()\n     *\n     * themeSet.metaType = {\n     *   foo: String,\n     *   bar: Array,\n     * }\n     *\n     * themeSet.add(css)\n     *\n     * console.log(themeSet.getThemeMeta('example', 'foo'))\n     * // => 'allows only one string'\n     *\n     * console.log(themeSet.getThemeMeta('example', 'bar'))\n     * // => ['Multiple value 1', 'Multiple value 2', 'Multiple value 3']\n     * ```\n     *\n     * @type {Object}\n     */\n\n    this.metaType = {};\n    Object.defineProperty(this, 'themeMap', {\n      value: new Map()\n    });\n  }\n  /**\n   * Return the number of themes.\n   *\n   * @type {number}\n   * @readonly\n   */\n\n\n  get size() {\n    return this.themeMap.size;\n  }\n  /**\n   * Add theme CSS from string.\n   *\n   * @param {string} css The theme CSS string.\n   * @returns {Theme} A created {@link Theme} instance.\n   * @throws Will throw an error if the theme name is not specified by `@theme`\n   *     metadata.\n   */\n\n\n  add(css) {\n    const theme = _theme.default.fromCSS(css, {\n      metaType: this.metaType\n    });\n\n    this.addTheme(theme);\n    return theme;\n  }\n  /**\n   * Add theme instance.\n   *\n   * @param {Theme} theme The theme instance.\n   * @throws Will throw an error if the theme name is not specified.\n   */\n\n\n  addTheme(theme) {\n    if (!(theme instanceof _theme.default)) throw new Error('ThemeSet can add only an instance of Theme.');\n    if (typeof theme.name !== 'string') throw new Error('An instance of Theme requires name.');\n    this.themeMap.set(theme.name, theme);\n  }\n  /**\n   * Removes all themes from a {@link themeSet} object.\n   */\n\n\n  clear() {\n    return this.themeMap.clear();\n  }\n  /**\n   * Remove a specific named theme from a {@link themeSet} object.\n   *\n   * @param {string} name The theme name to delete.\n   * @returns {boolean} Returns `true` if a theme in current {@link ThemeSet}\n   *     existed and has been removed, or `false` if the theme does not exist.\n   */\n\n\n  delete(name) {\n    return this.themeMap.delete(name);\n  }\n  /**\n   * Returns a specific named theme.\n   *\n   * @param {string} name The theme name to get.\n   * @param {boolean} [fallback=false] If true, return instance's default theme\n   *     or scaffold theme when specified theme cannot find.\n   * @returns {Theme|undefined} Returns specified or fallbacked theme, or\n   *     `undefined` if `fallback` is false and the specified theme has not\n   *     existed.\n   */\n\n\n  get(name, fallback = false) {\n    const theme = this.themeMap.get(name);\n    return fallback ? theme || this.default || _scaffold.default : theme;\n  }\n  /**\n   * Returns value(s) of specified metadata from a theme. It considers `@import`\n   * and `@import-theme` rules in getting meta value. On the other hand, the\n   * default theme specified by the instance is not considered.\n   *\n   * To support metadata with array type, it will merge into a flatten array\n   * when the all of got valid values that includes imported themes are array.\n   *\n   * @param {string|Theme} theme The theme name or instance.\n   * @param {string} meta The meta name to get.\n   * @returns {string|string[]|undefined}\n   */\n\n\n  getThemeMeta(theme, meta) {\n    const themeInstance = theme instanceof _theme.default ? theme : this.get(theme);\n    const metas = themeInstance ? this.resolveImport(themeInstance).map(t => t.meta[meta]).filter(m => m) : []; // Flatten in order of definitions when the all of valid values are array\n\n    if (metas.length > 0 && metas.every(m => Array.isArray(m))) {\n      const mergedArray = [];\n\n      for (const m of metas) mergedArray.unshift(...m);\n\n      return mergedArray;\n    }\n\n    return metas[0];\n  }\n  /**\n   * Returns the value of specified property name from a theme. It considers\n   * `@import` and `@import-theme` rules in getting value.\n   *\n   * It will fallback the reference object into the instance's default theme or\n   * scaffold theme when the specified theme is `undefined`.\n   *\n   * @param {string|Theme} theme The theme name or instance.\n   * @param {string} prop The property name to get.\n   * @returns {*}\n   */\n\n\n  getThemeProp(theme, prop) {\n    const themeInstance = theme instanceof _theme.default ? theme : this.get(theme);\n    const props = themeInstance ? this.resolveImport(themeInstance).map(t => t[prop]) : [];\n    return [...props, this.default && this.default[prop], _scaffold.default[prop]].find(t => t);\n  }\n  /**\n   * Returns a boolean indicating whether a specific named theme exists or not.\n   *\n   * @param {string} name The theme name.\n   * @returns {boolean} Returns `true` if a specific named theme exists,\n   *     otherwise `false`.\n   */\n\n\n  has(name) {\n    return this.themeMap.has(name);\n  }\n  /**\n   * Convert registered theme CSS into usable in the rendered markdown by\n   * {@link Marpit#render}.\n   *\n   * You should use {@link Marpit#render} unless there is some particular\n   * reason.\n   *\n   * @param {string} name The theme name. It will use the instance's default\n   *     theme or scaffold theme when a specific named theme does not exist.\n   * @param {Object} [opts] The option object passed by {@link Marpit#render}.\n   * @param {string} [opts.after] A CSS string to append into after theme.\n   * @param {string} [opts.before] A CSS string to prepend into before theme.\n   * @param {Element[]} [opts.containers] Container elements wrapping whole\n   *     slide deck.\n   * @param {boolean} [opts.printable] Make style printable to PDF.\n   * @param {boolean} [opts.inlineSVG] Apply a hierarchy of inline SVG to CSS\n   *     selector by setting `true`. _(Experimental)_\n   * @return {string} The converted CSS string.\n   */\n\n\n  pack(name, opts = {}) {\n    const slideElements = [{\n      tag: 'section'\n    }];\n    const theme = this.get(name, true);\n    if (opts.inlineSVG) slideElements.unshift({\n      tag: 'svg'\n    }, {\n      tag: 'foreignObject'\n    });\n\n    const additionalCSS = css => {\n      if (!css) return undefined;\n\n      try {\n        return (0, _postcss.default)([(0, _suppress.default)(this)]).process(css).css;\n      } catch (e) {\n        return undefined;\n      }\n    };\n\n    const after = additionalCSS(opts.after);\n    const before = additionalCSS(opts.before);\n    const packer = (0, _postcss.default)([before && (css => css.first.before(before)), after && (css => css.last.after(after)), _rollup.default, (0, _replace.default)(this), opts.printable && (0, _printable.default)({\n      width: this.getThemeProp(theme, 'width'),\n      height: this.getThemeProp(theme, 'height')\n    }), theme !== _scaffold.default && (css => css.first.before(_scaffold.default.css)), opts.inlineSVG && _advanced_background.default, _pagination.default, _prepend.default, (0, _replace2.default)(opts.containers, slideElements), opts.printable && _printable.postprocess, _rollup.default].filter(p => p));\n    return packer.process(theme.css).css;\n  }\n  /**\n   * Returns a `Iterator` object that contains registered themes to current\n   * instance.\n   *\n   * @returns {Iterator.<Theme>}\n   */\n\n\n  themes() {\n    return this.themeMap.values();\n  }\n  /**\n   * Resolves `@import` and `@import-theme` and returns an array of using theme\n   * instances.\n   *\n   * @private\n   * @param {Theme} theme Theme instance\n   * @returns {Theme[]}\n   */\n\n\n  resolveImport(theme, importedThemes = []) {\n    const {\n      name\n    } = theme;\n    if (importedThemes.includes(name)) throw new Error(`Circular \"${name}\" theme import is detected.`);\n    const resolvedThemes = [theme];\n    theme.importRules.forEach(m => {\n      const importTheme = this.get(m.value);\n      if (importTheme) resolvedThemes.push(...this.resolveImport(importTheme, [...importedThemes, name].filter(n => n)));\n    });\n    return resolvedThemes.filter(v => v);\n  }\n\n}\n\nvar _default = ThemeSet;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}