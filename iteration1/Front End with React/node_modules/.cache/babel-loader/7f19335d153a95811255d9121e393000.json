{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** @module */\n\n/**\n * Marpit collect plugin.\n *\n * Collect parsed tokens per slide and comments except marked as used for\n * internally. These will store to lastSlideTokens and lastComments member of\n * Marpit instance. It would use in the returned object from\n * {@link Marpit#render}.\n *\n * @alias module:markdown/collect\n * @param {MarkdownIt} md markdown-it instance.\n */\n\n\nfunction collect(md) {\n  var marpit = md.marpit;\n  md.core.ruler.push('marpit_collect', function (state) {\n    if (state.inlineMode) return;\n    marpit.lastComments = [];\n    marpit.lastSlideTokens = [];\n    var currentPage;\n    var pageIdx = -1;\n\n    var collectComment = function collectComment(token) {\n      if (currentPage >= 0 && !(token.meta && token.meta.marpitCommentParsed !== undefined)) marpit.lastComments[currentPage].push(token.content);\n    };\n\n    var collectable = function collectable() {\n      return currentPage >= 0 && marpit.lastSlideTokens[currentPage] !== undefined;\n    };\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = state.tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n\n        if (token.meta && token.meta.marpitSlideElement === 1) {\n          pageIdx += 1;\n          currentPage = pageIdx;\n\n          if (marpit.lastSlideTokens[currentPage] === undefined) {\n            marpit.lastSlideTokens[currentPage] = [token];\n            marpit.lastComments[currentPage] = [];\n          }\n        } else if (token.meta && token.meta.marpitSlideElement === -1) {\n          if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n          currentPage = undefined;\n        } else {\n          if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n\n          if (token.type === 'marpit_comment') {\n            collectComment(token);\n          } else if (token.type === 'inline') {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = token.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var t = _step2.value;\n                if (t.type === 'marpit_comment') collectComment(t);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(collect);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/yaozixuan/Document/OOSE/my-app/node_modules/@marp-team/marpit/lib/markdown/collect.js"],"names":["Object","defineProperty","exports","value","default","_plugin","_interopRequireDefault","require","obj","__esModule","collect","md","marpit","core","ruler","push","state","inlineMode","lastComments","lastSlideTokens","currentPage","pageIdx","collectComment","token","meta","marpitCommentParsed","undefined","content","collectable","tokens","marpitSlideElement","type","children","t","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @module */\n\n/**\n * Marpit collect plugin.\n *\n * Collect parsed tokens per slide and comments except marked as used for\n * internally. These will store to lastSlideTokens and lastComments member of\n * Marpit instance. It would use in the returned object from\n * {@link Marpit#render}.\n *\n * @alias module:markdown/collect\n * @param {MarkdownIt} md markdown-it instance.\n */\nfunction collect(md) {\n  const {\n    marpit\n  } = md;\n  md.core.ruler.push('marpit_collect', state => {\n    if (state.inlineMode) return;\n    marpit.lastComments = [];\n    marpit.lastSlideTokens = [];\n    let currentPage;\n    let pageIdx = -1;\n\n    const collectComment = token => {\n      if (currentPage >= 0 && !(token.meta && token.meta.marpitCommentParsed !== undefined)) marpit.lastComments[currentPage].push(token.content);\n    };\n\n    const collectable = () => currentPage >= 0 && marpit.lastSlideTokens[currentPage] !== undefined;\n\n    for (const token of state.tokens) {\n      if (token.meta && token.meta.marpitSlideElement === 1) {\n        pageIdx += 1;\n        currentPage = pageIdx;\n\n        if (marpit.lastSlideTokens[currentPage] === undefined) {\n          marpit.lastSlideTokens[currentPage] = [token];\n          marpit.lastComments[currentPage] = [];\n        }\n      } else if (token.meta && token.meta.marpitSlideElement === -1) {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n        currentPage = undefined;\n      } else {\n        if (collectable()) marpit.lastSlideTokens[currentPage].push(token);\n\n        if (token.type === 'marpit_comment') {\n          collectComment(token);\n        } else if (token.type === 'inline') {\n          for (const t of token.children) if (t.type === 'marpit_comment') collectComment(t);\n        }\n      }\n    }\n  });\n}\n\nvar _default = (0, _plugin.default)(collect);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}